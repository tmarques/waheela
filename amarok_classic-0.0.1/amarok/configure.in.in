
###############################################################################
# BEGIN PKG-CONFIG CHECK
###############################################################################

AC_ARG_VAR(PKGCONFIGFOUND, [Path to pkg-config])
AC_CHECK_PROG(PKGCONFIGFOUND, pkg-config,[yes])

###############################################################################
# END PKG-CONFIG CHECK
###############################################################################



###############################################################################
# BEGIN KDEMULTIMEDIA CHECK
###############################################################################

KDE_CHECK_HEADER(arts/artsmodules.h, have_kdemm=yes, have_kdemm=no)

AM_CONDITIONAL(with_arts, [test x$have_kdemm = xyes -a x$build_arts = xyes])

if test x$build_arts = xyes -a x$have_kdemm = xyes; then
    AC_DEFINE(HAVE_ARTS, 1, [have aRts and kdemultimedia])
    arts_libs="-lqtmcop -lkmedia2_idl -lartsflow -lsoundserver_idl -lartskde -lartsgui -lartsgui_kde -lartsmodules"
fi

AC_SUBST(arts_libs)

###############################################################################
# END KDEMULTIMEDIA CHECK
###############################################################################



###############################################################################
# BEGIN TAGLIB CHECK
###############################################################################

TAGLIB_REQ_VERSION="1.4.0";
AC_DEFUN([VERSION_TO_NUMBER], [`$1 | awk 'BEGIN { FS = "."; } { printf "%d",  ([$]1* 1000 + [$]2) * 1000 + [$]3;}'`])

AC_PATH_PROG(TAGLIB_CONFIG, taglib-config, no)

if test "x$TAGLIB_CONFIG" = "xno" ; then
    amarok_error_notaglib=yes
    DO_NOT_COMPILE="$DO_NOT_COMPILE amarok"
    no_amarok=yes
else
    AC_DEFINE(HAVE_TAGLIB, 1, [have TagLib])
    taglib_includes=[`$TAGLIB_CONFIG --cflags`]
    taglib_libs=[`$TAGLIB_CONFIG --libs`]
    taglib_version=[`$TAGLIB_CONFIG --version`]

    if test VERSION_TO_NUMBER(echo $taglib_version) -lt VERSION_TO_NUMBER(echo $TAGLIB_REQ_VERSION); then
        amarok_error_taglibold=yes
        DO_NOT_COMPILE="$DO_NOT_COMPILE amarok"
        no_amarok=yes
    fi
fi

AC_SUBST(taglib_includes)
AC_SUBST(taglib_libs)

###############################################################################
# END TAGLIB CHECK
###############################################################################



###############################################################################
# BEGIN GSTREAMER CHECK
###############################################################################

AC_ARG_WITH(gstreamer,
    AC_HELP_STRING([--without-gstreamer],[build amaroK without GStreamer-engine]),
    [build_gstreamer=$withval],
    [build_gstreamer=yes]
)

if test "$build_gstreamer" != "no"; then
    if test "$PKGCONFIGFOUND" = "yes" ; then
        # check for GStreamer
        dnl Now we're ready to ask for gstreamer libs and cflags
        dnl And we can also ask for the right version of gstreamer
        have_gst=no

        GST_MAJORMINOR=0.8
        GST_REQ=0.8.6

        PKG_CHECK_MODULES(GST, gstreamer-$GST_MAJORMINOR >= $GST_REQ,
            have_gst=yes,have_gst=no)

        PKG_CHECK_MODULES(GST_PLUGINS, gstreamer-plugins-$GST_MAJORMINOR >= $GST_REQ, \
            have_gst_plugins=yes,have_gst_plugins=no)

        dnl Give error if we don't have gstreamer
        if test "x$have_gst" = "xno"; then
            LIB_GST=""
            CFLAGS_GST=""
        else
            LIB_GST=$GST_LIBS
            CFLAGS_GST=$GST_CFLAGS
            AC_SUBST(LIB_GST)
            AC_SUBST(CFLAGS_GST)
            AC_SUBST(GST_MAJORMINOR)
            AC_DEFINE(HAVE_GSTREAMER, 1, [have GStreamer])
        fi
    fi
fi

### The gstreamer engine subdirectory equalizer/ uses
### gst/audio/audio.h, which is in gstreamer-plugins (at least for me)
amarok_save_cppflags="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $CFLAGS_GST"
AC_CHECK_HEADER(gst/audio/audio.h,[],[have_gst="no"])
CPPFLAGS="$amarok_save_cppflags"

AM_CONDITIONAL(with_gst, [test x$have_gst = xyes])

###############################################################################
# END GSTREAMER CHECK
###############################################################################



###############################################################################
# BEGIN XINE CHECK
###############################################################################

AC_ARG_WITH(xine,
    AC_HELP_STRING([--without-xine],[build amaroK without xine-engine]),
    [build_xine=$withval],
    [build_xine=yes]
)

if test "$build_xine" != "no"; then

    AC_CHECK_PROG(XINE_CONFIG, xine-config, yes)

    if test x$XINE_CONFIG = xyes ; then
        AC_DEFINE(HAVE_XINE, 1, [have Xine])
        CFLAGS_XINE=[`xine-config --cflags`]
        LIBS_XINE=[`xine-config --libs`]

        xine_version=`xine-config --version`
        xine_version=VERSION_TO_NUMBER(echo $xine_version)
        xine_version_min="1.0.0"
        xine_version_min=VERSION_TO_NUMBER(echo $xine_version_min)

        xine_include=`xine-config --cflags | sed -e 's|.*-I/|/|;s/ .*//'`
        xine_rc_version=`sed -ne '/^#define XINE_VERSION/s/.*-rc\([0-9]\+\).*/\1/p' $xine_include/xine.h`
        : ${xine_rc_version:=4} # if this is no rc version, it fulfills the requirements

        AC_MSG_CHECKING([for xine-lib version >= 1.0-rc4])

        if test $xine_version -eq $xine_version_min \
             -a $xine_rc_version -gt 3 \
             -o $xine_version -gt $xine_version_min; then

            echo "yes"

        else
            echo "no"

            amarok_warning_xineold=yes
            build_xine=no
        fi
    else
        build_xine=no
    fi
fi

AM_CONDITIONAL(with_xine, test x$build_xine = xyes)
AC_SUBST(CFLAGS_XINE)
AC_SUBST(LIBS_XINE)

###############################################################################
# END XINE CHECK
###############################################################################



###############################################################################
# BEGIN NMM CHECK
###############################################################################

AC_ARG_WITH(nmm,
    AC_HELP_STRING([--with-nmm],[build amaroK with NMM-engine]),
    [build_nmm=$withval],
    [build_nmm=no]
)

AC_ARG_WITH(nmm-dir,
    AC_HELP_STRING([--with-nmm-dir],[path to the NMM [default=/usr/local]]),
    [nmm_dir="$withval"],
    [nmm_dir=/usr/local]
)

if test "$build_nmm" != "no"; then

    CFLAGS_NMM="-I$nmm_dir/include"
    LDFLAGS_NMM="-L$nmm_dir/lib"
    AC_DEFINE(HAVE_NMM, 1, [have NMM])
fi

AM_CONDITIONAL(with_nmm, test x$build_nmm = xyes)
AC_SUBST(CFLAGS_NMM)
AC_SUBST(LDFLAGS_NMM)

###############################################################################
# END NMM CHECK
###############################################################################



###############################################################################
# BEGIN MAS CHECK
###############################################################################

AC_ARG_WITH(mas,
    AC_HELP_STRING([--with-mas],[build amaroK with MAS-engine]),
    [build_mas=$withval],
    [build_mas=no]
)


if test "$build_mas" != "no"; then

    AC_PATH_PROG(MAS_CONFIG, mas-config, no)

    if test $MAS_CONFIG = "no"
    then
        amarok_warning_mas_notfound=yes
    echo "amarok_warning_mas_notfound: $amarok_warning_mas_notfound"
        build_mas=no
    else
        AC_DEFINE(HAVE_MAS, 1, [have MAS])

        CFLAGS_MAS=[`$MAS_CONFIG --cflags`]
        LIBS_MAS=[`$MAS_CONFIG --libs`]

        build_mas=yes
    fi
fi

AM_CONDITIONAL(with_mas, test x$build_mas = xyes)
AC_SUBST(CFLAGS_MAS)
AC_SUBST(LIBS_MAS)

###############################################################################
# END MAS CHECK
###############################################################################



###############################################################################
# BEGIN HELIX CHECK
###############################################################################

AC_ARG_WITH(helix,
    AC_HELP_STRING([--with-helix],[build amaroK with Helix-engine]),
    [build_helix=$withval],
    [build_helix=no]
)

if test "$build_helix" != "no"; then
    AC_MSG_CHECKING([for RealPlayer or HelixPlayer])

    if test "$build_helix" = "yes"; then
        HXPLAY=`type -p hxplay`
	RPLAY=`type -p realplay`
	if test "$RPLAY" != "" -a -x "$RPLAY"; then
	    HELIX_LINK=`readlink -f $RPLAY`
	    HELIX_LINK=`dirname $HELIX_LINK`
	    HELIX_LIBS=`unset CDPATH; cd $HELIX_LINK && pwd`
	    if test -e "$HELIX_LIBS/common/clntcore.so"; then
		AC_MSG_RESULT([found RealPlayer in $HELIX_LIBS])
		build_helix=$HELIX_LIBS
	    fi
	elif test "$HXPLAY" != "" -a -x "$HXPLAY"; then
	    HELIX_LINK=`readlink -f $HXPLAY`
	    HELIX_LINK=`dirname $HELIX_LINK`
	    HELIX_LIBS=`unset CDPATH; cd $HELIX_LINK && pwd`
	    if test -e "$HELIX_LIBS/common/clntcore.so"; then
		AC_MSG_RESULT([found HelixPlayer in $HELIX_LIBS])
		build_helix=$HELIX_LIBS
	    fi
	fi
    else
        HELIX_LIBS=`unset CDPATH; cd $build_helix && pwd`
	build_helix=$HELIX_LIBS
    fi

    AC_DEFINE(HAVE_HELIX, 1, [have HELIX])
    if test "$build_helix" = "yes"; then
        HELIX_LIBS="/usr/local/RealPlayer"
        echo "not found, using default dir"
    fi
    AC_DEFINE_UNQUOTED(HELIX_LIBS, "${HELIX_LIBS}", [location of helix libs])
    if test "$PKGCONFIGFOUND" = "yes" ; then
       PKG_CHECK_MODULES([ALSALIB], alsa, have_alsa=yes,have_alsa=no)
       if test "$have_alsa" = "yes" ; then
          AC_DEFINE(USE_HELIX_ALSA, 1, [support ALSA in the helix-engine])
       fi
    fi
fi

AM_CONDITIONAL(with_helix, test x$build_helix != xno)

###############################################################################
# END HELIX CHECK
###############################################################################



###############################################################################
# BEGIN QT OPENGL CHECK
###############################################################################

AC_ARG_WITH(opengl,
    AC_HELP_STRING([--without-opengl],[build amaroK without OpenGL support]),
    [build_opengl=$withval],
    [build_opengl=yes]
)

if test "$build_opengl" != "no"; then
    AC_MSG_CHECKING(for Qt with OpenGL support)
    AC_CACHE_VAL(ac_cv_kde_qt_has_opengl,
    [
    AC_LANG_SAVE
    AC_LANG_CPLUSPLUS

    save_CXXFLAGS="$CXXFLAGS"
    save_LIBS="$LIBS"
    save_LDFLAGS="$LDFLAGS"

    CXXFLAGS="$CXXFLAGS -I$qt_incdir $all_includes"
    LDFLAGS="$LDFLAGS -L$qt_libdir $all_libraries $USER_LDFLAGS $KDE_MT_LDFLAGS"
    LIBS="$LIBS $LIBQT $KDE_MT_LIBS"

    AC_TRY_LINK([
    #include <qgl.h>
    ],
    [
    (void)new QGLWidget((QWidget*)0, "qgl");
    ],
    ac_cv_kde_qt_has_opengl=yes,
    ac_cv_kde_qt_has_opengl=no)

    CXXFLAGS="$save_CXXFLAGS"
    LIBS="$save_LIBS"
    LDFLAGS="$save_LDFLAGS"
    AC_LANG_RESTORE
    ])
    AC_MSG_RESULT($ac_cv_kde_qt_has_opengl)

    if test x$ac_cv_kde_qt_has_opengl = xyes; then
    AC_DEFINE(HAVE_QGLWIDGET, 1, [have Qt with OpenGL support])
    gl_libs="-lGL"
    else
    gl_libs=""
    fi

    AC_SUBST(gl_libs)
fi

###############################################################################
# END QT OPENGL CHECK
###############################################################################



###############################################################################
# BEGIN SQLITE CHECK
###############################################################################

LIB_SQLITE=""

AC_ARG_WITH(included-sqlite,
    AC_HELP_STRING([--without-included-sqlite],[build amaroK using system sqlite library]),
    [included_sqlite=$withval],
    [included_sqlite=yes]
)

if test x$included_sqlite = xno; then
    if test x$PKGCONFIGFOUND = xyes; then
        PKG_CHECK_MODULES(SQLITE, sqlite3 >= 3.0, have_sqlite=yes,have_sqlite=no)

        if test x$have_sqlite = xyes; then
            ## AC_DEFINE(HAVE_SQLITE, 1, [have SQLite database library])
            LIB_SQLITE=`pkg-config --libs sqlite3`
        else
            # We don't support not having sqlite anymore
            DO_NOT_COMPILE="$DO_NOT_COMPILE amarok"
            no_amarok=yes
        fi
    fi
fi

AC_SUBST(LIB_SQLITE)
AM_CONDITIONAL(with_included_sqlite, [test x$included_sqlite = xyes])


# Determine pointer size for sqlite

KDE_CHECK_TYPES
AC_DEFINE(SQLITE_PTR_SZ, SIZEOF_CHAR_P, [Determine pointer size for SQLite])

###############################################################################
# END SQLITE CHECK
###############################################################################



###############################################################################
# BEGIN MYSQL CHECK
###############################################################################

AC_ARG_ENABLE(mysql,
    AC_HELP_STRING([--enable-mysql],[build amaroK with MySQL support]),
    [enable_mysql=$enableval],
    [enable_mysql=no]
)

if test "$enable_mysql" = "yes"; then

    AC_CHECK_PROG(MYSQL_CONFIG, mysql_config, yes)

    if test x$MYSQL_CONFIG = xyes; then
        AC_DEFINE(USE_MYSQL, 1, [MySql database support enabled])

        mysql_includes=`mysql_config --include`
        mysql_libs=`mysql_config --libs`
    else
        amarok_warning_mysql_notfound=yes
        enable_mysql=no
    fi

fi

AM_CONDITIONAL(enable_mysql, test x$enable_mysql = xyes)
AC_SUBST(mysql_includes)
AC_SUBST(mysql_libs)

###############################################################################
# END MYSQL CHECK
###############################################################################



###############################################################################
# BEGIN POSTGRESQL CHECK
###############################################################################

AC_ARG_ENABLE(postgresql,
    AC_HELP_STRING([--enable-postgresql],[build amaroK with PostgreSQL support]),
    [enable_postgresql=$enableval],
    [enable_postgresql=no]
)

if test "$enable_postgresql" = "yes"; then

    AC_CHECK_PROG(POSTGRESQL_CONFIG, pg_config, yes)

    if test x$POSTGRESQL_CONFIG = xyes; then
        AC_DEFINE(USE_POSTGRESQL, 1, [Postgresql database support enabled])

        postgresql_includes=-I`pg_config --includedir`
        postgresql_libs="-L`pg_config --libdir` -lpq"
    else
        amarok_warning_postgresql_notfound=yes
        enable_postgresql=no
    fi

    AC_DEFINE(USE_POSTGRESQL, 1, [Postgresql database support enabled])
fi

AM_CONDITIONAL(enable_postgresql, test x$enable_postgresql = xyes)
AC_SUBST(postgresql_includes)
AC_SUBST(postgresql_libs)

###############################################################################
# END POSTGRESQL CHECK
###############################################################################



###############################################################################
# BEGIN XMMS CHECK
###############################################################################

AC_ARG_WITH(xmms,
    AC_HELP_STRING([--without-xmms],[build amaroK without xmms visualization support]),
    [with_xmms=$withval],
    [with_xmms=yes]
)

if test "$with_xmms" = "yes"; then
    AC_CHECK_PROG(XMMS_CONFIG, xmms-config, yes)

    if test x$XMMS_CONFIG = xyes; then
        xmms_plugin_path=`xmms-config --visualization-plugin-dir`
        xmms_cflags=`xmms-config --cflags`
        xmms_libs=`xmms-config --libs`
    fi

    AC_DEFINE_UNQUOTED(XMMS_PLUGIN_PATH, "$xmms_plugin_path", [Define the path to XMMS plugins])
    AC_SUBST(xmms_cflags)
    AC_SUBST(xmms_libs)

    ## XMMSwrapper depends on gtk/gdk headers
    AC_CHECK_PROG(GTK_CONFIG, gtk-config, yes)

    if test x$XMMS_CONFIG = xyes -a x$GTK_CONFIG = xyes; then
        gtk_cflags=`gtk-config --cflags`
        gtk_libs=`gtk-config --libs`
        build_xmmswrapper=yes
        AC_DEFINE(HAVE_XMMS, 1, [have XMMS])
    else
        build_xmmswrapper=no
    fi

    AC_SUBST(gtk_cflags)
    AC_SUBST(gtk_libs)
fi

AM_CONDITIONAL(with_xmmswrapper, test x$build_xmmswrapper = xyes )

###############################################################################
# END XMMS CHECK
###############################################################################



###############################################################################
# BEGIN LIBVISUAL CHECK
###############################################################################

AC_ARG_WITH(libvisual,
    AC_HELP_STRING([--without-libvisual],[build amaroK without libvisual support]),
    [with_libvisual=$withval],
    [with_libvisual=yes]
)

if test "$with_libvisual" = "yes"; then
    ## libvisual plugin depends on sdl
    AC_CHECK_PROG(SDL_CONFIG, sdl-config, yes)

    if test x$SDL_CONFIG = xyes; then
        sdl_cflags=`sdl-config --cflags`
        sdl_libs=`sdl-config --libs`
    fi

    AC_SUBST(sdl_cflags)
    AC_SUBST(sdl_libs)

    if test x$PKGCONFIGFOUND = xyes -a x$SDL_CONFIG = xyes; then

        PKG_CHECK_MODULES(LIBVISUAL, libvisual >= 0.2.0, [build_libvisual="yes"], [build_libvisual="no"])

        AC_SUBST(LIBVISUAL_LIBS)
        AC_SUBST(LIBVISUAL_CFLAGS)

        if test x$build_libvisual = xyes; then
            AC_DEFINE(HAVE_LIBVISUAL, 1, [have LIBVISUAL])
        fi
    fi
fi

AM_CONDITIONAL(with_libvisual, test x$build_libvisual = xyes)

###############################################################################
# END LIBVISUAL CHECK
###############################################################################



###############################################################################
# BEGIN TUNEPIMP CHECK
###############################################################################

AC_ARG_WITH(musicbrainz,
    AC_HELP_STRING([--without-musicbrainz],[build amaroK without MusicBrainz support]),
    [with_musicbrainz=$withval],
    [with_musicbrainz=yes]
)

if test "$with_musicbrainz" = "yes"; then
    KDE_CHECK_HEADER(tunepimp/tp_c.h, [build_musicbrainz="yes"], [build_musicbrainz="no"])
fi

if test "$build_musicbrainz" = "yes"; then
    AC_CHECK_LIB(tunepimp, tp_SetFileNameEncoding,
      AC_DEFINE(HAVE_TUNEPIMP, 4, [have MusicBrainz 0.4.x]),
      AC_DEFINE(HAVE_TUNEPIMP, 1, [have MusicBrainz]))
    LIB_TUNEPIMP="-ltunepimp"
    have_tunepimp=yes
else
    AC_DEFINE(HAVE_TUNEPIMP, 0, [have TunePimp])
    LIB_TUNEPIMP=""
    have_tunepimp=no
fi

AC_SUBST(LIB_TUNEPIMP)

###############################################################################
# END TUNEPIMP CHECK
###############################################################################



###############################################################################
# BEGIN AMAZON CHECK
###############################################################################

AC_ARG_ENABLE(amazon,
    AC_HELP_STRING([--disable-amazon],[disable Amazon cover download support [default=enable]]),
    [enable_amazon=$enableval],
    [enable_amazon=yes]
)

if test "$enable_amazon" != "no"; then
    AC_DEFINE(AMAZON_SUPPORT, 1, [Amazon cover download support enabled])
fi

###############################################################################
# END AMAZON CHECK
###############################################################################



###############################################################################
# BEGIN SCHED_SETAFFINITY BUGGY GLIBC CHECK
###############################################################################

AC_MSG_CHECKING([if sched_setaffinity should be enabled])

AC_LANG_SAVE
AC_LANG_CPLUSPLUS

amarok_glibcsched_works=no

AC_TRY_COMPILE([
    #include <sched.h>
],
[
    cpu_set_t mask;
    CPU_ZERO( &mask );
    CPU_SET( 0, &mask );
    sched_setaffinity( 0, sizeof(mask), &mask );
],
    amarok_sched_3params=yes,
    amarok_sched_3params=no
)

if test "x$amarok_sched_3params" = "xyes"; then
    AC_DEFINE(SCHEDAFFINITY_SUPPORT, 1, [sched_setaffinity works correctly])
    AC_DEFINE(SCHEDAFFINITY_3PARAMS, 1, [sched_setaffinity takes three params])
    amarok_glibcsched_works=yes
fi

if test "x$amarok_sched_3params" = "xno"; then
    AC_TRY_COMPILE([
    #include <sched.h>
    ],
    [
        cpu_set_t mask;
        CPU_ZERO( &mask );
        CPU_SET( 0, &mask );
        sched_setaffinity( 0, &mask );
    ],
        amarok_sched_2params=yes,
        amarok_sched_2params=no
    )
    if test "x$amarok_sched_2params" = "xyes"; then
        AC_DEFINE(SCHEDAFFINITY_SUPPORT, 1, [sched_setaffinity works correctly])
        amarok_glibcsched_works=yes
    fi
fi

AC_LANG_RESTORE

AC_MSG_RESULT($amarok_glibcsched_works)

###############################################################################
# END SCHED_SETAFFINITY BUGGY GLIBC CHECK
###############################################################################



###############################################################################
# BEGIN KDEBASE CHECK
###############################################################################

KDE_CHECK_HEADER(konqsidebarplugin.h, have_konqsidebar=yes, have_konqsidebar=no)

AM_CONDITIONAL(with_konqsidebar, [test x$have_konqsidebar = xyes])

###############################################################################
# END KDEBASE CHECK
###############################################################################



###############################################################################
# BEGIN DO_NOT_COMPILE CHECK
###############################################################################

if test x$have_kdemm != xyes -a x$have_gst != xyes -a x$build_nmm != xyes -a x$build_xine != xyes -a x$have_akode != xyes; then

    DO_NOT_COMPILE="$DO_NOT_COMPILE amarok"
    no_engine=yes

fi

###############################################################################
# END DO_NOT_COMPILE CHECK
###############################################################################
