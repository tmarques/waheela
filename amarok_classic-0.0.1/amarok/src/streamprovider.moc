/****************************************************************************
** amaroK::StreamProvider meta object code from reading C++ file 'streamprovider.h'
**
** Created: Tue Feb 19 16:01:10 2008
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.8   edited Feb 2 14:59 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "streamprovider.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.8. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *amaroK::StreamProvider::className() const
{
    return "amaroK::StreamProvider";
}

QMetaObject *amaroK::StreamProvider::metaObj = 0;
static QMetaObjectCleanUp cleanUp_amaroK__StreamProvider( "amaroK::StreamProvider", &amaroK::StreamProvider::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString amaroK::StreamProvider::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "amaroK::StreamProvider", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString amaroK::StreamProvider::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "amaroK::StreamProvider", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* amaroK::StreamProvider::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QObject::staticMetaObject();
    static const QUParameter param_slot_0[] = {
	{ "socket", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_0 = {"accept", 1, param_slot_0 };
    static const QUParameter param_slot_1[] = {
	{ "result", &static_QUType_ptr, "KResolverResults", QUParameter::In }
    };
    static const QUMethod slot_1 = {"resolved", 1, param_slot_1 };
    static const QUMethod slot_2 = {"connectToHost", 0, 0 };
    static const QUMethod slot_3 = {"sendRequest", 0, 0 };
    static const QUMethod slot_4 = {"readRemote", 0, 0 };
    static const QUMethod slot_5 = {"connectError", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "accept(int)", &slot_0, QMetaData::Private },
	{ "resolved(KResolverResults)", &slot_1, QMetaData::Private },
	{ "connectToHost()", &slot_2, QMetaData::Private },
	{ "sendRequest()", &slot_3, QMetaData::Private },
	{ "readRemote()", &slot_4, QMetaData::Private },
	{ "connectError()", &slot_5, QMetaData::Private }
    };
    static const QUParameter param_signal_0[] = {
	{ 0, &static_QUType_ptr, "MetaBundle", QUParameter::In }
    };
    static const QUMethod signal_0 = {"metaData", 1, param_signal_0 };
    static const QUParameter param_signal_1[] = {
	{ 0, &static_QUType_charstar, 0, QUParameter::In },
	{ "size", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod signal_1 = {"streamData", 2, param_signal_1 };
    static const QUMethod signal_2 = {"sigError", 0, 0 };
    static const QMetaData signal_tbl[] = {
	{ "metaData(const MetaBundle&)", &signal_0, QMetaData::Public },
	{ "streamData(char*,int)", &signal_1, QMetaData::Public },
	{ "sigError()", &signal_2, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"amaroK::StreamProvider", parentObject,
	slot_tbl, 6,
	signal_tbl, 3,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_amaroK__StreamProvider.setMetaObject( metaObj );
    return metaObj;
}

void* amaroK::StreamProvider::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "amaroK::StreamProvider" ) )
	return this;
    return QObject::qt_cast( clname );
}

#include <qobjectdefs.h>
#include <qsignalslotimp.h>

// SIGNAL metaData
void amaroK::StreamProvider::metaData( const MetaBundle& t0 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 0 );
    if ( !clist )
	return;
    QUObject o[2];
    static_QUType_ptr.set(o+1,&t0);
    activate_signal( clist, o );
}

// SIGNAL streamData
void amaroK::StreamProvider::streamData( char* t0, int t1 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 1 );
    if ( !clist )
	return;
    QUObject o[3];
    static_QUType_charstar.set(o+1,t0);
    static_QUType_int.set(o+2,t1);
    activate_signal( clist, o );
}

// SIGNAL sigError
void amaroK::StreamProvider::sigError()
{
    activate_signal( staticMetaObject()->signalOffset() + 2 );
}

bool amaroK::StreamProvider::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: accept((int)static_QUType_int.get(_o+1)); break;
    case 1: resolved((KResolverResults)(*((KResolverResults*)static_QUType_ptr.get(_o+1)))); break;
    case 2: connectToHost(); break;
    case 3: sendRequest(); break;
    case 4: readRemote(); break;
    case 5: connectError(); break;
    default:
	return QObject::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool amaroK::StreamProvider::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: metaData((const MetaBundle&)*((const MetaBundle*)static_QUType_ptr.get(_o+1))); break;
    case 1: streamData((char*)static_QUType_charstar.get(_o+1),(int)static_QUType_int.get(_o+2)); break;
    case 2: sigError(); break;
    default:
	return QObject::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool amaroK::StreamProvider::qt_property( int id, int f, QVariant* v)
{
    return QObject::qt_property( id, f, v);
}

bool amaroK::StreamProvider::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *amaroK::StreamProxy::className() const
{
    return "amaroK::StreamProxy";
}

QMetaObject *amaroK::StreamProxy::metaObj = 0;
static QMetaObjectCleanUp cleanUp_amaroK__StreamProxy( "amaroK::StreamProxy", &amaroK::StreamProxy::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString amaroK::StreamProxy::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "amaroK::StreamProxy", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString amaroK::StreamProxy::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "amaroK::StreamProxy", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* amaroK::StreamProxy::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QServerSocket::staticMetaObject();
    static const QUParameter param_signal_0[] = {
	{ "socket", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod signal_0 = {"connected", 1, param_signal_0 };
    static const QMetaData signal_tbl[] = {
	{ "connected(int)", &signal_0, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"amaroK::StreamProxy", parentObject,
	0, 0,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_amaroK__StreamProxy.setMetaObject( metaObj );
    return metaObj;
}

void* amaroK::StreamProxy::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "amaroK::StreamProxy" ) )
	return this;
    return QServerSocket::qt_cast( clname );
}

// SIGNAL connected
void amaroK::StreamProxy::connected( int t0 )
{
    activate_signal( staticMetaObject()->signalOffset() + 0, t0 );
}

bool amaroK::StreamProxy::qt_invoke( int _id, QUObject* _o )
{
    return QServerSocket::qt_invoke(_id,_o);
}

bool amaroK::StreamProxy::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: connected((int)static_QUType_int.get(_o+1)); break;
    default:
	return QServerSocket::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool amaroK::StreamProxy::qt_property( int id, int f, QVariant* v)
{
    return QServerSocket::qt_property( id, f, v);
}

bool amaroK::StreamProxy::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
