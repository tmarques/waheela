/****************************************************************************
** App meta object code from reading C++ file 'app.h'
**
** Created: Tue Feb 19 15:57:51 2008
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.8   edited Feb 2 14:59 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "app.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.8. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *App::className() const
{
    return "App";
}

QMetaObject *App::metaObj = 0;
static QMetaObjectCleanUp cleanUp_App( "App", &App::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString App::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "App", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString App::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "App", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* App::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = KApplication::staticMetaObject();
    static const QUMethod slot_0 = {"showHyperThreadingWarning", 0, 0 };
    static const QUMethod slot_1 = {"applySettings", 0, 0 };
    static const QUParameter param_slot_2[] = {
	{ "firstTime", &static_QUType_bool, 0, QUParameter::In }
    };
    static const QUMethod slot_2 = {"applySettings", 1, param_slot_2 };
    static const QUMethod slot_3 = {"slotConfigAmarok", 0, 0 };
    static const QUParameter param_slot_4[] = {
	{ "page", &static_QUType_varptr, "\x14", QUParameter::In }
    };
    static const QUMethod slot_4 = {"slotConfigAmarok", 1, param_slot_4 };
    static const QUMethod slot_5 = {"slotConfigShortcuts", 0, 0 };
    static const QUMethod slot_6 = {"slotConfigGlobalShortcuts", 0, 0 };
    static const QUMethod slot_7 = {"slotConfigToolBars", 0, 0 };
    static const QUMethod slot_8 = {"slotConfigEqualizer", 0, 0 };
    static const QUMethod slot_9 = {"firstRunWizard", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "showHyperThreadingWarning()", &slot_0, QMetaData::Private },
	{ "applySettings()", &slot_1, QMetaData::Public },
	{ "applySettings(bool)", &slot_2, QMetaData::Public },
	{ "slotConfigAmarok()", &slot_3, QMetaData::Public },
	{ "slotConfigAmarok(const QCString&)", &slot_4, QMetaData::Public },
	{ "slotConfigShortcuts()", &slot_5, QMetaData::Public },
	{ "slotConfigGlobalShortcuts()", &slot_6, QMetaData::Public },
	{ "slotConfigToolBars()", &slot_7, QMetaData::Public },
	{ "slotConfigEqualizer()", &slot_8, QMetaData::Public },
	{ "firstRunWizard()", &slot_9, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"App", parentObject,
	slot_tbl, 10,
	0, 0,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_App.setMetaObject( metaObj );
    return metaObj;
}

void* App::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "App" ) )
	return this;
    if ( !qstrcmp( clname, "EngineObserver" ) )
	return (EngineObserver*)this;
    return KApplication::qt_cast( clname );
}

bool App::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: showHyperThreadingWarning(); break;
    case 1: applySettings(); break;
    case 2: applySettings((bool)static_QUType_bool.get(_o+1)); break;
    case 3: slotConfigAmarok(); break;
    case 4: slotConfigAmarok((const QCString&)*((const QCString*)static_QUType_ptr.get(_o+1))); break;
    case 5: slotConfigShortcuts(); break;
    case 6: slotConfigGlobalShortcuts(); break;
    case 7: slotConfigToolBars(); break;
    case 8: slotConfigEqualizer(); break;
    case 9: firstRunWizard(); break;
    default:
	return KApplication::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool App::qt_emit( int _id, QUObject* _o )
{
    return KApplication::qt_emit(_id,_o);
}
#ifndef QT_NO_PROPERTIES

bool App::qt_property( int id, int f, QVariant* v)
{
    return KApplication::qt_property( id, f, v);
}

bool App::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
