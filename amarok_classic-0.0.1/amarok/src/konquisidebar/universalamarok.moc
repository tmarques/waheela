/****************************************************************************
** amarokWidget meta object code from reading C++ file 'universalamarok.h'
**
** Created: Tue Feb 19 15:57:15 2008
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.8   edited Feb 2 14:59 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "universalamarok.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.8. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *amarokWidget::className() const
{
    return "amarokWidget";
}

QMetaObject *amarokWidget::metaObj = 0;
static QMetaObjectCleanUp cleanUp_amarokWidget( "amarokWidget", &amarokWidget::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString amarokWidget::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "amarokWidget", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString amarokWidget::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "amarokWidget", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* amarokWidget::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QVBox::staticMetaObject();
    static const QUParameter param_signal_0[] = {
	{ 0, &static_QUType_ptr, "KURL", QUParameter::In }
    };
    static const QUMethod signal_0 = {"emitURL", 1, param_signal_0 };
    static const QMetaData signal_tbl[] = {
	{ "emitURL(const KURL&)", &signal_0, QMetaData::Protected }
    };
    metaObj = QMetaObject::new_metaobject(
	"amarokWidget", parentObject,
	0, 0,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_amarokWidget.setMetaObject( metaObj );
    return metaObj;
}

void* amarokWidget::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "amarokWidget" ) )
	return this;
    return QVBox::qt_cast( clname );
}

#include <qobjectdefs.h>
#include <qsignalslotimp.h>

// SIGNAL emitURL
void amarokWidget::emitURL( const KURL& t0 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 0 );
    if ( !clist )
	return;
    QUObject o[2];
    static_QUType_ptr.set(o+1,&t0);
    activate_signal( clist, o );
}

bool amarokWidget::qt_invoke( int _id, QUObject* _o )
{
    return QVBox::qt_invoke(_id,_o);
}

bool amarokWidget::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: emitURL((const KURL&)*((const KURL*)static_QUType_ptr.get(_o+1))); break;
    default:
	return QVBox::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool amarokWidget::qt_property( int id, int f, QVariant* v)
{
    return QVBox::qt_property( id, f, v);
}

bool amarokWidget::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *UniversalAmarok::className() const
{
    return "UniversalAmarok";
}

QMetaObject *UniversalAmarok::metaObj = 0;
static QMetaObjectCleanUp cleanUp_UniversalAmarok( "UniversalAmarok", &UniversalAmarok::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString UniversalAmarok::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "UniversalAmarok", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString UniversalAmarok::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "UniversalAmarok", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* UniversalAmarok::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = KonqSidebarPlugin::staticMetaObject();
    static const QUParameter param_slot_0[] = {
	{ 0, &static_QUType_QString, 0, QUParameter::In }
    };
    static const QUMethod slot_0 = {"updateBrowser", 1, param_slot_0 };
    static const QUMethod slot_1 = {"updateStatus", 0, 0 };
    static const QUMethod slot_2 = {"sendPrev", 0, 0 };
    static const QUMethod slot_3 = {"sendPlay", 0, 0 };
    static const QUMethod slot_4 = {"sendPause", 0, 0 };
    static const QUMethod slot_5 = {"sendStop", 0, 0 };
    static const QUMethod slot_6 = {"sendNext", 0, 0 };
    static const QUMethod slot_7 = {"sendMute", 0, 0 };
    static const QUParameter param_slot_8[] = {
	{ "vol", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_8 = {"volChanged", 1, param_slot_8 };
    static const QUParameter param_slot_9[] = {
	{ 0, &static_QUType_ptr, "KURL", QUParameter::In }
    };
    static const QUMethod slot_9 = {"openURLRequest", 1, param_slot_9 };
    static const QUMethod slot_10 = {"checkForAmarok", 0, 0 };
    static const QUMethod slot_11 = {"lyrics", 0, 0 };
    static const QUMethod slot_12 = {"currentTrack", 0, 0 };
    static const QUMethod slot_13 = {"wiki", 0, 0 };
    static const QUMethod slot_14 = {"cbHome", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "updateBrowser(const QString&)", &slot_0, QMetaData::Public },
	{ "updateStatus()", &slot_1, QMetaData::Public },
	{ "sendPrev()", &slot_2, QMetaData::Public },
	{ "sendPlay()", &slot_3, QMetaData::Public },
	{ "sendPause()", &slot_4, QMetaData::Public },
	{ "sendStop()", &slot_5, QMetaData::Public },
	{ "sendNext()", &slot_6, QMetaData::Public },
	{ "sendMute()", &slot_7, QMetaData::Public },
	{ "volChanged(int)", &slot_8, QMetaData::Public },
	{ "openURLRequest(const KURL&)", &slot_9, QMetaData::Public },
	{ "checkForAmarok()", &slot_10, QMetaData::Public },
	{ "lyrics()", &slot_11, QMetaData::Public },
	{ "currentTrack()", &slot_12, QMetaData::Public },
	{ "wiki()", &slot_13, QMetaData::Public },
	{ "cbHome()", &slot_14, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"UniversalAmarok", parentObject,
	slot_tbl, 15,
	0, 0,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_UniversalAmarok.setMetaObject( metaObj );
    return metaObj;
}

void* UniversalAmarok::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "UniversalAmarok" ) )
	return this;
    return KonqSidebarPlugin::qt_cast( clname );
}

bool UniversalAmarok::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: updateBrowser((const QString&)static_QUType_QString.get(_o+1)); break;
    case 1: updateStatus(); break;
    case 2: sendPrev(); break;
    case 3: sendPlay(); break;
    case 4: sendPause(); break;
    case 5: sendStop(); break;
    case 6: sendNext(); break;
    case 7: sendMute(); break;
    case 8: volChanged((int)static_QUType_int.get(_o+1)); break;
    case 9: openURLRequest((const KURL&)*((const KURL*)static_QUType_ptr.get(_o+1))); break;
    case 10: checkForAmarok(); break;
    case 11: lyrics(); break;
    case 12: currentTrack(); break;
    case 13: wiki(); break;
    case 14: cbHome(); break;
    default:
	return KonqSidebarPlugin::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool UniversalAmarok::qt_emit( int _id, QUObject* _o )
{
    return KonqSidebarPlugin::qt_emit(_id,_o);
}
#ifndef QT_NO_PROPERTIES

bool UniversalAmarok::qt_property( int id, int f, QVariant* v)
{
    return KonqSidebarPlugin::qt_property( id, f, v);
}

bool UniversalAmarok::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
