// This file is generated by kconfig_compiler from amarok.kcfg.
// All changes you do to this file will be lost.

#include "amarokconfig.h"

#include <kstaticdeleter.h>

AmarokConfig *AmarokConfig::mSelf = 0;
static KStaticDeleter<AmarokConfig> staticAmarokConfigDeleter;

AmarokConfig *AmarokConfig::self()
{
  if ( !mSelf ) {
    staticAmarokConfigDeleter.setObject( mSelf, new AmarokConfig() );
    mSelf->readConfig();
  }

  return mSelf;
}

AmarokConfig::AmarokConfig(  )
  : KConfigSkeleton( QString::fromLatin1( "amarokrc" ) )
{
  mSelf = this;
  setCurrentGroup( QString::fromLatin1( "General Options" ) );

  KConfigSkeleton::ItemString  *itemVersion;
  itemVersion = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "Version" ), mVersion );
  addItem( itemVersion, QString::fromLatin1( "Version" ) );
  KConfigSkeleton::ItemPoint  *itemPlayerPos;
  itemPlayerPos = new KConfigSkeleton::ItemPoint( currentGroup(), QString::fromLatin1( "Player Pos" ), mPlayerPos );
  addItem( itemPlayerPos, QString::fromLatin1( "PlayerPos" ) );
  KConfigSkeleton::ItemPoint  *itemPlaylistWindowPos;
  itemPlaylistWindowPos = new KConfigSkeleton::ItemPoint( currentGroup(), QString::fromLatin1( "Playlist Window Pos" ), mPlaylistWindowPos );
  addItem( itemPlaylistWindowPos, QString::fromLatin1( "PlaylistWindowPos" ) );
  KConfigSkeleton::ItemSize  *itemPlaylistWindowSize;
  itemPlaylistWindowSize = new KConfigSkeleton::ItemSize( currentGroup(), QString::fromLatin1( "Playlist Window Size" ), mPlaylistWindowSize );
  addItem( itemPlaylistWindowSize, QString::fromLatin1( "PlaylistWindowSize" ) );
  KConfigSkeleton::ItemBool  *itemSavePlaylist;
  itemSavePlaylist = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Save Playlist" ), mSavePlaylist, true );
  addItem( itemSavePlaylist, QString::fromLatin1( "SavePlaylist" ) );
  KConfigSkeleton::ItemBool  *itemFollowSymlinks;
  itemFollowSymlinks = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Follow Symlinks" ), mFollowSymlinks, true );
  addItem( itemFollowSymlinks, QString::fromLatin1( "FollowSymlinks" ) );
  KConfigSkeleton::ItemBool  *itemTimeDisplayRemaining;
  itemTimeDisplayRemaining = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Time Display Remaining" ), mTimeDisplayRemaining, false );
  addItem( itemTimeDisplayRemaining, QString::fromLatin1( "TimeDisplayRemaining" ) );
  KConfigSkeleton::ItemBool  *itemRepeatTrack;
  itemRepeatTrack = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Repeat Track" ), mRepeatTrack, false );
  addItem( itemRepeatTrack, QString::fromLatin1( "RepeatTrack" ) );
  KConfigSkeleton::ItemBool  *itemRepeatPlaylist;
  itemRepeatPlaylist = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Repeat Playlist" ), mRepeatPlaylist, false );
  addItem( itemRepeatPlaylist, QString::fromLatin1( "RepeatPlaylist" ) );
  KConfigSkeleton::ItemBool  *itemRandomMode;
  itemRandomMode = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Random Mode" ), mRandomMode, false );
  addItem( itemRandomMode, QString::fromLatin1( "RandomMode" ) );
  KConfigSkeleton::ItemBool  *itemDynamicMode;
  itemDynamicMode = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Dynamic Mode" ), mDynamicMode, false );
  addItem( itemDynamicMode, QString::fromLatin1( "DynamicMode" ) );
  KConfigSkeleton::ItemBool  *itemDynamicInfo;
  itemDynamicInfo = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Dynamic Info" ), mDynamicInfo, true );
  addItem( itemDynamicInfo, QString::fromLatin1( "DynamicInfo" ) );
  KConfigSkeleton::ItemString  *itemDynamicType;
  itemDynamicType = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "Dynamic Type" ), mDynamicType, QString::fromLatin1( "Random" ) );
  addItem( itemDynamicType, QString::fromLatin1( "DynamicType" ) );
  KConfigSkeleton::ItemStringList  *itemDynamicCustomList;
  itemDynamicCustomList = new KConfigSkeleton::ItemStringList( currentGroup(), QString::fromLatin1( "Dynamic Custom List" ), mDynamicCustomList );
  addItem( itemDynamicCustomList, QString::fromLatin1( "DynamicCustomList" ) );
  KConfigSkeleton::ItemInt  *itemDynamicUpcomingCount;
  itemDynamicUpcomingCount = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Dynamic Upcoming Count" ), mDynamicUpcomingCount, 15 );
  addItem( itemDynamicUpcomingCount, QString::fromLatin1( "DynamicUpcomingCount" ) );
  KConfigSkeleton::ItemInt  *itemDynamicPreviousCount;
  itemDynamicPreviousCount = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Dynamic Previous Count" ), mDynamicPreviousCount, 4 );
  addItem( itemDynamicPreviousCount, QString::fromLatin1( "DynamicPreviousCount" ) );
  KConfigSkeleton::ItemInt  *itemDynamicAppendCount;
  itemDynamicAppendCount = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Dynamic Append Count" ), mDynamicAppendCount, 1 );
  addItem( itemDynamicAppendCount, QString::fromLatin1( "DynamicAppendCount" ) );
  KConfigSkeleton::ItemBool  *itemDynamicCycleTracks;
  itemDynamicCycleTracks = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Dynamic Cycle Tracks" ), mDynamicCycleTracks, true );
  addItem( itemDynamicCycleTracks, QString::fromLatin1( "DynamicCycleTracks" ) );
  KConfigSkeleton::ItemBool  *itemDynamicMarkHistory;
  itemDynamicMarkHistory = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Dynamic Mark History" ), mDynamicMarkHistory, false );
  addItem( itemDynamicMarkHistory, QString::fromLatin1( "DynamicMarkHistory" ) );
  KConfigSkeleton::ItemBool  *itemShowTrayIcon;
  itemShowTrayIcon = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Show Tray Icon" ), mShowTrayIcon, true );
  addItem( itemShowTrayIcon, QString::fromLatin1( "ShowTrayIcon" ) );
  KConfigSkeleton::ItemBool  *itemAnimateTrayIcon;
  itemAnimateTrayIcon = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Animate Tray Icon" ), mAnimateTrayIcon, false );
  addItem( itemAnimateTrayIcon, QString::fromLatin1( "AnimateTrayIcon" ) );
  KConfigSkeleton::ItemBool  *itemShowPlayerWindow;
  itemShowPlayerWindow = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Show Player Window" ), mShowPlayerWindow, false );
  addItem( itemShowPlayerWindow, QString::fromLatin1( "ShowPlayerWindow" ) );
  KConfigSkeleton::ItemBool  *itemShowToolbar;
  itemShowToolbar = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Show Toolbar" ), mShowToolbar, true );
  addItem( itemShowToolbar, QString::fromLatin1( "ShowToolbar" ) );
  KConfigSkeleton::ItemInt  *itemCoverPreviewSize;
  itemCoverPreviewSize = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Cover Preview Size" ), mCoverPreviewSize, 100 );
  addItem( itemCoverPreviewSize, QString::fromLatin1( "CoverPreviewSize" ) );
  KConfigSkeleton::ItemBool  *itemShowStatusBar;
  itemShowStatusBar = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Show Status Bar" ), mShowStatusBar, true );
  addItem( itemShowStatusBar, QString::fromLatin1( "ShowStatusBar" ) );
  KConfigSkeleton::ItemBool  *itemDirectoriesRecursively;
  itemDirectoriesRecursively = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Directories Recursively" ), mDirectoriesRecursively, true );
  addItem( itemDirectoriesRecursively, QString::fromLatin1( "DirectoriesRecursively" ) );
  KConfigSkeleton::ItemInt  *itemTrackDelayLength;
  itemTrackDelayLength = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Track Delay Length" ), mTrackDelayLength, 0 );
  addItem( itemTrackDelayLength, QString::fromLatin1( "TrackDelayLength" ) );
  KConfigSkeleton::ItemBool  *itemPlaylistWindowEnabled;
  itemPlaylistWindowEnabled = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Playlist Window Enabled" ), mPlaylistWindowEnabled, true );
  addItem( itemPlaylistWindowEnabled, QString::fromLatin1( "PlaylistWindowEnabled" ) );
  KConfigSkeleton::ItemInt  *itemUndoLevels;
  itemUndoLevels = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Undo Levels" ), mUndoLevels, 30 );
  addItem( itemUndoLevels, QString::fromLatin1( "UndoLevels" ) );
  KConfigSkeleton::ItemInt  *itemCurrentAnalyzer;
  itemCurrentAnalyzer = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Current Analyzer" ), mCurrentAnalyzer, -1 );
  addItem( itemCurrentAnalyzer, QString::fromLatin1( "CurrentAnalyzer" ) );
  KConfigSkeleton::ItemInt  *itemCurrentPlaylistAnalyzer;
  itemCurrentPlaylistAnalyzer = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Current Playlist Analyzer" ), mCurrentPlaylistAnalyzer, 0 );
  addItem( itemCurrentPlaylistAnalyzer, QString::fromLatin1( "CurrentPlaylistAnalyzer" ) );
  QValueList<int> defaultPlaylistWindowSplitter;
  defaultPlaylistWindowSplitter.append( 70 );
  defaultPlaylistWindowSplitter.append( 140 );

  KConfigSkeleton::ItemIntList  *itemPlaylistWindowSplitter;
  itemPlaylistWindowSplitter = new KConfigSkeleton::ItemIntList( currentGroup(), QString::fromLatin1( "Playlist Window Splitter" ), mPlaylistWindowSplitter, defaultPlaylistWindowSplitter );
  addItem( itemPlaylistWindowSplitter, QString::fromLatin1( "PlaylistWindowSplitter" ) );
  KConfigSkeleton::ItemBool  *itemPlaylistFollowActive;
  itemPlaylistFollowActive = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Playlist Follow Active" ), mPlaylistFollowActive, false );
  addItem( itemPlaylistFollowActive, QString::fromLatin1( "PlaylistFollowActive" ) );
  KConfigSkeleton::ItemBool  *itemShowSplashscreen;
  itemShowSplashscreen = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Show Splashscreen" ), mShowSplashscreen, true );
  addItem( itemShowSplashscreen, QString::fromLatin1( "ShowSplashscreen" ) );
  KConfigSkeleton::ItemBool  *itemAutoShowContextBrowser;
  itemAutoShowContextBrowser = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Auto Show ContextBrowser" ), mAutoShowContextBrowser, true );
  addItem( itemAutoShowContextBrowser, QString::fromLatin1( "AutoShowContextBrowser" ) );
  KConfigSkeleton::ItemBool  *itemShowStatByAlbums;
  itemShowStatByAlbums = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Show Stat By Albums" ), mShowStatByAlbums, false );
  addItem( itemShowStatByAlbums, QString::fromLatin1( "ShowStatByAlbums" ) );
  KConfigSkeleton::ItemString  *itemContextBrowserStyleSheet;
  itemContextBrowserStyleSheet = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "ContextBrowser StyleSheet" ), mContextBrowserStyleSheet, QString::fromLatin1( "Default" ) );
  addItem( itemContextBrowserStyleSheet, QString::fromLatin1( "ContextBrowserStyleSheet" ) );
  KConfigSkeleton::ItemBool  *itemShowMenuBar;
  itemShowMenuBar = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Show Menu Bar" ), mShowMenuBar, true );
  addItem( itemShowMenuBar, QString::fromLatin1( "ShowMenuBar" ) );
  KConfigSkeleton::ItemBool  *itemRelativePlaylist;
  itemRelativePlaylist = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Relative Playlist" ), mRelativePlaylist, false );
  addItem( itemRelativePlaylist, QString::fromLatin1( "RelativePlaylist" ) );

  setCurrentGroup( QString::fromLatin1( "Playback" ) );

  KConfigSkeleton::ItemInt  *itemMasterVolume;
  itemMasterVolume = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Master Volume" ), mMasterVolume, 80 );
  itemMasterVolume->setMinValue(0);
  itemMasterVolume->setMaxValue(100);
  addItem( itemMasterVolume, QString::fromLatin1( "MasterVolume" ) );
  KConfigSkeleton::ItemBool  *itemCrossfade;
  itemCrossfade = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Crossfade" ), mCrossfade, false );
  addItem( itemCrossfade, QString::fromLatin1( "Crossfade" ) );
  KConfigSkeleton::ItemInt  *itemCrossfadeLength;
  itemCrossfadeLength = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Crossfade Length" ), mCrossfadeLength, 3000 );
  itemCrossfadeLength->setMinValue(1500);
  addItem( itemCrossfadeLength, QString::fromLatin1( "CrossfadeLength" ) );
  KConfigSkeleton::ItemString  *itemSoundSystem;
  itemSoundSystem = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "Sound System" ), mSoundSystem );
  addItem( itemSoundSystem, QString::fromLatin1( "SoundSystem" ) );
  KConfigSkeleton::ItemBool  *itemEqualizerEnabled;
  itemEqualizerEnabled = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Equalizer Enabled" ), mEqualizerEnabled, false );
  addItem( itemEqualizerEnabled, QString::fromLatin1( "EqualizerEnabled" ) );
  KConfigSkeleton::ItemInt  *itemEqualizerPreamp;
  itemEqualizerPreamp = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Equalizer Preamp" ), mEqualizerPreamp, 0 );
  itemEqualizerPreamp->setMinValue(-100);
  itemEqualizerPreamp->setMaxValue(100);
  addItem( itemEqualizerPreamp, QString::fromLatin1( "EqualizerPreamp" ) );
  QValueList<int> defaultEqualizerGains;
  defaultEqualizerGains.append( 0 );
  defaultEqualizerGains.append(  0 );
  defaultEqualizerGains.append(  0 );
  defaultEqualizerGains.append(  0 );
  defaultEqualizerGains.append(  0 );
  defaultEqualizerGains.append(  0 );
  defaultEqualizerGains.append(  0 );
  defaultEqualizerGains.append(  0 );
  defaultEqualizerGains.append(  0 );
  defaultEqualizerGains.append(  0 );

  KConfigSkeleton::ItemIntList  *itemEqualizerGains;
  itemEqualizerGains = new KConfigSkeleton::ItemIntList( currentGroup(), QString::fromLatin1( "Equalizer Gains" ), mEqualizerGains, defaultEqualizerGains );
  addItem( itemEqualizerGains, QString::fromLatin1( "EqualizerGains" ) );
  KConfigSkeleton::ItemString  *itemEqualizerPreset;
  itemEqualizerPreset = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "Equalizer Preset" ), mEqualizerPreset, QString::fromLatin1( "Zero" ) );
  addItem( itemEqualizerPreset, QString::fromLatin1( "EqualizerPreset" ) );

  setCurrentGroup( QString::fromLatin1( "Cover Manager" ) );

  KConfigSkeleton::ItemString  *itemAmazonLocale;
  itemAmazonLocale = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "Amazon Locale" ), mAmazonLocale, QString::fromLatin1( "us" ) );
  addItem( itemAmazonLocale, QString::fromLatin1( "AmazonLocale" ) );

  setCurrentGroup( QString::fromLatin1( "Wikipedia" ) );

  KConfigSkeleton::ItemString  *itemWikipediaLocale;
  itemWikipediaLocale = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "Wikipedia Locale" ), mWikipediaLocale, QString::fromLatin1( "en" ) );
  addItem( itemWikipediaLocale, QString::fromLatin1( "WikipediaLocale" ) );

  setCurrentGroup( QString::fromLatin1( "OSD" ) );

  KConfigSkeleton::ItemBool  *itemOsdEnabled;
  itemOsdEnabled = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Osd Enabled" ), mOsdEnabled, true );
  addItem( itemOsdEnabled, QString::fromLatin1( "OsdEnabled" ) );
  KConfigSkeleton::ItemBool  *itemOsdUsePlaylistColumns;
  itemOsdUsePlaylistColumns = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Osd Use Playlist Columns" ), mOsdUsePlaylistColumns, true );
  addItem( itemOsdUsePlaylistColumns, QString::fromLatin1( "OsdUsePlaylistColumns" ) );
  KConfigSkeleton::ItemString  *itemOsdText;
  itemOsdText = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "Osd Text" ), mOsdText, QString::fromLatin1( "%artist - %title {(%length)}\\n%album" ) );
  addItem( itemOsdText, QString::fromLatin1( "OsdText" ) );
  KConfigSkeleton::ItemFont  *itemOsdFont;
  itemOsdFont = new KConfigSkeleton::ItemFont( currentGroup(), QString::fromLatin1( "Osd Font" ), mOsdFont, QFont("Arial",20) );
  addItem( itemOsdFont, QString::fromLatin1( "OsdFont" ) );
  KConfigSkeleton::ItemBool  *itemOsdDrawShadow;
  itemOsdDrawShadow = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Osd Draw Shadow" ), mOsdDrawShadow, true );
  addItem( itemOsdDrawShadow, QString::fromLatin1( "OsdDrawShadow" ) );
  KConfigSkeleton::ItemBool  *itemOsdUseFakeTranslucency;
  itemOsdUseFakeTranslucency = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Osd Use Fake Translucency" ), mOsdUseFakeTranslucency, false );
  addItem( itemOsdUseFakeTranslucency, QString::fromLatin1( "OsdUseFakeTranslucency" ) );
  KConfigSkeleton::ItemBool  *itemOsdUseCustomColors;
  itemOsdUseCustomColors = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Osd Use Custom Colors" ), mOsdUseCustomColors, false );
  addItem( itemOsdUseCustomColors, QString::fromLatin1( "OsdUseCustomColors" ) );
  KConfigSkeleton::ItemColor  *itemOsdTextColor;
  itemOsdTextColor = new KConfigSkeleton::ItemColor( currentGroup(), QString::fromLatin1( "Osd Text Color" ), mOsdTextColor, QColor( "#ffff00" ) );
  addItem( itemOsdTextColor, QString::fromLatin1( "OsdTextColor" ) );
  KConfigSkeleton::ItemColor  *itemOsdBackgroundColor;
  itemOsdBackgroundColor = new KConfigSkeleton::ItemColor( currentGroup(), QString::fromLatin1( "Osd Background Color" ), mOsdBackgroundColor, QColor( "#1500a0" ) );
  addItem( itemOsdBackgroundColor, QString::fromLatin1( "OsdBackgroundColor" ) );
  KConfigSkeleton::ItemInt  *itemOsdDuration;
  itemOsdDuration = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Osd Duration" ), mOsdDuration, 5000 );
  itemOsdDuration->setMinValue(0);
  addItem( itemOsdDuration, QString::fromLatin1( "OsdDuration" ) );
  KConfigSkeleton::ItemInt  *itemOsdYOffset;
  itemOsdYOffset = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Osd Y Offset" ), mOsdYOffset, 50 );
  itemOsdYOffset->setMinValue(0);
  itemOsdYOffset->setMaxValue(10000);
  addItem( itemOsdYOffset, QString::fromLatin1( "OsdYOffset" ) );
  KConfigSkeleton::ItemInt  *itemOsdScreen;
  itemOsdScreen = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Osd Screen" ), mOsdScreen, 0 );
  addItem( itemOsdScreen, QString::fromLatin1( "OsdScreen" ) );
  KConfigSkeleton::ItemBool  *itemOsdCover;
  itemOsdCover = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Osd Cover" ), mOsdCover, true );
  addItem( itemOsdCover, QString::fromLatin1( "OsdCover" ) );
  QValueList<KConfigSkeleton::ItemEnum::Choice> valuesOsdAlignment;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "Left" );
    valuesOsdAlignment.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "Middle" );
    valuesOsdAlignment.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "Center" );
    valuesOsdAlignment.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "Right" );
    valuesOsdAlignment.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemOsdAlignment;
  itemOsdAlignment = new KConfigSkeleton::ItemEnum( currentGroup(), QString::fromLatin1( "Osd Alignment" ), mOsdAlignment, valuesOsdAlignment, EnumOsdAlignment::Left );
  addItem( itemOsdAlignment, QString::fromLatin1( "OsdAlignment" ) );

  setCurrentGroup( QString::fromLatin1( "Fonts" ) );

  KConfigSkeleton::ItemBool  *itemUseCustomFonts;
  itemUseCustomFonts = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Use Custom Fonts" ), mUseCustomFonts, false );
  addItem( itemUseCustomFonts, QString::fromLatin1( "UseCustomFonts" ) );
  KConfigSkeleton::ItemFont  *itemPlaylistWindowFont;
  itemPlaylistWindowFont = new KConfigSkeleton::ItemFont( currentGroup(), QString::fromLatin1( "Playlist Window Font" ), mPlaylistWindowFont );
  addItem( itemPlaylistWindowFont, QString::fromLatin1( "PlaylistWindowFont" ) );
  KConfigSkeleton::ItemFont  *itemPlayerWidgetFont;
  itemPlayerWidgetFont = new KConfigSkeleton::ItemFont( currentGroup(), QString::fromLatin1( "Player Widget Font" ), mPlayerWidgetFont );
  addItem( itemPlayerWidgetFont, QString::fromLatin1( "PlayerWidgetFont" ) );
  KConfigSkeleton::ItemFont  *itemContextBrowserFont;
  itemContextBrowserFont = new KConfigSkeleton::ItemFont( currentGroup(), QString::fromLatin1( "Context Browser Font" ), mContextBrowserFont );
  addItem( itemContextBrowserFont, QString::fromLatin1( "ContextBrowserFont" ) );
  KConfigSkeleton::ItemBool  *itemRecodeID3v1Tags;
  itemRecodeID3v1Tags = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Recode ID3v1 Tags" ), mRecodeID3v1Tags, false );
  addItem( itemRecodeID3v1Tags, QString::fromLatin1( "RecodeID3v1Tags" ) );
  KConfigSkeleton::ItemBool  *itemRecodeShoutcastMetadata;
  itemRecodeShoutcastMetadata = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Recode Shoutcast Metadata" ), mRecodeShoutcastMetadata, false );
  addItem( itemRecodeShoutcastMetadata, QString::fromLatin1( "RecodeShoutcastMetadata" ) );
  KConfigSkeleton::ItemInt  *itemRecodeEncoding;
  itemRecodeEncoding = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Recode Encoding" ), mRecodeEncoding, 0 );
  addItem( itemRecodeEncoding, QString::fromLatin1( "RecodeEncoding" ) );

  setCurrentGroup( QString::fromLatin1( "Colors" ) );

  KConfigSkeleton::ItemBool  *itemSchemeAmarok;
  itemSchemeAmarok = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Scheme Amarok" ), mSchemeAmarok, false );
  addItem( itemSchemeAmarok, QString::fromLatin1( "SchemeAmarok" ) );
  KConfigSkeleton::ItemBool  *itemSchemeKDE;
  itemSchemeKDE = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Scheme KDE" ), mSchemeKDE, true );
  addItem( itemSchemeKDE, QString::fromLatin1( "SchemeKDE" ) );
  KConfigSkeleton::ItemBool  *itemSchemeCustom;
  itemSchemeCustom = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Scheme Custom" ), mSchemeCustom, false );
  addItem( itemSchemeCustom, QString::fromLatin1( "SchemeCustom" ) );
  KConfigSkeleton::ItemColor  *itemPlaylistWindowFgColor;
  itemPlaylistWindowFgColor = new KConfigSkeleton::ItemColor( currentGroup(), QString::fromLatin1( "Playlist Window Fg Color" ), mPlaylistWindowFgColor, QColor( "#80a0ff" ) );
  addItem( itemPlaylistWindowFgColor, QString::fromLatin1( "PlaylistWindowFgColor" ) );
  KConfigSkeleton::ItemColor  *itemPlaylistWindowBgColor;
  itemPlaylistWindowBgColor = new KConfigSkeleton::ItemColor( currentGroup(), QString::fromLatin1( "Playlist Window Bg Color" ), mPlaylistWindowBgColor, QColor( "#000000" ) );
  addItem( itemPlaylistWindowBgColor, QString::fromLatin1( "PlaylistWindowBgColor" ) );

  setCurrentGroup( QString::fromLatin1( "Session" ) );

  KConfigSkeleton::ItemBool  *itemResumePlayback;
  itemResumePlayback = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Resume Playback" ), mResumePlayback, false );
  addItem( itemResumePlayback, QString::fromLatin1( "ResumePlayback" ) );
  KConfigSkeleton::ItemPath  *itemResumeTrack;
  itemResumeTrack = new KConfigSkeleton::ItemPath( currentGroup(), QString::fromLatin1( "Resume Track" ), mResumeTrack );
  addItem( itemResumeTrack, QString::fromLatin1( "ResumeTrack" ) );
  KConfigSkeleton::ItemInt  *itemResumeTime;
  itemResumeTime = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "Resume Time" ), mResumeTime );
  addItem( itemResumeTime, QString::fromLatin1( "ResumeTime" ) );

  setCurrentGroup( QString::fromLatin1( "Collection" ) );

  KConfigSkeleton::ItemString  *itemDatabaseEngine;
  itemDatabaseEngine = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "DatabaseEngine" ), mDatabaseEngine, QString::fromLatin1( "SQLite" ) );
  addItem( itemDatabaseEngine, QString::fromLatin1( "DatabaseEngine" ) );
  KConfigSkeleton::ItemBool  *itemScanRecursively;
  itemScanRecursively = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Scan Recursively" ), mScanRecursively, true );
  addItem( itemScanRecursively, QString::fromLatin1( "ScanRecursively" ) );
  KConfigSkeleton::ItemBool  *itemMonitorChanges;
  itemMonitorChanges = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Monitor Changes" ), mMonitorChanges, true );
  addItem( itemMonitorChanges, QString::fromLatin1( "MonitorChanges" ) );
  KConfigSkeleton::ItemBool  *itemImportPlaylists;
  itemImportPlaylists = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "Import Playlists" ), mImportPlaylists, true );
  addItem( itemImportPlaylists, QString::fromLatin1( "ImportPlaylists" ) );
  KConfigSkeleton::ItemStringList  *itemCollectionFolders;
  itemCollectionFolders = new KConfigSkeleton::ItemStringList( currentGroup(), QString::fromLatin1( "Collection Folders" ), mCollectionFolders );
  addItem( itemCollectionFolders, QString::fromLatin1( "CollectionFolders" ) );

  setCurrentGroup( QString::fromLatin1( "MySql" ) );

  KConfigSkeleton::ItemString  *itemMySqlHost;
  itemMySqlHost = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "MySqlHost" ), mMySqlHost, QString::fromLatin1( "localhost" ) );
  addItem( itemMySqlHost, QString::fromLatin1( "MySqlHost" ) );
  KConfigSkeleton::ItemInt  *itemMySqlPort;
  itemMySqlPort = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "MySqlPort" ), mMySqlPort, 3306 );
  addItem( itemMySqlPort, QString::fromLatin1( "MySqlPort" ) );
  KConfigSkeleton::ItemString  *itemMySqlDbName;
  itemMySqlDbName = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "MySqlDbName" ), mMySqlDbName, QString::fromLatin1( "amarok" ) );
  addItem( itemMySqlDbName, QString::fromLatin1( "MySqlDbName" ) );
  KConfigSkeleton::ItemString  *itemMySqlUser;
  itemMySqlUser = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "MySqlUser" ), mMySqlUser );
  addItem( itemMySqlUser, QString::fromLatin1( "MySqlUser" ) );
  KConfigSkeleton::ItemPassword  *itemMySqlPassword;
  itemMySqlPassword = new KConfigSkeleton::ItemPassword( currentGroup(), QString::fromLatin1( "MySqlPassword" ), mMySqlPassword );
  addItem( itemMySqlPassword, QString::fromLatin1( "MySqlPassword" ) );

  setCurrentGroup( QString::fromLatin1( "Postgresql" ) );

  KConfigSkeleton::ItemString  *itemPostgresqlConninfo;
  itemPostgresqlConninfo = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "PostgresqlConninfo" ), mPostgresqlConninfo, QString::fromLatin1( "host=amarok dbname=amarok user=amarok password=changeme" ) );
  addItem( itemPostgresqlConninfo, QString::fromLatin1( "PostgresqlConninfo" ) );

  setCurrentGroup( QString::fromLatin1( "Scrobbler" ) );

  KConfigSkeleton::ItemBool  *itemSubmitPlayedSongs;
  itemSubmitPlayedSongs = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "SubmitPlayedSongs" ), mSubmitPlayedSongs, false );
  addItem( itemSubmitPlayedSongs, QString::fromLatin1( "SubmitPlayedSongs" ) );
  KConfigSkeleton::ItemString  *itemScrobblerUsername;
  itemScrobblerUsername = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "ScrobblerUsername" ), mScrobblerUsername );
  addItem( itemScrobblerUsername, QString::fromLatin1( "ScrobblerUsername" ) );
  KConfigSkeleton::ItemString  *itemScrobblerPassword;
  itemScrobblerPassword = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "ScrobblerPassword" ), mScrobblerPassword );
  addItem( itemScrobblerPassword, QString::fromLatin1( "ScrobblerPassword" ) );
  KConfigSkeleton::ItemBool  *itemRetrieveSimilarArtists;
  itemRetrieveSimilarArtists = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "RetrieveSimilarArtists" ), mRetrieveSimilarArtists, false );
  addItem( itemRetrieveSimilarArtists, QString::fromLatin1( "RetrieveSimilarArtists" ) );

  setCurrentGroup( QString::fromLatin1( "MediaDevice" ) );

  KConfigSkeleton::ItemString  *itemMountCommand;
  itemMountCommand = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "MountCommand" ), mMountCommand );
  addItem( itemMountCommand, QString::fromLatin1( "MountCommand" ) );
  KConfigSkeleton::ItemString  *itemUmountCommand;
  itemUmountCommand = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "UmountCommand" ), mUmountCommand );
  addItem( itemUmountCommand, QString::fromLatin1( "UmountCommand" ) );
}

AmarokConfig::~AmarokConfig()
{
  if ( mSelf == this )
    staticAmarokConfigDeleter.setObject( mSelf, 0, false );
}

