/****************************************************************************
** PlaylistEntry meta object code from reading C++ file 'playlistbrowseritem.h'
**
** Created: Tue Feb 19 16:00:14 2008
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.8   edited Feb 2 14:59 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "playlistbrowseritem.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.8. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *PlaylistEntry::className() const
{
    return "PlaylistEntry";
}

QMetaObject *PlaylistEntry::metaObj = 0;
static QMetaObjectCleanUp cleanUp_PlaylistEntry( "PlaylistEntry", &PlaylistEntry::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString PlaylistEntry::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "PlaylistEntry", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString PlaylistEntry::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "PlaylistEntry", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* PlaylistEntry::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QObject::staticMetaObject();
    static const QUMethod signal_0 = {"startingLoading", 0, 0 };
    static const QUMethod signal_1 = {"loaded", 0, 0 };
    static const QMetaData signal_tbl[] = {
	{ "startingLoading()", &signal_0, QMetaData::Public },
	{ "loaded()", &signal_1, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"PlaylistEntry", parentObject,
	0, 0,
	signal_tbl, 2,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_PlaylistEntry.setMetaObject( metaObj );
    return metaObj;
}

void* PlaylistEntry::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "PlaylistEntry" ) )
	return this;
    if ( !qstrcmp( clname, "PlaylistBrowserEntry" ) )
	return (PlaylistBrowserEntry*)this;
    return QObject::qt_cast( clname );
}

// SIGNAL startingLoading
void PlaylistEntry::startingLoading()
{
    activate_signal( staticMetaObject()->signalOffset() + 0 );
}

// SIGNAL loaded
void PlaylistEntry::loaded()
{
    activate_signal( staticMetaObject()->signalOffset() + 1 );
}

bool PlaylistEntry::qt_invoke( int _id, QUObject* _o )
{
    return QObject::qt_invoke(_id,_o);
}

bool PlaylistEntry::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: startingLoading(); break;
    case 1: loaded(); break;
    default:
	return QObject::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool PlaylistEntry::qt_property( int id, int f, QVariant* v)
{
    return QObject::qt_property( id, f, v);
}

bool PlaylistEntry::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *PodcastItem::className() const
{
    return "PodcastItem";
}

QMetaObject *PodcastItem::metaObj = 0;
static QMetaObjectCleanUp cleanUp_PodcastItem( "PodcastItem", &PodcastItem::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString PodcastItem::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "PodcastItem", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString PodcastItem::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "PodcastItem", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* PodcastItem::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QObject::staticMetaObject();
    static const QUMethod slot_0 = {"abortDownload", 0, 0 };
    static const QUParameter param_slot_1[] = {
	{ "job", &static_QUType_ptr, "KIO::Job", QUParameter::In }
    };
    static const QUMethod slot_1 = {"downloadResult", 1, param_slot_1 };
    static const QUMethod slot_2 = {"slotAnimation", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "abortDownload()", &slot_0, QMetaData::Private },
	{ "downloadResult(KIO::Job*)", &slot_1, QMetaData::Private },
	{ "slotAnimation()", &slot_2, QMetaData::Private }
    };
    static const QUMethod signal_0 = {"downloadFinished", 0, 0 };
    static const QMetaData signal_tbl[] = {
	{ "downloadFinished()", &signal_0, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"PodcastItem", parentObject,
	slot_tbl, 3,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_PodcastItem.setMetaObject( metaObj );
    return metaObj;
}

void* PodcastItem::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "PodcastItem" ) )
	return this;
    if ( !qstrcmp( clname, "PlaylistBrowserEntry" ) )
	return (PlaylistBrowserEntry*)this;
    return QObject::qt_cast( clname );
}

// SIGNAL downloadFinished
void PodcastItem::downloadFinished()
{
    activate_signal( staticMetaObject()->signalOffset() + 0 );
}

bool PodcastItem::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: abortDownload(); break;
    case 1: downloadResult((KIO::Job*)static_QUType_ptr.get(_o+1)); break;
    case 2: slotAnimation(); break;
    default:
	return QObject::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool PodcastItem::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: downloadFinished(); break;
    default:
	return QObject::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool PodcastItem::qt_property( int id, int f, QVariant* v)
{
    return QObject::qt_property( id, f, v);
}

bool PodcastItem::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *PodcastChannel::className() const
{
    return "PodcastChannel";
}

QMetaObject *PodcastChannel::metaObj = 0;
static QMetaObjectCleanUp cleanUp_PodcastChannel( "PodcastChannel", &PodcastChannel::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString PodcastChannel::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "PodcastChannel", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString PodcastChannel::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "PodcastChannel", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* PodcastChannel::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QObject::staticMetaObject();
    static const QUMethod slot_0 = {"abortFetch", 0, 0 };
    static const QUMethod slot_1 = {"downloadChildQueue", 0, 0 };
    static const QUParameter param_slot_2[] = {
	{ "job", &static_QUType_ptr, "KIO::Job", QUParameter::In }
    };
    static const QUMethod slot_2 = {"fetchResult", 1, param_slot_2 };
    static const QUMethod slot_3 = {"slotAnimation", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "abortFetch()", &slot_0, QMetaData::Private },
	{ "downloadChildQueue()", &slot_1, QMetaData::Private },
	{ "fetchResult(KIO::Job*)", &slot_2, QMetaData::Private },
	{ "slotAnimation()", &slot_3, QMetaData::Private }
    };
    metaObj = QMetaObject::new_metaobject(
	"PodcastChannel", parentObject,
	slot_tbl, 4,
	0, 0,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_PodcastChannel.setMetaObject( metaObj );
    return metaObj;
}

void* PodcastChannel::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "PodcastChannel" ) )
	return this;
    if ( !qstrcmp( clname, "PlaylistBrowserEntry" ) )
	return (PlaylistBrowserEntry*)this;
    return QObject::qt_cast( clname );
}

bool PodcastChannel::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: abortFetch(); break;
    case 1: downloadChildQueue(); break;
    case 2: fetchResult((KIO::Job*)static_QUType_ptr.get(_o+1)); break;
    case 3: slotAnimation(); break;
    default:
	return QObject::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool PodcastChannel::qt_emit( int _id, QUObject* _o )
{
    return QObject::qt_emit(_id,_o);
}
#ifndef QT_NO_PROPERTIES

bool PodcastChannel::qt_property( int id, int f, QVariant* v)
{
    return QObject::qt_property( id, f, v);
}

bool PodcastChannel::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
