# Makefile.in generated by automake 1.7.9 from Makefile.am.
# KDE tags expanded automatically by am_edit - $Revision: 483858 $ 
# amarok/src/sqlite/Makefile.  Generated from Makefile.in by config.pl.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../../..
VPATH = .
pkgdatadir = $(datadir)/multimedia
pkglibdir = $(libdir)/multimedia
pkgincludedir = $(includedir)/multimedia
top_builddir = ../../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c -p
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/eversor/amarok-1.4.1/admin/missing --run aclocal-1.7
ALSALIB_CFLAGS = 
ALSALIB_LIBS = 
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/eversor/amarok-1.4.1/admin/missing --run tar
AR = ar
ARTSCCONFIG = /usr/kde/3.5/bin/artsc-config
AUTOCONF = $(SHELL) $(top_srcdir)/admin/cvs.sh configure || touch configure
AUTODIRS = 
AUTOHEADER = ${SHELL} /home/eversor/amarok-1.4.1/admin/missing --run autoheader
AUTOMAKE = ${SHELL} /home/eversor/amarok-1.4.1/admin/missing --run automake-1.7
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -std=iso9899:1990 -W -Wall -Wchar-subscripts -Wshadow -Wpointer-arith -Wmissing-prototypes -Wwrite-strings -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -O2   -Wformat-security -Wmissing-format-attribute
CFLAGS_NMM = 
CFLAGS_XINE = -I/usr/include
CONF_FILES =  $(top_srcdir)/./admin/configure.in.min $(top_srcdir)/configure.in.in $(top_srcdir)/./amarok/configure.in.bot $(top_srcdir)/./amarok/configure.in.in $(top_srcdir)/configure.in.bot
CPP = gcc -E
CPPFLAGS =  -DQT_THREAD_SUPPORT  -D_REENTRANT
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wno-long-long -Wundef -ansi -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -Wcast-align -Wconversion -Wchar-subscripts -Wall -W -Wpointer-arith -O2 -Wformat-security -Wmissing-format-attribute -Wno-non-virtual-dtor -fno-exceptions -fno-check-new -fno-common -DQT_CLEAN_NAMESPACE -DQT_NO_ASCII_CAST -DQT_NO_STL -DQT_NO_COMPAT -DQT_NO_TRANSLATION
CYGPATH_W = echo
DCOPIDL = /usr/kde/3.5/bin/dcopidl
DCOPIDL2CPP = /usr/kde/3.5/bin/dcopidl2cpp
DCOPIDLNG = /usr/kde/3.5/bin/dcopidlng
DCOP_DEPENDENCIES = $(DCOPIDL) $(DCOPIDLNG)
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DOXYGEN = 
DOXYGEN_PROJECT_NAME = The API Reference
DOXYGEN_PROJECT_NUMBER = Version 3.5.3
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
ENABLE_PERMISSIVE_FLAG = -fpermissive
EXEEXT = 
F77 = g77
FFLAGS = -g -O2
FRAMEWORK_COREAUDIO = 
GMSGFMT = /usr/bin/gmsgfmt
GTK_CONFIG = yes
HAVE_GCC_VISIBILITY = 0
IFP_INCLUDES = 
IFP_LIBS = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL} $(INSTALL_STRIP_FLAG)
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
KCFG_DEPENDENCIES = $(KCONFIG_COMPILER)
KCONFIG_COMPILER = /usr/kde/3.5/bin/kconfig_compiler
KDECONFIG = /usr/kde/3.5/bin/kde-config
KDE_CHECK_PLUGIN = $(KDE_PLUGIN) -rpath $(libdir)
KDE_EXTRA_RPATH = 
KDE_HAS_DOXYGEN = no
KDE_HAVE_DOT = NO
KDE_INCLUDES = -I/usr/kde/3.5/include
KDE_LDFLAGS = -L/usr/kde/3.5/lib
KDE_MT_LDFLAGS = 
KDE_MT_LIBS = -lpthread
KDE_NO_UNDEFINED = -Wl,--no-undefined -Wl,--allow-shlib-undefined
KDE_PLUGIN = -avoid-version -module -no-undefined $(KDE_NO_UNDEFINED) $(KDE_RPATH) $(KDE_MT_LDFLAGS)
KDE_RPATH = -R $(libdir) -R $(kde_libraries) -R $(qt_libraries) -R $(x_libraries)
KDE_USE_CLOSURE_FALSE = 
KDE_USE_CLOSURE_TRUE = #
KDE_USE_FINAL_FALSE = 
KDE_USE_FINAL_TRUE = #
KDE_USE_FPIE = -fPIE
KDE_USE_NMCHECK_FALSE = 
KDE_USE_NMCHECK_TRUE = #
KDE_USE_PIE = -pie
KDE_XSL_STYLESHEET = /usr/kde/3.5/share/apps/ksgmltools2/customization/kde-chunk.xsl
LDFLAGS = 
LDFLAGS_AS_NEEDED = 
LDFLAGS_NEW_DTAGS = 
LDFLAGS_NMM = 
LIBCOMPAT = 
LIBCRYPT = -lcrypt
LIBDL = -ldl
LIBGPOD_CFLAGS = 
LIBGPOD_LIBS = 
LIBJPEG = -ljpeg
LIBNJB_CFLAGS = 
LIBNJB_LIBS = 
LIBOBJS = 
LIBPNG = -lpng -lz -lm
LIBPTHREAD = -lpthread
LIBRESOLV = -lresolv
LIBS = 
LIBSM = -lSM -lICE
LIBSOCKET = 
LIBS_XINE = -L/usr/lib -lxine -lz -lnsl -lpthread -lrt
LIBTOOL = $(SHELL) $(top_builddir)/libtool --silent
LIBUCB = 
LIBUTIL = -lutil
LIBVISUAL_CFLAGS = 
LIBVISUAL_LIBS = 
LIBZ = -lz
LIB_ARTS = -lartskde
LIB_KAB = -lkab
LIB_KABC = -lkabc
LIB_KDECORE = -lkdecore
LIB_KDED = 
LIB_KDEPIM = -lkdepim
LIB_KDEPRINT = -lkdeprint
LIB_KDEUI = -lkdeui
LIB_KDNSSD = -lkdnssd
LIB_KFILE = -lkio
LIB_KFM = 
LIB_KHTML = -lkhtml
LIB_KIMPROXY = -lkimproxy
LIB_KIO = -lkio
LIB_KJS = -lkjs
LIB_KNEWSTUFF = -lknewstuff
LIB_KPARTS = -lkparts
LIB_KSPELL = -lkspell
LIB_KSYCOCA = -lkio
LIB_KUNITTEST = -lkunittest
LIB_KUTILS = -lkutils
LIB_POLL = 
LIB_QPE = 
LIB_QT = -lqt-mt  $(LIBZ) $(LIBPNG) -lXext $(LIB_X11) $(LIBSM) -lpthread
LIB_SMB = -lsmb
LIB_SQLITE = 
LIB_TUNEPIMP = 
LIB_X11 = -lX11 $(LIBSOCKET)
LIB_XEXT = -lXext
LIB_XRENDER = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/eversor/amarok-1.4.1/admin/missing --run makeinfo
MAKEKDEWIDGETS = /usr/kde/3.5/bin/makekdewidgets
MCOPIDL = /usr/kde/3.5/bin/mcopidl
MEINPROC = /usr/kde/3.5/bin/meinproc
MOC = /usr/qt/3/bin/moc
MP4V2_INCLUDES = 
MP4V2_LIBS = 
MSGFMT = /usr/bin/gmsgfmt
MYSQL_CONFIG = 
NOOPT_CFLAGS = -O0
NOOPT_CXXFLAGS = -O0
OBJEXT = o
PACKAGE = multimedia
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PKGCONFIGFOUND = yes
PKG_CONFIG = /usr/bin/pkg-config
POSTGRESQL_CONFIG = 
QTDOCDIR = NO
QTE_NORTTI = 
QT_INCLUDES = -I/usr/qt/3/include
QT_LDFLAGS = -L/usr/qt/3/lib
RANLIB = ranlib
RUBY = /usr/bin/ruby
SDL_CONFIG = yes
SET_MAKE = 
SHELL = /bin/sh
SQLITE_CFLAGS = 
SQLITE_LIBS = 
STRIP = strip
TAGLIB_CONFIG = /usr/bin/taglib-config
TOPSUBDIRS =  amarok doc po
UIC = /usr/qt/3/bin/uic -L $(kde_widgetdir) -nounload
UIC_TR = tr2i18n
USER_INCLUDES = 
USER_LDFLAGS = 
USE_EXCEPTIONS = -fexceptions
USE_RTTI = 
USE_THREADS = 
VERSION = 3.5.3
WOVERLOADED_VIRTUAL = 
XGETTEXT = /usr/bin/xgettext
XINE_CONFIG = yes
XMLLINT = /usr/bin/xmllint
XMMS_CONFIG = 
X_EXTRA_LIBS = 
X_INCLUDES = -I.
X_LDFLAGS = -L/usr/lib
X_PRE_LIBS = 
X_RPATH = -R $(x_libraries)
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = g77
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
all_includes = -I/usr/kde/3.5/include -I/usr/qt/3/include -I. 
all_libraries = -L/usr/kde/3.5/lib -L/usr/qt/3/lib -L/usr/lib   
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
amarok_SUBDIR_included_FALSE = #
amarok_SUBDIR_included_TRUE = 
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
doc_SUBDIR_included_FALSE = #
doc_SUBDIR_included_TRUE = 
enable_mysql_FALSE = 
enable_mysql_TRUE = #
enable_postgresql_FALSE = 
enable_postgresql_TRUE = #
exec_prefix = ${prefix}
gl_libs = -lGL
gtk_cflags = 
gtk_libs = 
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
include_ARTS_FALSE = #
include_ARTS_TRUE = 
include_x11_FALSE = #
include_x11_TRUE = 
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/eversor/amarok-1.4.1/admin/install-sh
kde_appsdir = ${datadir}/applnk
kde_bindir = ${exec_prefix}/bin
kde_confdir = ${datadir}/config
kde_datadir = ${datadir}/apps
kde_htmldir = ${datadir}/doc/HTML
kde_icondir = ${datadir}/icons
kde_includes = /usr/kde/3.5/include
kde_kcfgdir = ${datadir}/config.kcfg
kde_libraries = /usr/kde/3.5/lib
kde_libs_htmldir = /usr/kde/3.5/share/doc/HTML
kde_libs_prefix = /usr/kde/3.5
kde_locale = ${datadir}/locale
kde_mimedir = ${datadir}/mimelnk
kde_moduledir = ${libdir}/kde3
kde_qtver = 3
kde_servicesdir = ${datadir}/services
kde_servicetypesdir = ${datadir}/servicetypes
kde_sounddir = ${datadir}/sounds
kde_styledir = ${libdir}/kde3/plugins/styles
kde_templatesdir = ${datadir}/templates
kde_wallpaperdir = ${datadir}/wallpapers
kde_widgetdir = /usr/kde/3.5/lib/kde3/plugins/designer
kdeinitdir = $(kde_moduledir)
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mysql_includes = 
mysql_libs = 
oldincludedir = /usr/include
po_SUBDIR_included_FALSE = #
po_SUBDIR_included_TRUE = 
postgresql_includes = 
postgresql_libs = 
prefix = /usr/kde/3.5
program_transform_name = s,x,x,
qt_includes = /usr/qt/3/include
qt_libraries = /usr/qt/3/lib
sbindir = ${exec_prefix}/sbin
sdl_cflags = -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
sdl_libs = -lSDL -lpthread
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
taglib_includes = -I/usr/include/taglib
taglib_libs = -L/usr/lib -ltag
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
unsermake_enable_pch_FALSE = 
unsermake_enable_pch_TRUE = #
with_helix_FALSE = 
with_helix_TRUE = #
with_ifp_FALSE = 
with_ifp_TRUE = #
with_included_sqlite_FALSE = #
with_included_sqlite_TRUE = 
with_konqsidebar_FALSE = #
with_konqsidebar_TRUE = 
with_libgpod_FALSE = 
with_libgpod_TRUE = #
with_libnjb_FALSE = 
with_libnjb_TRUE = #
with_libvisual_FALSE = 
with_libvisual_TRUE = #
with_mp4v2_FALSE = 
with_mp4v2_TRUE = #
with_nmm_FALSE = 
with_nmm_TRUE = #
with_xine_FALSE = #
with_xine_TRUE = 
with_xmmswrapper_FALSE = 
with_xmmswrapper_TRUE = #
x_includes = .
x_libraries = /usr/lib
xdg_appsdir = ${datadir}/applications/kde
xdg_directorydir = ${datadir}/desktop-directories
xdg_menudir = ${sysconfdir}/xdg/menus
xmms_cflags = 
xmms_libs = 
noinst_LTLIBRARIES = \
    libsqlite.la


KDE_CFLAGS = \
    -w


libsqlite_la_CFLAGS = \
    $(all_includes) \
    -DTHREADSAFE=1 \
    -DHAVE_USLEEP=1 \
    -fno-strict-aliasing


libsqlite_la_LDFLAGS = \
    $(LIBPTHREAD)


libsqlite_la_SOURCES = \
    alter.c \
    analyze.c \
    attach.c \
    auth.c \
    btree.c \
    build.c \
    callback.c \
    complete.c \
    date.c \
    delete.c \
    expr.c \
    func.c \
    hash.c \
    insert.c \
    legacy.c \
    main.c \
    opcodes.c \
    os.c \
    os_os2.c \
    os_unix.c \
    os_win.c \
    pager.c \
    parse.c \
    pragma.c \
    prepare.c \
    printf.c \
    random.c \
    select.c \
    table.c \
    tokenize.c \
    trigger.c \
    update.c \
    utf.c \
    util.c \
    vacuum.c \
    vdbe.c \
    vdbeapi.c \
    vdbeaux.c \
    vdbefifo.c \
    vdbemem.c \
    where.c

subdir = amarok/src/sqlite
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)

libsqlite_la_LIBADD =
am_libsqlite_la_OBJECTS = libsqlite_la-alter.lo libsqlite_la-analyze.lo \
	libsqlite_la-attach.lo libsqlite_la-auth.lo \
	libsqlite_la-btree.lo libsqlite_la-build.lo \
	libsqlite_la-callback.lo libsqlite_la-complete.lo \
	libsqlite_la-date.lo libsqlite_la-delete.lo \
	libsqlite_la-expr.lo libsqlite_la-func.lo libsqlite_la-hash.lo \
	libsqlite_la-insert.lo libsqlite_la-legacy.lo \
	libsqlite_la-main.lo libsqlite_la-opcodes.lo libsqlite_la-os.lo \
	libsqlite_la-os_os2.lo libsqlite_la-os_unix.lo \
	libsqlite_la-os_win.lo libsqlite_la-pager.lo \
	libsqlite_la-parse.lo libsqlite_la-pragma.lo \
	libsqlite_la-prepare.lo libsqlite_la-printf.lo \
	libsqlite_la-random.lo libsqlite_la-select.lo \
	libsqlite_la-table.lo libsqlite_la-tokenize.lo \
	libsqlite_la-trigger.lo libsqlite_la-update.lo \
	libsqlite_la-utf.lo libsqlite_la-util.lo libsqlite_la-vacuum.lo \
	libsqlite_la-vdbe.lo libsqlite_la-vdbeapi.lo \
	libsqlite_la-vdbeaux.lo libsqlite_la-vdbefifo.lo \
	libsqlite_la-vdbemem.lo libsqlite_la-where.lo
#>- libsqlite_la_OBJECTS = $(am_libsqlite_la_OBJECTS)
#>+ 22
libsqlite_la_final_OBJECTS = alter.lo analyze.lo attach.lo auth.lo btree.lo build.lo callback.lo complete.lo date.lo delete.lo expr.lo func.lo hash.lo insert.lo legacy.lo main.lo opcodes.lo os.lo os_os2.lo os_unix.lo os_win.lo pager.lo parse.lo pragma.lo prepare.lo printf.lo random.lo select.lo table.lo tokenize.lo trigger.lo update.lo utf.lo util.lo vacuum.lo vdbe.lo vdbeapi.lo vdbeaux.lo vdbefifo.lo vdbemem.lo where.lo 
libsqlite_la_nofinal_OBJECTS = libsqlite_la-alter.lo libsqlite_la-analyze.lo \
	libsqlite_la-attach.lo libsqlite_la-auth.lo \
	libsqlite_la-btree.lo libsqlite_la-build.lo \
	libsqlite_la-callback.lo libsqlite_la-complete.lo \
	libsqlite_la-date.lo libsqlite_la-delete.lo \
	libsqlite_la-expr.lo libsqlite_la-func.lo libsqlite_la-hash.lo \
	libsqlite_la-insert.lo libsqlite_la-legacy.lo \
	libsqlite_la-main.lo libsqlite_la-opcodes.lo libsqlite_la-os.lo \
	libsqlite_la-os_os2.lo libsqlite_la-os_unix.lo \
	libsqlite_la-os_win.lo libsqlite_la-pager.lo \
	libsqlite_la-parse.lo libsqlite_la-pragma.lo \
	libsqlite_la-prepare.lo libsqlite_la-printf.lo \
	libsqlite_la-random.lo libsqlite_la-select.lo \
	libsqlite_la-table.lo libsqlite_la-tokenize.lo \
	libsqlite_la-trigger.lo libsqlite_la-update.lo \
	libsqlite_la-utf.lo libsqlite_la-util.lo libsqlite_la-vacuum.lo \
	libsqlite_la-vdbe.lo libsqlite_la-vdbeapi.lo \
	libsqlite_la-vdbeaux.lo libsqlite_la-vdbefifo.lo \
	libsqlite_la-vdbemem.lo libsqlite_la-where.lo
libsqlite_la_OBJECTS = $(libsqlite_la_nofinal_OBJECTS)
#libsqlite_la_OBJECTS = $(libsqlite_la_final_OBJECTS)

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/admin/depcomp
am__depfiles_maybe = depfiles
#>- DEP_FILES = ./$(DEPDIR)/libsqlite_la-alter.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-analyze.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-attach.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-auth.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-btree.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-build.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-callback.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-complete.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-date.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-delete.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-expr.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-func.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-hash.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-insert.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-legacy.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-main.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-opcodes.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-os.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-os_os2.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-os_unix.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-os_win.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-pager.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-parse.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-pragma.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-prepare.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-printf.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-random.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-select.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-table.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-tokenize.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-trigger.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-update.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-utf.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-util.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-vacuum.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-vdbe.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-vdbeapi.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-vdbeaux.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-vdbefifo.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-vdbemem.Plo \
#>- 	./$(DEPDIR)/libsqlite_la-where.Plo
#>+ 41
DEP_FILES =  ./$(DEPDIR)/libsqlite_la-alter.Plo \
		./$(DEPDIR)/libsqlite_la-analyze.Plo \
		./$(DEPDIR)/libsqlite_la-attach.Plo \
		./$(DEPDIR)/libsqlite_la-auth.Plo \
		./$(DEPDIR)/libsqlite_la-btree.Plo \
		./$(DEPDIR)/libsqlite_la-build.Plo \
		./$(DEPDIR)/libsqlite_la-callback.Plo \
		./$(DEPDIR)/libsqlite_la-complete.Plo \
		./$(DEPDIR)/libsqlite_la-date.Plo \
		./$(DEPDIR)/libsqlite_la-delete.Plo \
		./$(DEPDIR)/libsqlite_la-expr.Plo \
		./$(DEPDIR)/libsqlite_la-func.Plo \
		./$(DEPDIR)/libsqlite_la-hash.Plo \
		./$(DEPDIR)/libsqlite_la-insert.Plo \
		./$(DEPDIR)/libsqlite_la-legacy.Plo \
		./$(DEPDIR)/libsqlite_la-main.Plo \
		./$(DEPDIR)/libsqlite_la-opcodes.Plo \
		./$(DEPDIR)/libsqlite_la-os.Plo \
		./$(DEPDIR)/libsqlite_la-os_os2.Plo \
		./$(DEPDIR)/libsqlite_la-os_unix.Plo \
		./$(DEPDIR)/libsqlite_la-os_win.Plo \
		./$(DEPDIR)/libsqlite_la-pager.Plo \
		./$(DEPDIR)/libsqlite_la-parse.Plo \
		./$(DEPDIR)/libsqlite_la-pragma.Plo \
		./$(DEPDIR)/libsqlite_la-prepare.Plo \
		./$(DEPDIR)/libsqlite_la-printf.Plo \
		./$(DEPDIR)/libsqlite_la-random.Plo \
		./$(DEPDIR)/libsqlite_la-select.Plo \
		./$(DEPDIR)/libsqlite_la-table.Plo \
		./$(DEPDIR)/libsqlite_la-tokenize.Plo \
		./$(DEPDIR)/libsqlite_la-trigger.Plo \
		./$(DEPDIR)/libsqlite_la-update.Plo \
		./$(DEPDIR)/libsqlite_la-utf.Plo \
		./$(DEPDIR)/libsqlite_la-util.Plo \
		./$(DEPDIR)/libsqlite_la-vacuum.Plo \
		./$(DEPDIR)/libsqlite_la-vdbe.Plo \
		./$(DEPDIR)/libsqlite_la-vdbeapi.Plo \
		./$(DEPDIR)/libsqlite_la-vdbeaux.Plo \
		./$(DEPDIR)/libsqlite_la-vdbefifo.Plo \
		./$(DEPDIR)/libsqlite_la-vdbemem.Plo \
		./$(DEPDIR)/libsqlite_la-where.Plo
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(libsqlite_la_SOURCES)
DIST_COMMON = $(srcdir)/Makefile.in Makefile.am
SOURCES = $(libsqlite_la_SOURCES)

#>- all: all-am
#>+ 1
all: docs-am  all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
#>- 	cd $(top_srcdir) && \
#>- 	  $(AUTOMAKE) --gnu  amarok/src/sqlite/Makefile
#>+ 3
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  amarok/src/sqlite/Makefile
	cd $(top_srcdir) && perl admin/am_edit amarok/src/sqlite/Makefile.in
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" = "$$p" && dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libsqlite.la: $(libsqlite_la_OBJECTS) $(libsqlite_la_DEPENDENCIES) 
	$(LINK)  $(libsqlite_la_LDFLAGS) $(libsqlite_la_OBJECTS) $(libsqlite_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libsqlite_la-alter.Plo
include ./$(DEPDIR)/libsqlite_la-analyze.Plo
include ./$(DEPDIR)/libsqlite_la-attach.Plo
include ./$(DEPDIR)/libsqlite_la-auth.Plo
include ./$(DEPDIR)/libsqlite_la-btree.Plo
include ./$(DEPDIR)/libsqlite_la-build.Plo
include ./$(DEPDIR)/libsqlite_la-callback.Plo
include ./$(DEPDIR)/libsqlite_la-complete.Plo
include ./$(DEPDIR)/libsqlite_la-date.Plo
include ./$(DEPDIR)/libsqlite_la-delete.Plo
include ./$(DEPDIR)/libsqlite_la-expr.Plo
include ./$(DEPDIR)/libsqlite_la-func.Plo
include ./$(DEPDIR)/libsqlite_la-hash.Plo
include ./$(DEPDIR)/libsqlite_la-insert.Plo
include ./$(DEPDIR)/libsqlite_la-legacy.Plo
include ./$(DEPDIR)/libsqlite_la-main.Plo
include ./$(DEPDIR)/libsqlite_la-opcodes.Plo
include ./$(DEPDIR)/libsqlite_la-os.Plo
include ./$(DEPDIR)/libsqlite_la-os_os2.Plo
include ./$(DEPDIR)/libsqlite_la-os_unix.Plo
include ./$(DEPDIR)/libsqlite_la-os_win.Plo
include ./$(DEPDIR)/libsqlite_la-pager.Plo
include ./$(DEPDIR)/libsqlite_la-parse.Plo
include ./$(DEPDIR)/libsqlite_la-pragma.Plo
include ./$(DEPDIR)/libsqlite_la-prepare.Plo
include ./$(DEPDIR)/libsqlite_la-printf.Plo
include ./$(DEPDIR)/libsqlite_la-random.Plo
include ./$(DEPDIR)/libsqlite_la-select.Plo
include ./$(DEPDIR)/libsqlite_la-table.Plo
include ./$(DEPDIR)/libsqlite_la-tokenize.Plo
include ./$(DEPDIR)/libsqlite_la-trigger.Plo
include ./$(DEPDIR)/libsqlite_la-update.Plo
include ./$(DEPDIR)/libsqlite_la-utf.Plo
include ./$(DEPDIR)/libsqlite_la-util.Plo
include ./$(DEPDIR)/libsqlite_la-vacuum.Plo
include ./$(DEPDIR)/libsqlite_la-vdbe.Plo
include ./$(DEPDIR)/libsqlite_la-vdbeapi.Plo
include ./$(DEPDIR)/libsqlite_la-vdbeaux.Plo
include ./$(DEPDIR)/libsqlite_la-vdbefifo.Plo
include ./$(DEPDIR)/libsqlite_la-vdbemem.Plo
include ./$(DEPDIR)/libsqlite_la-where.Plo

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

.c.lo:
	if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=yes \
#	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

libsqlite_la-alter.o: alter.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-alter.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-alter.Tpo" \
	  -c -o libsqlite_la-alter.o `test -f 'alter.c' || echo '$(srcdir)/'`alter.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-alter.Tpo" "$(DEPDIR)/libsqlite_la-alter.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-alter.Tpo"; exit 1; \
	fi
#	source='alter.c' object='libsqlite_la-alter.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-alter.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-alter.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-alter.o `test -f 'alter.c' || echo '$(srcdir)/'`alter.c

libsqlite_la-alter.obj: alter.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-alter.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-alter.Tpo" \
	  -c -o libsqlite_la-alter.obj `if test -f 'alter.c'; then $(CYGPATH_W) 'alter.c'; else $(CYGPATH_W) '$(srcdir)/alter.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-alter.Tpo" "$(DEPDIR)/libsqlite_la-alter.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-alter.Tpo"; exit 1; \
	fi
#	source='alter.c' object='libsqlite_la-alter.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-alter.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-alter.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-alter.obj `if test -f 'alter.c'; then $(CYGPATH_W) 'alter.c'; else $(CYGPATH_W) '$(srcdir)/alter.c'; fi`

libsqlite_la-alter.lo: alter.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-alter.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-alter.Tpo" \
	  -c -o libsqlite_la-alter.lo `test -f 'alter.c' || echo '$(srcdir)/'`alter.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-alter.Tpo" "$(DEPDIR)/libsqlite_la-alter.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-alter.Tpo"; exit 1; \
	fi
#	source='alter.c' object='libsqlite_la-alter.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-alter.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-alter.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-alter.lo `test -f 'alter.c' || echo '$(srcdir)/'`alter.c

libsqlite_la-analyze.o: analyze.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-analyze.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-analyze.Tpo" \
	  -c -o libsqlite_la-analyze.o `test -f 'analyze.c' || echo '$(srcdir)/'`analyze.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-analyze.Tpo" "$(DEPDIR)/libsqlite_la-analyze.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-analyze.Tpo"; exit 1; \
	fi
#	source='analyze.c' object='libsqlite_la-analyze.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-analyze.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-analyze.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-analyze.o `test -f 'analyze.c' || echo '$(srcdir)/'`analyze.c

libsqlite_la-analyze.obj: analyze.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-analyze.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-analyze.Tpo" \
	  -c -o libsqlite_la-analyze.obj `if test -f 'analyze.c'; then $(CYGPATH_W) 'analyze.c'; else $(CYGPATH_W) '$(srcdir)/analyze.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-analyze.Tpo" "$(DEPDIR)/libsqlite_la-analyze.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-analyze.Tpo"; exit 1; \
	fi
#	source='analyze.c' object='libsqlite_la-analyze.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-analyze.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-analyze.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-analyze.obj `if test -f 'analyze.c'; then $(CYGPATH_W) 'analyze.c'; else $(CYGPATH_W) '$(srcdir)/analyze.c'; fi`

libsqlite_la-analyze.lo: analyze.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-analyze.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-analyze.Tpo" \
	  -c -o libsqlite_la-analyze.lo `test -f 'analyze.c' || echo '$(srcdir)/'`analyze.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-analyze.Tpo" "$(DEPDIR)/libsqlite_la-analyze.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-analyze.Tpo"; exit 1; \
	fi
#	source='analyze.c' object='libsqlite_la-analyze.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-analyze.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-analyze.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-analyze.lo `test -f 'analyze.c' || echo '$(srcdir)/'`analyze.c

libsqlite_la-attach.o: attach.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-attach.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-attach.Tpo" \
	  -c -o libsqlite_la-attach.o `test -f 'attach.c' || echo '$(srcdir)/'`attach.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-attach.Tpo" "$(DEPDIR)/libsqlite_la-attach.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-attach.Tpo"; exit 1; \
	fi
#	source='attach.c' object='libsqlite_la-attach.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-attach.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-attach.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-attach.o `test -f 'attach.c' || echo '$(srcdir)/'`attach.c

libsqlite_la-attach.obj: attach.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-attach.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-attach.Tpo" \
	  -c -o libsqlite_la-attach.obj `if test -f 'attach.c'; then $(CYGPATH_W) 'attach.c'; else $(CYGPATH_W) '$(srcdir)/attach.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-attach.Tpo" "$(DEPDIR)/libsqlite_la-attach.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-attach.Tpo"; exit 1; \
	fi
#	source='attach.c' object='libsqlite_la-attach.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-attach.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-attach.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-attach.obj `if test -f 'attach.c'; then $(CYGPATH_W) 'attach.c'; else $(CYGPATH_W) '$(srcdir)/attach.c'; fi`

libsqlite_la-attach.lo: attach.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-attach.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-attach.Tpo" \
	  -c -o libsqlite_la-attach.lo `test -f 'attach.c' || echo '$(srcdir)/'`attach.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-attach.Tpo" "$(DEPDIR)/libsqlite_la-attach.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-attach.Tpo"; exit 1; \
	fi
#	source='attach.c' object='libsqlite_la-attach.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-attach.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-attach.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-attach.lo `test -f 'attach.c' || echo '$(srcdir)/'`attach.c

libsqlite_la-auth.o: auth.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-auth.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-auth.Tpo" \
	  -c -o libsqlite_la-auth.o `test -f 'auth.c' || echo '$(srcdir)/'`auth.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-auth.Tpo" "$(DEPDIR)/libsqlite_la-auth.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-auth.Tpo"; exit 1; \
	fi
#	source='auth.c' object='libsqlite_la-auth.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-auth.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-auth.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-auth.o `test -f 'auth.c' || echo '$(srcdir)/'`auth.c

libsqlite_la-auth.obj: auth.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-auth.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-auth.Tpo" \
	  -c -o libsqlite_la-auth.obj `if test -f 'auth.c'; then $(CYGPATH_W) 'auth.c'; else $(CYGPATH_W) '$(srcdir)/auth.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-auth.Tpo" "$(DEPDIR)/libsqlite_la-auth.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-auth.Tpo"; exit 1; \
	fi
#	source='auth.c' object='libsqlite_la-auth.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-auth.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-auth.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-auth.obj `if test -f 'auth.c'; then $(CYGPATH_W) 'auth.c'; else $(CYGPATH_W) '$(srcdir)/auth.c'; fi`

libsqlite_la-auth.lo: auth.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-auth.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-auth.Tpo" \
	  -c -o libsqlite_la-auth.lo `test -f 'auth.c' || echo '$(srcdir)/'`auth.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-auth.Tpo" "$(DEPDIR)/libsqlite_la-auth.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-auth.Tpo"; exit 1; \
	fi
#	source='auth.c' object='libsqlite_la-auth.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-auth.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-auth.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-auth.lo `test -f 'auth.c' || echo '$(srcdir)/'`auth.c

libsqlite_la-btree.o: btree.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-btree.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-btree.Tpo" \
	  -c -o libsqlite_la-btree.o `test -f 'btree.c' || echo '$(srcdir)/'`btree.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-btree.Tpo" "$(DEPDIR)/libsqlite_la-btree.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-btree.Tpo"; exit 1; \
	fi
#	source='btree.c' object='libsqlite_la-btree.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-btree.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-btree.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-btree.o `test -f 'btree.c' || echo '$(srcdir)/'`btree.c

libsqlite_la-btree.obj: btree.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-btree.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-btree.Tpo" \
	  -c -o libsqlite_la-btree.obj `if test -f 'btree.c'; then $(CYGPATH_W) 'btree.c'; else $(CYGPATH_W) '$(srcdir)/btree.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-btree.Tpo" "$(DEPDIR)/libsqlite_la-btree.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-btree.Tpo"; exit 1; \
	fi
#	source='btree.c' object='libsqlite_la-btree.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-btree.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-btree.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-btree.obj `if test -f 'btree.c'; then $(CYGPATH_W) 'btree.c'; else $(CYGPATH_W) '$(srcdir)/btree.c'; fi`

libsqlite_la-btree.lo: btree.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-btree.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-btree.Tpo" \
	  -c -o libsqlite_la-btree.lo `test -f 'btree.c' || echo '$(srcdir)/'`btree.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-btree.Tpo" "$(DEPDIR)/libsqlite_la-btree.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-btree.Tpo"; exit 1; \
	fi
#	source='btree.c' object='libsqlite_la-btree.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-btree.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-btree.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-btree.lo `test -f 'btree.c' || echo '$(srcdir)/'`btree.c

libsqlite_la-build.o: build.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-build.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-build.Tpo" \
	  -c -o libsqlite_la-build.o `test -f 'build.c' || echo '$(srcdir)/'`build.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-build.Tpo" "$(DEPDIR)/libsqlite_la-build.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-build.Tpo"; exit 1; \
	fi
#	source='build.c' object='libsqlite_la-build.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-build.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-build.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-build.o `test -f 'build.c' || echo '$(srcdir)/'`build.c

libsqlite_la-build.obj: build.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-build.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-build.Tpo" \
	  -c -o libsqlite_la-build.obj `if test -f 'build.c'; then $(CYGPATH_W) 'build.c'; else $(CYGPATH_W) '$(srcdir)/build.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-build.Tpo" "$(DEPDIR)/libsqlite_la-build.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-build.Tpo"; exit 1; \
	fi
#	source='build.c' object='libsqlite_la-build.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-build.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-build.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-build.obj `if test -f 'build.c'; then $(CYGPATH_W) 'build.c'; else $(CYGPATH_W) '$(srcdir)/build.c'; fi`

libsqlite_la-build.lo: build.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-build.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-build.Tpo" \
	  -c -o libsqlite_la-build.lo `test -f 'build.c' || echo '$(srcdir)/'`build.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-build.Tpo" "$(DEPDIR)/libsqlite_la-build.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-build.Tpo"; exit 1; \
	fi
#	source='build.c' object='libsqlite_la-build.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-build.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-build.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-build.lo `test -f 'build.c' || echo '$(srcdir)/'`build.c

libsqlite_la-callback.o: callback.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-callback.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-callback.Tpo" \
	  -c -o libsqlite_la-callback.o `test -f 'callback.c' || echo '$(srcdir)/'`callback.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-callback.Tpo" "$(DEPDIR)/libsqlite_la-callback.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-callback.Tpo"; exit 1; \
	fi
#	source='callback.c' object='libsqlite_la-callback.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-callback.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-callback.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-callback.o `test -f 'callback.c' || echo '$(srcdir)/'`callback.c

libsqlite_la-callback.obj: callback.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-callback.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-callback.Tpo" \
	  -c -o libsqlite_la-callback.obj `if test -f 'callback.c'; then $(CYGPATH_W) 'callback.c'; else $(CYGPATH_W) '$(srcdir)/callback.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-callback.Tpo" "$(DEPDIR)/libsqlite_la-callback.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-callback.Tpo"; exit 1; \
	fi
#	source='callback.c' object='libsqlite_la-callback.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-callback.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-callback.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-callback.obj `if test -f 'callback.c'; then $(CYGPATH_W) 'callback.c'; else $(CYGPATH_W) '$(srcdir)/callback.c'; fi`

libsqlite_la-callback.lo: callback.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-callback.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-callback.Tpo" \
	  -c -o libsqlite_la-callback.lo `test -f 'callback.c' || echo '$(srcdir)/'`callback.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-callback.Tpo" "$(DEPDIR)/libsqlite_la-callback.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-callback.Tpo"; exit 1; \
	fi
#	source='callback.c' object='libsqlite_la-callback.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-callback.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-callback.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-callback.lo `test -f 'callback.c' || echo '$(srcdir)/'`callback.c

libsqlite_la-complete.o: complete.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-complete.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-complete.Tpo" \
	  -c -o libsqlite_la-complete.o `test -f 'complete.c' || echo '$(srcdir)/'`complete.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-complete.Tpo" "$(DEPDIR)/libsqlite_la-complete.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-complete.Tpo"; exit 1; \
	fi
#	source='complete.c' object='libsqlite_la-complete.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-complete.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-complete.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-complete.o `test -f 'complete.c' || echo '$(srcdir)/'`complete.c

libsqlite_la-complete.obj: complete.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-complete.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-complete.Tpo" \
	  -c -o libsqlite_la-complete.obj `if test -f 'complete.c'; then $(CYGPATH_W) 'complete.c'; else $(CYGPATH_W) '$(srcdir)/complete.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-complete.Tpo" "$(DEPDIR)/libsqlite_la-complete.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-complete.Tpo"; exit 1; \
	fi
#	source='complete.c' object='libsqlite_la-complete.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-complete.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-complete.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-complete.obj `if test -f 'complete.c'; then $(CYGPATH_W) 'complete.c'; else $(CYGPATH_W) '$(srcdir)/complete.c'; fi`

libsqlite_la-complete.lo: complete.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-complete.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-complete.Tpo" \
	  -c -o libsqlite_la-complete.lo `test -f 'complete.c' || echo '$(srcdir)/'`complete.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-complete.Tpo" "$(DEPDIR)/libsqlite_la-complete.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-complete.Tpo"; exit 1; \
	fi
#	source='complete.c' object='libsqlite_la-complete.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-complete.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-complete.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-complete.lo `test -f 'complete.c' || echo '$(srcdir)/'`complete.c

libsqlite_la-date.o: date.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-date.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-date.Tpo" \
	  -c -o libsqlite_la-date.o `test -f 'date.c' || echo '$(srcdir)/'`date.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-date.Tpo" "$(DEPDIR)/libsqlite_la-date.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-date.Tpo"; exit 1; \
	fi
#	source='date.c' object='libsqlite_la-date.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-date.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-date.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-date.o `test -f 'date.c' || echo '$(srcdir)/'`date.c

libsqlite_la-date.obj: date.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-date.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-date.Tpo" \
	  -c -o libsqlite_la-date.obj `if test -f 'date.c'; then $(CYGPATH_W) 'date.c'; else $(CYGPATH_W) '$(srcdir)/date.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-date.Tpo" "$(DEPDIR)/libsqlite_la-date.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-date.Tpo"; exit 1; \
	fi
#	source='date.c' object='libsqlite_la-date.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-date.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-date.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-date.obj `if test -f 'date.c'; then $(CYGPATH_W) 'date.c'; else $(CYGPATH_W) '$(srcdir)/date.c'; fi`

libsqlite_la-date.lo: date.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-date.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-date.Tpo" \
	  -c -o libsqlite_la-date.lo `test -f 'date.c' || echo '$(srcdir)/'`date.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-date.Tpo" "$(DEPDIR)/libsqlite_la-date.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-date.Tpo"; exit 1; \
	fi
#	source='date.c' object='libsqlite_la-date.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-date.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-date.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-date.lo `test -f 'date.c' || echo '$(srcdir)/'`date.c

libsqlite_la-delete.o: delete.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-delete.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-delete.Tpo" \
	  -c -o libsqlite_la-delete.o `test -f 'delete.c' || echo '$(srcdir)/'`delete.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-delete.Tpo" "$(DEPDIR)/libsqlite_la-delete.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-delete.Tpo"; exit 1; \
	fi
#	source='delete.c' object='libsqlite_la-delete.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-delete.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-delete.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-delete.o `test -f 'delete.c' || echo '$(srcdir)/'`delete.c

libsqlite_la-delete.obj: delete.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-delete.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-delete.Tpo" \
	  -c -o libsqlite_la-delete.obj `if test -f 'delete.c'; then $(CYGPATH_W) 'delete.c'; else $(CYGPATH_W) '$(srcdir)/delete.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-delete.Tpo" "$(DEPDIR)/libsqlite_la-delete.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-delete.Tpo"; exit 1; \
	fi
#	source='delete.c' object='libsqlite_la-delete.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-delete.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-delete.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-delete.obj `if test -f 'delete.c'; then $(CYGPATH_W) 'delete.c'; else $(CYGPATH_W) '$(srcdir)/delete.c'; fi`

libsqlite_la-delete.lo: delete.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-delete.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-delete.Tpo" \
	  -c -o libsqlite_la-delete.lo `test -f 'delete.c' || echo '$(srcdir)/'`delete.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-delete.Tpo" "$(DEPDIR)/libsqlite_la-delete.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-delete.Tpo"; exit 1; \
	fi
#	source='delete.c' object='libsqlite_la-delete.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-delete.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-delete.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-delete.lo `test -f 'delete.c' || echo '$(srcdir)/'`delete.c

libsqlite_la-expr.o: expr.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-expr.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-expr.Tpo" \
	  -c -o libsqlite_la-expr.o `test -f 'expr.c' || echo '$(srcdir)/'`expr.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-expr.Tpo" "$(DEPDIR)/libsqlite_la-expr.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-expr.Tpo"; exit 1; \
	fi
#	source='expr.c' object='libsqlite_la-expr.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-expr.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-expr.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-expr.o `test -f 'expr.c' || echo '$(srcdir)/'`expr.c

libsqlite_la-expr.obj: expr.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-expr.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-expr.Tpo" \
	  -c -o libsqlite_la-expr.obj `if test -f 'expr.c'; then $(CYGPATH_W) 'expr.c'; else $(CYGPATH_W) '$(srcdir)/expr.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-expr.Tpo" "$(DEPDIR)/libsqlite_la-expr.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-expr.Tpo"; exit 1; \
	fi
#	source='expr.c' object='libsqlite_la-expr.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-expr.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-expr.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-expr.obj `if test -f 'expr.c'; then $(CYGPATH_W) 'expr.c'; else $(CYGPATH_W) '$(srcdir)/expr.c'; fi`

libsqlite_la-expr.lo: expr.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-expr.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-expr.Tpo" \
	  -c -o libsqlite_la-expr.lo `test -f 'expr.c' || echo '$(srcdir)/'`expr.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-expr.Tpo" "$(DEPDIR)/libsqlite_la-expr.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-expr.Tpo"; exit 1; \
	fi
#	source='expr.c' object='libsqlite_la-expr.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-expr.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-expr.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-expr.lo `test -f 'expr.c' || echo '$(srcdir)/'`expr.c

libsqlite_la-func.o: func.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-func.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-func.Tpo" \
	  -c -o libsqlite_la-func.o `test -f 'func.c' || echo '$(srcdir)/'`func.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-func.Tpo" "$(DEPDIR)/libsqlite_la-func.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-func.Tpo"; exit 1; \
	fi
#	source='func.c' object='libsqlite_la-func.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-func.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-func.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-func.o `test -f 'func.c' || echo '$(srcdir)/'`func.c

libsqlite_la-func.obj: func.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-func.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-func.Tpo" \
	  -c -o libsqlite_la-func.obj `if test -f 'func.c'; then $(CYGPATH_W) 'func.c'; else $(CYGPATH_W) '$(srcdir)/func.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-func.Tpo" "$(DEPDIR)/libsqlite_la-func.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-func.Tpo"; exit 1; \
	fi
#	source='func.c' object='libsqlite_la-func.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-func.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-func.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-func.obj `if test -f 'func.c'; then $(CYGPATH_W) 'func.c'; else $(CYGPATH_W) '$(srcdir)/func.c'; fi`

libsqlite_la-func.lo: func.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-func.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-func.Tpo" \
	  -c -o libsqlite_la-func.lo `test -f 'func.c' || echo '$(srcdir)/'`func.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-func.Tpo" "$(DEPDIR)/libsqlite_la-func.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-func.Tpo"; exit 1; \
	fi
#	source='func.c' object='libsqlite_la-func.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-func.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-func.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-func.lo `test -f 'func.c' || echo '$(srcdir)/'`func.c

libsqlite_la-hash.o: hash.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-hash.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-hash.Tpo" \
	  -c -o libsqlite_la-hash.o `test -f 'hash.c' || echo '$(srcdir)/'`hash.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-hash.Tpo" "$(DEPDIR)/libsqlite_la-hash.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-hash.Tpo"; exit 1; \
	fi
#	source='hash.c' object='libsqlite_la-hash.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-hash.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-hash.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-hash.o `test -f 'hash.c' || echo '$(srcdir)/'`hash.c

libsqlite_la-hash.obj: hash.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-hash.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-hash.Tpo" \
	  -c -o libsqlite_la-hash.obj `if test -f 'hash.c'; then $(CYGPATH_W) 'hash.c'; else $(CYGPATH_W) '$(srcdir)/hash.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-hash.Tpo" "$(DEPDIR)/libsqlite_la-hash.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-hash.Tpo"; exit 1; \
	fi
#	source='hash.c' object='libsqlite_la-hash.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-hash.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-hash.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-hash.obj `if test -f 'hash.c'; then $(CYGPATH_W) 'hash.c'; else $(CYGPATH_W) '$(srcdir)/hash.c'; fi`

libsqlite_la-hash.lo: hash.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-hash.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-hash.Tpo" \
	  -c -o libsqlite_la-hash.lo `test -f 'hash.c' || echo '$(srcdir)/'`hash.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-hash.Tpo" "$(DEPDIR)/libsqlite_la-hash.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-hash.Tpo"; exit 1; \
	fi
#	source='hash.c' object='libsqlite_la-hash.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-hash.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-hash.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-hash.lo `test -f 'hash.c' || echo '$(srcdir)/'`hash.c

libsqlite_la-insert.o: insert.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-insert.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-insert.Tpo" \
	  -c -o libsqlite_la-insert.o `test -f 'insert.c' || echo '$(srcdir)/'`insert.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-insert.Tpo" "$(DEPDIR)/libsqlite_la-insert.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-insert.Tpo"; exit 1; \
	fi
#	source='insert.c' object='libsqlite_la-insert.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-insert.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-insert.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-insert.o `test -f 'insert.c' || echo '$(srcdir)/'`insert.c

libsqlite_la-insert.obj: insert.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-insert.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-insert.Tpo" \
	  -c -o libsqlite_la-insert.obj `if test -f 'insert.c'; then $(CYGPATH_W) 'insert.c'; else $(CYGPATH_W) '$(srcdir)/insert.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-insert.Tpo" "$(DEPDIR)/libsqlite_la-insert.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-insert.Tpo"; exit 1; \
	fi
#	source='insert.c' object='libsqlite_la-insert.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-insert.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-insert.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-insert.obj `if test -f 'insert.c'; then $(CYGPATH_W) 'insert.c'; else $(CYGPATH_W) '$(srcdir)/insert.c'; fi`

libsqlite_la-insert.lo: insert.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-insert.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-insert.Tpo" \
	  -c -o libsqlite_la-insert.lo `test -f 'insert.c' || echo '$(srcdir)/'`insert.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-insert.Tpo" "$(DEPDIR)/libsqlite_la-insert.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-insert.Tpo"; exit 1; \
	fi
#	source='insert.c' object='libsqlite_la-insert.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-insert.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-insert.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-insert.lo `test -f 'insert.c' || echo '$(srcdir)/'`insert.c

libsqlite_la-legacy.o: legacy.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-legacy.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-legacy.Tpo" \
	  -c -o libsqlite_la-legacy.o `test -f 'legacy.c' || echo '$(srcdir)/'`legacy.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-legacy.Tpo" "$(DEPDIR)/libsqlite_la-legacy.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-legacy.Tpo"; exit 1; \
	fi
#	source='legacy.c' object='libsqlite_la-legacy.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-legacy.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-legacy.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-legacy.o `test -f 'legacy.c' || echo '$(srcdir)/'`legacy.c

libsqlite_la-legacy.obj: legacy.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-legacy.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-legacy.Tpo" \
	  -c -o libsqlite_la-legacy.obj `if test -f 'legacy.c'; then $(CYGPATH_W) 'legacy.c'; else $(CYGPATH_W) '$(srcdir)/legacy.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-legacy.Tpo" "$(DEPDIR)/libsqlite_la-legacy.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-legacy.Tpo"; exit 1; \
	fi
#	source='legacy.c' object='libsqlite_la-legacy.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-legacy.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-legacy.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-legacy.obj `if test -f 'legacy.c'; then $(CYGPATH_W) 'legacy.c'; else $(CYGPATH_W) '$(srcdir)/legacy.c'; fi`

libsqlite_la-legacy.lo: legacy.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-legacy.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-legacy.Tpo" \
	  -c -o libsqlite_la-legacy.lo `test -f 'legacy.c' || echo '$(srcdir)/'`legacy.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-legacy.Tpo" "$(DEPDIR)/libsqlite_la-legacy.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-legacy.Tpo"; exit 1; \
	fi
#	source='legacy.c' object='libsqlite_la-legacy.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-legacy.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-legacy.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-legacy.lo `test -f 'legacy.c' || echo '$(srcdir)/'`legacy.c

libsqlite_la-main.o: main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-main.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-main.Tpo" \
	  -c -o libsqlite_la-main.o `test -f 'main.c' || echo '$(srcdir)/'`main.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-main.Tpo" "$(DEPDIR)/libsqlite_la-main.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-main.Tpo"; exit 1; \
	fi
#	source='main.c' object='libsqlite_la-main.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-main.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-main.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-main.o `test -f 'main.c' || echo '$(srcdir)/'`main.c

libsqlite_la-main.obj: main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-main.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-main.Tpo" \
	  -c -o libsqlite_la-main.obj `if test -f 'main.c'; then $(CYGPATH_W) 'main.c'; else $(CYGPATH_W) '$(srcdir)/main.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-main.Tpo" "$(DEPDIR)/libsqlite_la-main.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-main.Tpo"; exit 1; \
	fi
#	source='main.c' object='libsqlite_la-main.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-main.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-main.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-main.obj `if test -f 'main.c'; then $(CYGPATH_W) 'main.c'; else $(CYGPATH_W) '$(srcdir)/main.c'; fi`

libsqlite_la-main.lo: main.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-main.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-main.Tpo" \
	  -c -o libsqlite_la-main.lo `test -f 'main.c' || echo '$(srcdir)/'`main.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-main.Tpo" "$(DEPDIR)/libsqlite_la-main.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-main.Tpo"; exit 1; \
	fi
#	source='main.c' object='libsqlite_la-main.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-main.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-main.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-main.lo `test -f 'main.c' || echo '$(srcdir)/'`main.c

libsqlite_la-opcodes.o: opcodes.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-opcodes.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-opcodes.Tpo" \
	  -c -o libsqlite_la-opcodes.o `test -f 'opcodes.c' || echo '$(srcdir)/'`opcodes.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-opcodes.Tpo" "$(DEPDIR)/libsqlite_la-opcodes.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-opcodes.Tpo"; exit 1; \
	fi
#	source='opcodes.c' object='libsqlite_la-opcodes.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-opcodes.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-opcodes.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-opcodes.o `test -f 'opcodes.c' || echo '$(srcdir)/'`opcodes.c

libsqlite_la-opcodes.obj: opcodes.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-opcodes.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-opcodes.Tpo" \
	  -c -o libsqlite_la-opcodes.obj `if test -f 'opcodes.c'; then $(CYGPATH_W) 'opcodes.c'; else $(CYGPATH_W) '$(srcdir)/opcodes.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-opcodes.Tpo" "$(DEPDIR)/libsqlite_la-opcodes.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-opcodes.Tpo"; exit 1; \
	fi
#	source='opcodes.c' object='libsqlite_la-opcodes.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-opcodes.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-opcodes.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-opcodes.obj `if test -f 'opcodes.c'; then $(CYGPATH_W) 'opcodes.c'; else $(CYGPATH_W) '$(srcdir)/opcodes.c'; fi`

libsqlite_la-opcodes.lo: opcodes.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-opcodes.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-opcodes.Tpo" \
	  -c -o libsqlite_la-opcodes.lo `test -f 'opcodes.c' || echo '$(srcdir)/'`opcodes.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-opcodes.Tpo" "$(DEPDIR)/libsqlite_la-opcodes.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-opcodes.Tpo"; exit 1; \
	fi
#	source='opcodes.c' object='libsqlite_la-opcodes.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-opcodes.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-opcodes.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-opcodes.lo `test -f 'opcodes.c' || echo '$(srcdir)/'`opcodes.c

libsqlite_la-os.o: os.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-os.Tpo" \
	  -c -o libsqlite_la-os.o `test -f 'os.c' || echo '$(srcdir)/'`os.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-os.Tpo" "$(DEPDIR)/libsqlite_la-os.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os.Tpo"; exit 1; \
	fi
#	source='os.c' object='libsqlite_la-os.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-os.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-os.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os.o `test -f 'os.c' || echo '$(srcdir)/'`os.c

libsqlite_la-os.obj: os.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-os.Tpo" \
	  -c -o libsqlite_la-os.obj `if test -f 'os.c'; then $(CYGPATH_W) 'os.c'; else $(CYGPATH_W) '$(srcdir)/os.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-os.Tpo" "$(DEPDIR)/libsqlite_la-os.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os.Tpo"; exit 1; \
	fi
#	source='os.c' object='libsqlite_la-os.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-os.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-os.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os.obj `if test -f 'os.c'; then $(CYGPATH_W) 'os.c'; else $(CYGPATH_W) '$(srcdir)/os.c'; fi`

libsqlite_la-os.lo: os.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-os.Tpo" \
	  -c -o libsqlite_la-os.lo `test -f 'os.c' || echo '$(srcdir)/'`os.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-os.Tpo" "$(DEPDIR)/libsqlite_la-os.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os.Tpo"; exit 1; \
	fi
#	source='os.c' object='libsqlite_la-os.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-os.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-os.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os.lo `test -f 'os.c' || echo '$(srcdir)/'`os.c

libsqlite_la-os_os2.o: os_os2.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os_os2.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-os_os2.Tpo" \
	  -c -o libsqlite_la-os_os2.o `test -f 'os_os2.c' || echo '$(srcdir)/'`os_os2.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-os_os2.Tpo" "$(DEPDIR)/libsqlite_la-os_os2.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os_os2.Tpo"; exit 1; \
	fi
#	source='os_os2.c' object='libsqlite_la-os_os2.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-os_os2.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-os_os2.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os_os2.o `test -f 'os_os2.c' || echo '$(srcdir)/'`os_os2.c

libsqlite_la-os_os2.obj: os_os2.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os_os2.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-os_os2.Tpo" \
	  -c -o libsqlite_la-os_os2.obj `if test -f 'os_os2.c'; then $(CYGPATH_W) 'os_os2.c'; else $(CYGPATH_W) '$(srcdir)/os_os2.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-os_os2.Tpo" "$(DEPDIR)/libsqlite_la-os_os2.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os_os2.Tpo"; exit 1; \
	fi
#	source='os_os2.c' object='libsqlite_la-os_os2.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-os_os2.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-os_os2.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os_os2.obj `if test -f 'os_os2.c'; then $(CYGPATH_W) 'os_os2.c'; else $(CYGPATH_W) '$(srcdir)/os_os2.c'; fi`

libsqlite_la-os_os2.lo: os_os2.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os_os2.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-os_os2.Tpo" \
	  -c -o libsqlite_la-os_os2.lo `test -f 'os_os2.c' || echo '$(srcdir)/'`os_os2.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-os_os2.Tpo" "$(DEPDIR)/libsqlite_la-os_os2.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os_os2.Tpo"; exit 1; \
	fi
#	source='os_os2.c' object='libsqlite_la-os_os2.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-os_os2.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-os_os2.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os_os2.lo `test -f 'os_os2.c' || echo '$(srcdir)/'`os_os2.c

libsqlite_la-os_unix.o: os_unix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os_unix.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-os_unix.Tpo" \
	  -c -o libsqlite_la-os_unix.o `test -f 'os_unix.c' || echo '$(srcdir)/'`os_unix.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-os_unix.Tpo" "$(DEPDIR)/libsqlite_la-os_unix.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os_unix.Tpo"; exit 1; \
	fi
#	source='os_unix.c' object='libsqlite_la-os_unix.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-os_unix.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-os_unix.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os_unix.o `test -f 'os_unix.c' || echo '$(srcdir)/'`os_unix.c

libsqlite_la-os_unix.obj: os_unix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os_unix.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-os_unix.Tpo" \
	  -c -o libsqlite_la-os_unix.obj `if test -f 'os_unix.c'; then $(CYGPATH_W) 'os_unix.c'; else $(CYGPATH_W) '$(srcdir)/os_unix.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-os_unix.Tpo" "$(DEPDIR)/libsqlite_la-os_unix.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os_unix.Tpo"; exit 1; \
	fi
#	source='os_unix.c' object='libsqlite_la-os_unix.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-os_unix.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-os_unix.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os_unix.obj `if test -f 'os_unix.c'; then $(CYGPATH_W) 'os_unix.c'; else $(CYGPATH_W) '$(srcdir)/os_unix.c'; fi`

libsqlite_la-os_unix.lo: os_unix.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os_unix.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-os_unix.Tpo" \
	  -c -o libsqlite_la-os_unix.lo `test -f 'os_unix.c' || echo '$(srcdir)/'`os_unix.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-os_unix.Tpo" "$(DEPDIR)/libsqlite_la-os_unix.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os_unix.Tpo"; exit 1; \
	fi
#	source='os_unix.c' object='libsqlite_la-os_unix.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-os_unix.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-os_unix.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os_unix.lo `test -f 'os_unix.c' || echo '$(srcdir)/'`os_unix.c

libsqlite_la-os_win.o: os_win.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os_win.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-os_win.Tpo" \
	  -c -o libsqlite_la-os_win.o `test -f 'os_win.c' || echo '$(srcdir)/'`os_win.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-os_win.Tpo" "$(DEPDIR)/libsqlite_la-os_win.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os_win.Tpo"; exit 1; \
	fi
#	source='os_win.c' object='libsqlite_la-os_win.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-os_win.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-os_win.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os_win.o `test -f 'os_win.c' || echo '$(srcdir)/'`os_win.c

libsqlite_la-os_win.obj: os_win.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os_win.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-os_win.Tpo" \
	  -c -o libsqlite_la-os_win.obj `if test -f 'os_win.c'; then $(CYGPATH_W) 'os_win.c'; else $(CYGPATH_W) '$(srcdir)/os_win.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-os_win.Tpo" "$(DEPDIR)/libsqlite_la-os_win.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os_win.Tpo"; exit 1; \
	fi
#	source='os_win.c' object='libsqlite_la-os_win.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-os_win.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-os_win.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os_win.obj `if test -f 'os_win.c'; then $(CYGPATH_W) 'os_win.c'; else $(CYGPATH_W) '$(srcdir)/os_win.c'; fi`

libsqlite_la-os_win.lo: os_win.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-os_win.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-os_win.Tpo" \
	  -c -o libsqlite_la-os_win.lo `test -f 'os_win.c' || echo '$(srcdir)/'`os_win.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-os_win.Tpo" "$(DEPDIR)/libsqlite_la-os_win.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-os_win.Tpo"; exit 1; \
	fi
#	source='os_win.c' object='libsqlite_la-os_win.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-os_win.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-os_win.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-os_win.lo `test -f 'os_win.c' || echo '$(srcdir)/'`os_win.c

libsqlite_la-pager.o: pager.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-pager.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-pager.Tpo" \
	  -c -o libsqlite_la-pager.o `test -f 'pager.c' || echo '$(srcdir)/'`pager.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-pager.Tpo" "$(DEPDIR)/libsqlite_la-pager.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-pager.Tpo"; exit 1; \
	fi
#	source='pager.c' object='libsqlite_la-pager.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-pager.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-pager.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-pager.o `test -f 'pager.c' || echo '$(srcdir)/'`pager.c

libsqlite_la-pager.obj: pager.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-pager.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-pager.Tpo" \
	  -c -o libsqlite_la-pager.obj `if test -f 'pager.c'; then $(CYGPATH_W) 'pager.c'; else $(CYGPATH_W) '$(srcdir)/pager.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-pager.Tpo" "$(DEPDIR)/libsqlite_la-pager.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-pager.Tpo"; exit 1; \
	fi
#	source='pager.c' object='libsqlite_la-pager.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-pager.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-pager.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-pager.obj `if test -f 'pager.c'; then $(CYGPATH_W) 'pager.c'; else $(CYGPATH_W) '$(srcdir)/pager.c'; fi`

libsqlite_la-pager.lo: pager.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-pager.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-pager.Tpo" \
	  -c -o libsqlite_la-pager.lo `test -f 'pager.c' || echo '$(srcdir)/'`pager.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-pager.Tpo" "$(DEPDIR)/libsqlite_la-pager.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-pager.Tpo"; exit 1; \
	fi
#	source='pager.c' object='libsqlite_la-pager.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-pager.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-pager.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-pager.lo `test -f 'pager.c' || echo '$(srcdir)/'`pager.c

libsqlite_la-parse.o: parse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-parse.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-parse.Tpo" \
	  -c -o libsqlite_la-parse.o `test -f 'parse.c' || echo '$(srcdir)/'`parse.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-parse.Tpo" "$(DEPDIR)/libsqlite_la-parse.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-parse.Tpo"; exit 1; \
	fi
#	source='parse.c' object='libsqlite_la-parse.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-parse.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-parse.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-parse.o `test -f 'parse.c' || echo '$(srcdir)/'`parse.c

libsqlite_la-parse.obj: parse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-parse.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-parse.Tpo" \
	  -c -o libsqlite_la-parse.obj `if test -f 'parse.c'; then $(CYGPATH_W) 'parse.c'; else $(CYGPATH_W) '$(srcdir)/parse.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-parse.Tpo" "$(DEPDIR)/libsqlite_la-parse.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-parse.Tpo"; exit 1; \
	fi
#	source='parse.c' object='libsqlite_la-parse.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-parse.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-parse.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-parse.obj `if test -f 'parse.c'; then $(CYGPATH_W) 'parse.c'; else $(CYGPATH_W) '$(srcdir)/parse.c'; fi`

libsqlite_la-parse.lo: parse.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-parse.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-parse.Tpo" \
	  -c -o libsqlite_la-parse.lo `test -f 'parse.c' || echo '$(srcdir)/'`parse.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-parse.Tpo" "$(DEPDIR)/libsqlite_la-parse.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-parse.Tpo"; exit 1; \
	fi
#	source='parse.c' object='libsqlite_la-parse.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-parse.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-parse.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-parse.lo `test -f 'parse.c' || echo '$(srcdir)/'`parse.c

libsqlite_la-pragma.o: pragma.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-pragma.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-pragma.Tpo" \
	  -c -o libsqlite_la-pragma.o `test -f 'pragma.c' || echo '$(srcdir)/'`pragma.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-pragma.Tpo" "$(DEPDIR)/libsqlite_la-pragma.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-pragma.Tpo"; exit 1; \
	fi
#	source='pragma.c' object='libsqlite_la-pragma.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-pragma.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-pragma.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-pragma.o `test -f 'pragma.c' || echo '$(srcdir)/'`pragma.c

libsqlite_la-pragma.obj: pragma.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-pragma.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-pragma.Tpo" \
	  -c -o libsqlite_la-pragma.obj `if test -f 'pragma.c'; then $(CYGPATH_W) 'pragma.c'; else $(CYGPATH_W) '$(srcdir)/pragma.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-pragma.Tpo" "$(DEPDIR)/libsqlite_la-pragma.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-pragma.Tpo"; exit 1; \
	fi
#	source='pragma.c' object='libsqlite_la-pragma.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-pragma.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-pragma.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-pragma.obj `if test -f 'pragma.c'; then $(CYGPATH_W) 'pragma.c'; else $(CYGPATH_W) '$(srcdir)/pragma.c'; fi`

libsqlite_la-pragma.lo: pragma.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-pragma.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-pragma.Tpo" \
	  -c -o libsqlite_la-pragma.lo `test -f 'pragma.c' || echo '$(srcdir)/'`pragma.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-pragma.Tpo" "$(DEPDIR)/libsqlite_la-pragma.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-pragma.Tpo"; exit 1; \
	fi
#	source='pragma.c' object='libsqlite_la-pragma.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-pragma.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-pragma.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-pragma.lo `test -f 'pragma.c' || echo '$(srcdir)/'`pragma.c

libsqlite_la-prepare.o: prepare.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-prepare.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-prepare.Tpo" \
	  -c -o libsqlite_la-prepare.o `test -f 'prepare.c' || echo '$(srcdir)/'`prepare.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-prepare.Tpo" "$(DEPDIR)/libsqlite_la-prepare.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-prepare.Tpo"; exit 1; \
	fi
#	source='prepare.c' object='libsqlite_la-prepare.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-prepare.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-prepare.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-prepare.o `test -f 'prepare.c' || echo '$(srcdir)/'`prepare.c

libsqlite_la-prepare.obj: prepare.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-prepare.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-prepare.Tpo" \
	  -c -o libsqlite_la-prepare.obj `if test -f 'prepare.c'; then $(CYGPATH_W) 'prepare.c'; else $(CYGPATH_W) '$(srcdir)/prepare.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-prepare.Tpo" "$(DEPDIR)/libsqlite_la-prepare.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-prepare.Tpo"; exit 1; \
	fi
#	source='prepare.c' object='libsqlite_la-prepare.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-prepare.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-prepare.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-prepare.obj `if test -f 'prepare.c'; then $(CYGPATH_W) 'prepare.c'; else $(CYGPATH_W) '$(srcdir)/prepare.c'; fi`

libsqlite_la-prepare.lo: prepare.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-prepare.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-prepare.Tpo" \
	  -c -o libsqlite_la-prepare.lo `test -f 'prepare.c' || echo '$(srcdir)/'`prepare.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-prepare.Tpo" "$(DEPDIR)/libsqlite_la-prepare.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-prepare.Tpo"; exit 1; \
	fi
#	source='prepare.c' object='libsqlite_la-prepare.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-prepare.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-prepare.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-prepare.lo `test -f 'prepare.c' || echo '$(srcdir)/'`prepare.c

libsqlite_la-printf.o: printf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-printf.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-printf.Tpo" \
	  -c -o libsqlite_la-printf.o `test -f 'printf.c' || echo '$(srcdir)/'`printf.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-printf.Tpo" "$(DEPDIR)/libsqlite_la-printf.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-printf.Tpo"; exit 1; \
	fi
#	source='printf.c' object='libsqlite_la-printf.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-printf.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-printf.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-printf.o `test -f 'printf.c' || echo '$(srcdir)/'`printf.c

libsqlite_la-printf.obj: printf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-printf.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-printf.Tpo" \
	  -c -o libsqlite_la-printf.obj `if test -f 'printf.c'; then $(CYGPATH_W) 'printf.c'; else $(CYGPATH_W) '$(srcdir)/printf.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-printf.Tpo" "$(DEPDIR)/libsqlite_la-printf.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-printf.Tpo"; exit 1; \
	fi
#	source='printf.c' object='libsqlite_la-printf.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-printf.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-printf.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-printf.obj `if test -f 'printf.c'; then $(CYGPATH_W) 'printf.c'; else $(CYGPATH_W) '$(srcdir)/printf.c'; fi`

libsqlite_la-printf.lo: printf.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-printf.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-printf.Tpo" \
	  -c -o libsqlite_la-printf.lo `test -f 'printf.c' || echo '$(srcdir)/'`printf.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-printf.Tpo" "$(DEPDIR)/libsqlite_la-printf.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-printf.Tpo"; exit 1; \
	fi
#	source='printf.c' object='libsqlite_la-printf.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-printf.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-printf.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-printf.lo `test -f 'printf.c' || echo '$(srcdir)/'`printf.c

libsqlite_la-random.o: random.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-random.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-random.Tpo" \
	  -c -o libsqlite_la-random.o `test -f 'random.c' || echo '$(srcdir)/'`random.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-random.Tpo" "$(DEPDIR)/libsqlite_la-random.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-random.Tpo"; exit 1; \
	fi
#	source='random.c' object='libsqlite_la-random.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-random.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-random.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-random.o `test -f 'random.c' || echo '$(srcdir)/'`random.c

libsqlite_la-random.obj: random.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-random.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-random.Tpo" \
	  -c -o libsqlite_la-random.obj `if test -f 'random.c'; then $(CYGPATH_W) 'random.c'; else $(CYGPATH_W) '$(srcdir)/random.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-random.Tpo" "$(DEPDIR)/libsqlite_la-random.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-random.Tpo"; exit 1; \
	fi
#	source='random.c' object='libsqlite_la-random.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-random.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-random.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-random.obj `if test -f 'random.c'; then $(CYGPATH_W) 'random.c'; else $(CYGPATH_W) '$(srcdir)/random.c'; fi`

libsqlite_la-random.lo: random.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-random.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-random.Tpo" \
	  -c -o libsqlite_la-random.lo `test -f 'random.c' || echo '$(srcdir)/'`random.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-random.Tpo" "$(DEPDIR)/libsqlite_la-random.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-random.Tpo"; exit 1; \
	fi
#	source='random.c' object='libsqlite_la-random.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-random.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-random.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-random.lo `test -f 'random.c' || echo '$(srcdir)/'`random.c

libsqlite_la-select.o: select.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-select.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-select.Tpo" \
	  -c -o libsqlite_la-select.o `test -f 'select.c' || echo '$(srcdir)/'`select.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-select.Tpo" "$(DEPDIR)/libsqlite_la-select.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-select.Tpo"; exit 1; \
	fi
#	source='select.c' object='libsqlite_la-select.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-select.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-select.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-select.o `test -f 'select.c' || echo '$(srcdir)/'`select.c

libsqlite_la-select.obj: select.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-select.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-select.Tpo" \
	  -c -o libsqlite_la-select.obj `if test -f 'select.c'; then $(CYGPATH_W) 'select.c'; else $(CYGPATH_W) '$(srcdir)/select.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-select.Tpo" "$(DEPDIR)/libsqlite_la-select.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-select.Tpo"; exit 1; \
	fi
#	source='select.c' object='libsqlite_la-select.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-select.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-select.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-select.obj `if test -f 'select.c'; then $(CYGPATH_W) 'select.c'; else $(CYGPATH_W) '$(srcdir)/select.c'; fi`

libsqlite_la-select.lo: select.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-select.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-select.Tpo" \
	  -c -o libsqlite_la-select.lo `test -f 'select.c' || echo '$(srcdir)/'`select.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-select.Tpo" "$(DEPDIR)/libsqlite_la-select.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-select.Tpo"; exit 1; \
	fi
#	source='select.c' object='libsqlite_la-select.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-select.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-select.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-select.lo `test -f 'select.c' || echo '$(srcdir)/'`select.c

libsqlite_la-table.o: table.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-table.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-table.Tpo" \
	  -c -o libsqlite_la-table.o `test -f 'table.c' || echo '$(srcdir)/'`table.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-table.Tpo" "$(DEPDIR)/libsqlite_la-table.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-table.Tpo"; exit 1; \
	fi
#	source='table.c' object='libsqlite_la-table.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-table.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-table.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-table.o `test -f 'table.c' || echo '$(srcdir)/'`table.c

libsqlite_la-table.obj: table.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-table.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-table.Tpo" \
	  -c -o libsqlite_la-table.obj `if test -f 'table.c'; then $(CYGPATH_W) 'table.c'; else $(CYGPATH_W) '$(srcdir)/table.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-table.Tpo" "$(DEPDIR)/libsqlite_la-table.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-table.Tpo"; exit 1; \
	fi
#	source='table.c' object='libsqlite_la-table.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-table.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-table.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-table.obj `if test -f 'table.c'; then $(CYGPATH_W) 'table.c'; else $(CYGPATH_W) '$(srcdir)/table.c'; fi`

libsqlite_la-table.lo: table.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-table.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-table.Tpo" \
	  -c -o libsqlite_la-table.lo `test -f 'table.c' || echo '$(srcdir)/'`table.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-table.Tpo" "$(DEPDIR)/libsqlite_la-table.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-table.Tpo"; exit 1; \
	fi
#	source='table.c' object='libsqlite_la-table.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-table.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-table.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-table.lo `test -f 'table.c' || echo '$(srcdir)/'`table.c

libsqlite_la-tokenize.o: tokenize.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-tokenize.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-tokenize.Tpo" \
	  -c -o libsqlite_la-tokenize.o `test -f 'tokenize.c' || echo '$(srcdir)/'`tokenize.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-tokenize.Tpo" "$(DEPDIR)/libsqlite_la-tokenize.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-tokenize.Tpo"; exit 1; \
	fi
#	source='tokenize.c' object='libsqlite_la-tokenize.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-tokenize.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-tokenize.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-tokenize.o `test -f 'tokenize.c' || echo '$(srcdir)/'`tokenize.c

libsqlite_la-tokenize.obj: tokenize.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-tokenize.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-tokenize.Tpo" \
	  -c -o libsqlite_la-tokenize.obj `if test -f 'tokenize.c'; then $(CYGPATH_W) 'tokenize.c'; else $(CYGPATH_W) '$(srcdir)/tokenize.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-tokenize.Tpo" "$(DEPDIR)/libsqlite_la-tokenize.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-tokenize.Tpo"; exit 1; \
	fi
#	source='tokenize.c' object='libsqlite_la-tokenize.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-tokenize.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-tokenize.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-tokenize.obj `if test -f 'tokenize.c'; then $(CYGPATH_W) 'tokenize.c'; else $(CYGPATH_W) '$(srcdir)/tokenize.c'; fi`

libsqlite_la-tokenize.lo: tokenize.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-tokenize.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-tokenize.Tpo" \
	  -c -o libsqlite_la-tokenize.lo `test -f 'tokenize.c' || echo '$(srcdir)/'`tokenize.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-tokenize.Tpo" "$(DEPDIR)/libsqlite_la-tokenize.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-tokenize.Tpo"; exit 1; \
	fi
#	source='tokenize.c' object='libsqlite_la-tokenize.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-tokenize.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-tokenize.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-tokenize.lo `test -f 'tokenize.c' || echo '$(srcdir)/'`tokenize.c

libsqlite_la-trigger.o: trigger.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-trigger.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-trigger.Tpo" \
	  -c -o libsqlite_la-trigger.o `test -f 'trigger.c' || echo '$(srcdir)/'`trigger.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-trigger.Tpo" "$(DEPDIR)/libsqlite_la-trigger.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-trigger.Tpo"; exit 1; \
	fi
#	source='trigger.c' object='libsqlite_la-trigger.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-trigger.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-trigger.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-trigger.o `test -f 'trigger.c' || echo '$(srcdir)/'`trigger.c

libsqlite_la-trigger.obj: trigger.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-trigger.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-trigger.Tpo" \
	  -c -o libsqlite_la-trigger.obj `if test -f 'trigger.c'; then $(CYGPATH_W) 'trigger.c'; else $(CYGPATH_W) '$(srcdir)/trigger.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-trigger.Tpo" "$(DEPDIR)/libsqlite_la-trigger.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-trigger.Tpo"; exit 1; \
	fi
#	source='trigger.c' object='libsqlite_la-trigger.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-trigger.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-trigger.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-trigger.obj `if test -f 'trigger.c'; then $(CYGPATH_W) 'trigger.c'; else $(CYGPATH_W) '$(srcdir)/trigger.c'; fi`

libsqlite_la-trigger.lo: trigger.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-trigger.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-trigger.Tpo" \
	  -c -o libsqlite_la-trigger.lo `test -f 'trigger.c' || echo '$(srcdir)/'`trigger.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-trigger.Tpo" "$(DEPDIR)/libsqlite_la-trigger.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-trigger.Tpo"; exit 1; \
	fi
#	source='trigger.c' object='libsqlite_la-trigger.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-trigger.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-trigger.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-trigger.lo `test -f 'trigger.c' || echo '$(srcdir)/'`trigger.c

libsqlite_la-update.o: update.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-update.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-update.Tpo" \
	  -c -o libsqlite_la-update.o `test -f 'update.c' || echo '$(srcdir)/'`update.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-update.Tpo" "$(DEPDIR)/libsqlite_la-update.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-update.Tpo"; exit 1; \
	fi
#	source='update.c' object='libsqlite_la-update.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-update.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-update.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-update.o `test -f 'update.c' || echo '$(srcdir)/'`update.c

libsqlite_la-update.obj: update.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-update.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-update.Tpo" \
	  -c -o libsqlite_la-update.obj `if test -f 'update.c'; then $(CYGPATH_W) 'update.c'; else $(CYGPATH_W) '$(srcdir)/update.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-update.Tpo" "$(DEPDIR)/libsqlite_la-update.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-update.Tpo"; exit 1; \
	fi
#	source='update.c' object='libsqlite_la-update.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-update.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-update.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-update.obj `if test -f 'update.c'; then $(CYGPATH_W) 'update.c'; else $(CYGPATH_W) '$(srcdir)/update.c'; fi`

libsqlite_la-update.lo: update.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-update.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-update.Tpo" \
	  -c -o libsqlite_la-update.lo `test -f 'update.c' || echo '$(srcdir)/'`update.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-update.Tpo" "$(DEPDIR)/libsqlite_la-update.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-update.Tpo"; exit 1; \
	fi
#	source='update.c' object='libsqlite_la-update.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-update.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-update.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-update.lo `test -f 'update.c' || echo '$(srcdir)/'`update.c

libsqlite_la-utf.o: utf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-utf.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-utf.Tpo" \
	  -c -o libsqlite_la-utf.o `test -f 'utf.c' || echo '$(srcdir)/'`utf.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-utf.Tpo" "$(DEPDIR)/libsqlite_la-utf.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-utf.Tpo"; exit 1; \
	fi
#	source='utf.c' object='libsqlite_la-utf.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-utf.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-utf.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-utf.o `test -f 'utf.c' || echo '$(srcdir)/'`utf.c

libsqlite_la-utf.obj: utf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-utf.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-utf.Tpo" \
	  -c -o libsqlite_la-utf.obj `if test -f 'utf.c'; then $(CYGPATH_W) 'utf.c'; else $(CYGPATH_W) '$(srcdir)/utf.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-utf.Tpo" "$(DEPDIR)/libsqlite_la-utf.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-utf.Tpo"; exit 1; \
	fi
#	source='utf.c' object='libsqlite_la-utf.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-utf.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-utf.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-utf.obj `if test -f 'utf.c'; then $(CYGPATH_W) 'utf.c'; else $(CYGPATH_W) '$(srcdir)/utf.c'; fi`

libsqlite_la-utf.lo: utf.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-utf.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-utf.Tpo" \
	  -c -o libsqlite_la-utf.lo `test -f 'utf.c' || echo '$(srcdir)/'`utf.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-utf.Tpo" "$(DEPDIR)/libsqlite_la-utf.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-utf.Tpo"; exit 1; \
	fi
#	source='utf.c' object='libsqlite_la-utf.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-utf.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-utf.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-utf.lo `test -f 'utf.c' || echo '$(srcdir)/'`utf.c

libsqlite_la-util.o: util.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-util.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-util.Tpo" \
	  -c -o libsqlite_la-util.o `test -f 'util.c' || echo '$(srcdir)/'`util.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-util.Tpo" "$(DEPDIR)/libsqlite_la-util.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-util.Tpo"; exit 1; \
	fi
#	source='util.c' object='libsqlite_la-util.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-util.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-util.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-util.o `test -f 'util.c' || echo '$(srcdir)/'`util.c

libsqlite_la-util.obj: util.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-util.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-util.Tpo" \
	  -c -o libsqlite_la-util.obj `if test -f 'util.c'; then $(CYGPATH_W) 'util.c'; else $(CYGPATH_W) '$(srcdir)/util.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-util.Tpo" "$(DEPDIR)/libsqlite_la-util.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-util.Tpo"; exit 1; \
	fi
#	source='util.c' object='libsqlite_la-util.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-util.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-util.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-util.obj `if test -f 'util.c'; then $(CYGPATH_W) 'util.c'; else $(CYGPATH_W) '$(srcdir)/util.c'; fi`

libsqlite_la-util.lo: util.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-util.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-util.Tpo" \
	  -c -o libsqlite_la-util.lo `test -f 'util.c' || echo '$(srcdir)/'`util.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-util.Tpo" "$(DEPDIR)/libsqlite_la-util.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-util.Tpo"; exit 1; \
	fi
#	source='util.c' object='libsqlite_la-util.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-util.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-util.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-util.lo `test -f 'util.c' || echo '$(srcdir)/'`util.c

libsqlite_la-vacuum.o: vacuum.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vacuum.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-vacuum.Tpo" \
	  -c -o libsqlite_la-vacuum.o `test -f 'vacuum.c' || echo '$(srcdir)/'`vacuum.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vacuum.Tpo" "$(DEPDIR)/libsqlite_la-vacuum.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vacuum.Tpo"; exit 1; \
	fi
#	source='vacuum.c' object='libsqlite_la-vacuum.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vacuum.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vacuum.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vacuum.o `test -f 'vacuum.c' || echo '$(srcdir)/'`vacuum.c

libsqlite_la-vacuum.obj: vacuum.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vacuum.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-vacuum.Tpo" \
	  -c -o libsqlite_la-vacuum.obj `if test -f 'vacuum.c'; then $(CYGPATH_W) 'vacuum.c'; else $(CYGPATH_W) '$(srcdir)/vacuum.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-vacuum.Tpo" "$(DEPDIR)/libsqlite_la-vacuum.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vacuum.Tpo"; exit 1; \
	fi
#	source='vacuum.c' object='libsqlite_la-vacuum.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vacuum.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vacuum.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vacuum.obj `if test -f 'vacuum.c'; then $(CYGPATH_W) 'vacuum.c'; else $(CYGPATH_W) '$(srcdir)/vacuum.c'; fi`

libsqlite_la-vacuum.lo: vacuum.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vacuum.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-vacuum.Tpo" \
	  -c -o libsqlite_la-vacuum.lo `test -f 'vacuum.c' || echo '$(srcdir)/'`vacuum.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vacuum.Tpo" "$(DEPDIR)/libsqlite_la-vacuum.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vacuum.Tpo"; exit 1; \
	fi
#	source='vacuum.c' object='libsqlite_la-vacuum.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-vacuum.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-vacuum.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vacuum.lo `test -f 'vacuum.c' || echo '$(srcdir)/'`vacuum.c

libsqlite_la-vdbe.o: vdbe.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbe.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbe.Tpo" \
	  -c -o libsqlite_la-vdbe.o `test -f 'vdbe.c' || echo '$(srcdir)/'`vdbe.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbe.Tpo" "$(DEPDIR)/libsqlite_la-vdbe.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbe.Tpo"; exit 1; \
	fi
#	source='vdbe.c' object='libsqlite_la-vdbe.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vdbe.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbe.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbe.o `test -f 'vdbe.c' || echo '$(srcdir)/'`vdbe.c

libsqlite_la-vdbe.obj: vdbe.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbe.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbe.Tpo" \
	  -c -o libsqlite_la-vdbe.obj `if test -f 'vdbe.c'; then $(CYGPATH_W) 'vdbe.c'; else $(CYGPATH_W) '$(srcdir)/vdbe.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbe.Tpo" "$(DEPDIR)/libsqlite_la-vdbe.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbe.Tpo"; exit 1; \
	fi
#	source='vdbe.c' object='libsqlite_la-vdbe.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vdbe.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbe.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbe.obj `if test -f 'vdbe.c'; then $(CYGPATH_W) 'vdbe.c'; else $(CYGPATH_W) '$(srcdir)/vdbe.c'; fi`

libsqlite_la-vdbe.lo: vdbe.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbe.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbe.Tpo" \
	  -c -o libsqlite_la-vdbe.lo `test -f 'vdbe.c' || echo '$(srcdir)/'`vdbe.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbe.Tpo" "$(DEPDIR)/libsqlite_la-vdbe.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbe.Tpo"; exit 1; \
	fi
#	source='vdbe.c' object='libsqlite_la-vdbe.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-vdbe.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbe.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbe.lo `test -f 'vdbe.c' || echo '$(srcdir)/'`vdbe.c

libsqlite_la-vdbeapi.o: vdbeapi.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbeapi.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbeapi.Tpo" \
	  -c -o libsqlite_la-vdbeapi.o `test -f 'vdbeapi.c' || echo '$(srcdir)/'`vdbeapi.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbeapi.Tpo" "$(DEPDIR)/libsqlite_la-vdbeapi.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbeapi.Tpo"; exit 1; \
	fi
#	source='vdbeapi.c' object='libsqlite_la-vdbeapi.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vdbeapi.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbeapi.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbeapi.o `test -f 'vdbeapi.c' || echo '$(srcdir)/'`vdbeapi.c

libsqlite_la-vdbeapi.obj: vdbeapi.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbeapi.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbeapi.Tpo" \
	  -c -o libsqlite_la-vdbeapi.obj `if test -f 'vdbeapi.c'; then $(CYGPATH_W) 'vdbeapi.c'; else $(CYGPATH_W) '$(srcdir)/vdbeapi.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbeapi.Tpo" "$(DEPDIR)/libsqlite_la-vdbeapi.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbeapi.Tpo"; exit 1; \
	fi
#	source='vdbeapi.c' object='libsqlite_la-vdbeapi.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vdbeapi.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbeapi.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbeapi.obj `if test -f 'vdbeapi.c'; then $(CYGPATH_W) 'vdbeapi.c'; else $(CYGPATH_W) '$(srcdir)/vdbeapi.c'; fi`

libsqlite_la-vdbeapi.lo: vdbeapi.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbeapi.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbeapi.Tpo" \
	  -c -o libsqlite_la-vdbeapi.lo `test -f 'vdbeapi.c' || echo '$(srcdir)/'`vdbeapi.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbeapi.Tpo" "$(DEPDIR)/libsqlite_la-vdbeapi.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbeapi.Tpo"; exit 1; \
	fi
#	source='vdbeapi.c' object='libsqlite_la-vdbeapi.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-vdbeapi.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbeapi.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbeapi.lo `test -f 'vdbeapi.c' || echo '$(srcdir)/'`vdbeapi.c

libsqlite_la-vdbeaux.o: vdbeaux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbeaux.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbeaux.Tpo" \
	  -c -o libsqlite_la-vdbeaux.o `test -f 'vdbeaux.c' || echo '$(srcdir)/'`vdbeaux.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbeaux.Tpo" "$(DEPDIR)/libsqlite_la-vdbeaux.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbeaux.Tpo"; exit 1; \
	fi
#	source='vdbeaux.c' object='libsqlite_la-vdbeaux.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vdbeaux.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbeaux.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbeaux.o `test -f 'vdbeaux.c' || echo '$(srcdir)/'`vdbeaux.c

libsqlite_la-vdbeaux.obj: vdbeaux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbeaux.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbeaux.Tpo" \
	  -c -o libsqlite_la-vdbeaux.obj `if test -f 'vdbeaux.c'; then $(CYGPATH_W) 'vdbeaux.c'; else $(CYGPATH_W) '$(srcdir)/vdbeaux.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbeaux.Tpo" "$(DEPDIR)/libsqlite_la-vdbeaux.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbeaux.Tpo"; exit 1; \
	fi
#	source='vdbeaux.c' object='libsqlite_la-vdbeaux.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vdbeaux.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbeaux.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbeaux.obj `if test -f 'vdbeaux.c'; then $(CYGPATH_W) 'vdbeaux.c'; else $(CYGPATH_W) '$(srcdir)/vdbeaux.c'; fi`

libsqlite_la-vdbeaux.lo: vdbeaux.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbeaux.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbeaux.Tpo" \
	  -c -o libsqlite_la-vdbeaux.lo `test -f 'vdbeaux.c' || echo '$(srcdir)/'`vdbeaux.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbeaux.Tpo" "$(DEPDIR)/libsqlite_la-vdbeaux.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbeaux.Tpo"; exit 1; \
	fi
#	source='vdbeaux.c' object='libsqlite_la-vdbeaux.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-vdbeaux.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbeaux.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbeaux.lo `test -f 'vdbeaux.c' || echo '$(srcdir)/'`vdbeaux.c

libsqlite_la-vdbefifo.o: vdbefifo.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbefifo.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbefifo.Tpo" \
	  -c -o libsqlite_la-vdbefifo.o `test -f 'vdbefifo.c' || echo '$(srcdir)/'`vdbefifo.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbefifo.Tpo" "$(DEPDIR)/libsqlite_la-vdbefifo.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbefifo.Tpo"; exit 1; \
	fi
#	source='vdbefifo.c' object='libsqlite_la-vdbefifo.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vdbefifo.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbefifo.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbefifo.o `test -f 'vdbefifo.c' || echo '$(srcdir)/'`vdbefifo.c

libsqlite_la-vdbefifo.obj: vdbefifo.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbefifo.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbefifo.Tpo" \
	  -c -o libsqlite_la-vdbefifo.obj `if test -f 'vdbefifo.c'; then $(CYGPATH_W) 'vdbefifo.c'; else $(CYGPATH_W) '$(srcdir)/vdbefifo.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbefifo.Tpo" "$(DEPDIR)/libsqlite_la-vdbefifo.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbefifo.Tpo"; exit 1; \
	fi
#	source='vdbefifo.c' object='libsqlite_la-vdbefifo.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vdbefifo.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbefifo.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbefifo.obj `if test -f 'vdbefifo.c'; then $(CYGPATH_W) 'vdbefifo.c'; else $(CYGPATH_W) '$(srcdir)/vdbefifo.c'; fi`

libsqlite_la-vdbefifo.lo: vdbefifo.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbefifo.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbefifo.Tpo" \
	  -c -o libsqlite_la-vdbefifo.lo `test -f 'vdbefifo.c' || echo '$(srcdir)/'`vdbefifo.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbefifo.Tpo" "$(DEPDIR)/libsqlite_la-vdbefifo.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbefifo.Tpo"; exit 1; \
	fi
#	source='vdbefifo.c' object='libsqlite_la-vdbefifo.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-vdbefifo.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbefifo.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbefifo.lo `test -f 'vdbefifo.c' || echo '$(srcdir)/'`vdbefifo.c

libsqlite_la-vdbemem.o: vdbemem.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbemem.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbemem.Tpo" \
	  -c -o libsqlite_la-vdbemem.o `test -f 'vdbemem.c' || echo '$(srcdir)/'`vdbemem.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbemem.Tpo" "$(DEPDIR)/libsqlite_la-vdbemem.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbemem.Tpo"; exit 1; \
	fi
#	source='vdbemem.c' object='libsqlite_la-vdbemem.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vdbemem.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbemem.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbemem.o `test -f 'vdbemem.c' || echo '$(srcdir)/'`vdbemem.c

libsqlite_la-vdbemem.obj: vdbemem.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbemem.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbemem.Tpo" \
	  -c -o libsqlite_la-vdbemem.obj `if test -f 'vdbemem.c'; then $(CYGPATH_W) 'vdbemem.c'; else $(CYGPATH_W) '$(srcdir)/vdbemem.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbemem.Tpo" "$(DEPDIR)/libsqlite_la-vdbemem.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbemem.Tpo"; exit 1; \
	fi
#	source='vdbemem.c' object='libsqlite_la-vdbemem.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-vdbemem.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbemem.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbemem.obj `if test -f 'vdbemem.c'; then $(CYGPATH_W) 'vdbemem.c'; else $(CYGPATH_W) '$(srcdir)/vdbemem.c'; fi`

libsqlite_la-vdbemem.lo: vdbemem.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-vdbemem.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-vdbemem.Tpo" \
	  -c -o libsqlite_la-vdbemem.lo `test -f 'vdbemem.c' || echo '$(srcdir)/'`vdbemem.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-vdbemem.Tpo" "$(DEPDIR)/libsqlite_la-vdbemem.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-vdbemem.Tpo"; exit 1; \
	fi
#	source='vdbemem.c' object='libsqlite_la-vdbemem.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-vdbemem.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-vdbemem.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-vdbemem.lo `test -f 'vdbemem.c' || echo '$(srcdir)/'`vdbemem.c

libsqlite_la-where.o: where.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-where.o -MD -MP -MF "$(DEPDIR)/libsqlite_la-where.Tpo" \
	  -c -o libsqlite_la-where.o `test -f 'where.c' || echo '$(srcdir)/'`where.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-where.Tpo" "$(DEPDIR)/libsqlite_la-where.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-where.Tpo"; exit 1; \
	fi
#	source='where.c' object='libsqlite_la-where.o' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-where.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-where.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-where.o `test -f 'where.c' || echo '$(srcdir)/'`where.c

libsqlite_la-where.obj: where.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-where.obj -MD -MP -MF "$(DEPDIR)/libsqlite_la-where.Tpo" \
	  -c -o libsqlite_la-where.obj `if test -f 'where.c'; then $(CYGPATH_W) 'where.c'; else $(CYGPATH_W) '$(srcdir)/where.c'; fi`; \
	then mv -f "$(DEPDIR)/libsqlite_la-where.Tpo" "$(DEPDIR)/libsqlite_la-where.Po"; \
	else rm -f "$(DEPDIR)/libsqlite_la-where.Tpo"; exit 1; \
	fi
#	source='where.c' object='libsqlite_la-where.obj' libtool=no \
#	depfile='$(DEPDIR)/libsqlite_la-where.Po' tmpdepfile='$(DEPDIR)/libsqlite_la-where.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-where.obj `if test -f 'where.c'; then $(CYGPATH_W) 'where.c'; else $(CYGPATH_W) '$(srcdir)/where.c'; fi`

libsqlite_la-where.lo: where.c
	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -MT libsqlite_la-where.lo -MD -MP -MF "$(DEPDIR)/libsqlite_la-where.Tpo" \
	  -c -o libsqlite_la-where.lo `test -f 'where.c' || echo '$(srcdir)/'`where.c; \
	then mv -f "$(DEPDIR)/libsqlite_la-where.Tpo" "$(DEPDIR)/libsqlite_la-where.Plo"; \
	else rm -f "$(DEPDIR)/libsqlite_la-where.Tpo"; exit 1; \
	fi
#	source='where.c' object='libsqlite_la-where.lo' libtool=yes \
#	depfile='$(DEPDIR)/libsqlite_la-where.Plo' tmpdepfile='$(DEPDIR)/libsqlite_la-where.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libsqlite_la_CFLAGS) $(CFLAGS) -c -o libsqlite_la-where.lo `test -f 'where.c' || echo '$(srcdir)/'`where.c

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
#>- DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
#>+ 1
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)

top_distdir = ../../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES)

installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#>- clean: clean-am
#>+ 1
clean: kde-rpo-clean  clean-am

#>- clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
#>- 	mostlyclean-am
#>+ 2
clean-am: clean-bcheck  clean-generic clean-libtool clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am info info-am install \
	install-am install-data install-data-am install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool pdf \
	pdf-am ps ps-am tags uninstall uninstall-am uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 2
KDE_DIST=sqlite3.h os.h keywordhash.h Makefile.in parse.h hash.h vdbeInt.h sqliteInt.h pager.h btree.h os_win.h os_unix.h vdbe.h opcodes.h os_common.h 

#>+ 2
docs-am:

#>+ 6
force-reedit:
		cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  amarok/src/sqlite/Makefile
	cd $(top_srcdir) && perl admin/am_edit amarok/src/sqlite/Makefile.in


#>+ 21
clean-bcheck: 
	rm -f *.bchecktest.cc *.bchecktest.cc.class a.out

bcheck: bcheck-am

bcheck-am:
	@for i in ; do \
	    if test $(srcdir)/$$i -nt $$i.bchecktest.cc; then \
	        echo "int main() {return 0;}" > $$i.bchecktest.cc ; \
	        echo "#include \"$$i\"" >> $$i.bchecktest.cc ; \
	        echo "$$i"; \
	        if ! $(CXX) $(DEFS) -I. -I$(srcdir) -I$(top_builddir) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)  --dump-class-hierarchy -c $$i.bchecktest.cc; then \
	            rm -f $$i.bchecktest.cc; exit 1; \
	        fi ; \
	        echo "" >> $$i.bchecktest.cc.class; \
	        perl $(top_srcdir)/admin/bcheck.pl $$i.bchecktest.cc.class || { rm -f $$i.bchecktest.cc; exit 1; }; \
	        rm -f a.out; \
	    fi ; \
	done


#>+ 3
final:
	$(MAKE) libsqlite_la_OBJECTS="$(libsqlite_la_final_OBJECTS)" all-am

#>+ 3
final-install:
	$(MAKE) libsqlite_la_OBJECTS="$(libsqlite_la_final_OBJECTS)" install-am

#>+ 3
no-final:
	$(MAKE) libsqlite_la_OBJECTS="$(libsqlite_la_nofinal_OBJECTS)" all-am

#>+ 3
no-final-install:
	$(MAKE) libsqlite_la_OBJECTS="$(libsqlite_la_nofinal_OBJECTS)" install-am

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 3
nmcheck: 
nmcheck-am: nmcheck
