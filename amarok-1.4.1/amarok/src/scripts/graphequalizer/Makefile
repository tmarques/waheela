# Makefile.in generated by automake 1.7.9 from Makefile.am.
# KDE tags expanded automatically by am_edit - $Revision: 483858 $ 
# amarok/src/scripts/graphequalizer/Makefile.  Generated from Makefile.in by config.pl.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../../../..
VPATH = .
pkgdatadir = $(datadir)/multimedia
pkglibdir = $(libdir)/multimedia
pkgincludedir = $(includedir)/multimedia
top_builddir = ../../../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c -p
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/eversor/amarok-1.4.1/admin/missing --run aclocal-1.7
ALSALIB_CFLAGS = 
ALSALIB_LIBS = 
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/eversor/amarok-1.4.1/admin/missing --run tar
AR = ar
ARTSCCONFIG = /usr/kde/3.5/bin/artsc-config
AUTOCONF = $(SHELL) $(top_srcdir)/admin/cvs.sh configure || touch configure
AUTODIRS = 
AUTOHEADER = ${SHELL} /home/eversor/amarok-1.4.1/admin/missing --run autoheader
AUTOMAKE = ${SHELL} /home/eversor/amarok-1.4.1/admin/missing --run automake-1.7
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -std=iso9899:1990 -W -Wall -Wchar-subscripts -Wshadow -Wpointer-arith -Wmissing-prototypes -Wwrite-strings -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -O2   -Wformat-security -Wmissing-format-attribute
CFLAGS_NMM = 
CFLAGS_XINE = -I/usr/include
CONF_FILES =  $(top_srcdir)/./admin/configure.in.min $(top_srcdir)/configure.in.in $(top_srcdir)/./amarok/configure.in.bot $(top_srcdir)/./amarok/configure.in.in $(top_srcdir)/configure.in.bot
CPP = gcc -E
CPPFLAGS =  -DQT_THREAD_SUPPORT  -D_REENTRANT
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wno-long-long -Wundef -ansi -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -Wcast-align -Wconversion -Wchar-subscripts -Wall -W -Wpointer-arith -O2 -Wformat-security -Wmissing-format-attribute -Wno-non-virtual-dtor -fno-exceptions -fno-check-new -fno-common -DQT_CLEAN_NAMESPACE -DQT_NO_ASCII_CAST -DQT_NO_STL -DQT_NO_COMPAT -DQT_NO_TRANSLATION
CYGPATH_W = echo
DCOPIDL = /usr/kde/3.5/bin/dcopidl
DCOPIDL2CPP = /usr/kde/3.5/bin/dcopidl2cpp
DCOPIDLNG = /usr/kde/3.5/bin/dcopidlng
DCOP_DEPENDENCIES = $(DCOPIDL) $(DCOPIDLNG)
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DOXYGEN = 
DOXYGEN_PROJECT_NAME = The API Reference
DOXYGEN_PROJECT_NUMBER = Version 3.5.3
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
ENABLE_PERMISSIVE_FLAG = -fpermissive
EXEEXT = 
F77 = g77
FFLAGS = -g -O2
FRAMEWORK_COREAUDIO = 
GMSGFMT = /usr/bin/gmsgfmt
GTK_CONFIG = yes
HAVE_GCC_VISIBILITY = 0
IFP_INCLUDES = 
IFP_LIBS = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL} $(INSTALL_STRIP_FLAG)
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
KCFG_DEPENDENCIES = $(KCONFIG_COMPILER)
KCONFIG_COMPILER = /usr/kde/3.5/bin/kconfig_compiler
KDECONFIG = /usr/kde/3.5/bin/kde-config
KDE_CHECK_PLUGIN = $(KDE_PLUGIN) -rpath $(libdir)
KDE_EXTRA_RPATH = 
KDE_HAS_DOXYGEN = no
KDE_HAVE_DOT = NO
KDE_INCLUDES = -I/usr/kde/3.5/include
KDE_LDFLAGS = -L/usr/kde/3.5/lib
KDE_MT_LDFLAGS = 
KDE_MT_LIBS = -lpthread
KDE_NO_UNDEFINED = -Wl,--no-undefined -Wl,--allow-shlib-undefined
KDE_PLUGIN = -avoid-version -module -no-undefined $(KDE_NO_UNDEFINED) $(KDE_RPATH) $(KDE_MT_LDFLAGS)
KDE_RPATH = -R $(libdir) -R $(kde_libraries) -R $(qt_libraries) -R $(x_libraries)
KDE_USE_CLOSURE_FALSE = 
KDE_USE_CLOSURE_TRUE = #
KDE_USE_FINAL_FALSE = 
KDE_USE_FINAL_TRUE = #
KDE_USE_FPIE = -fPIE
KDE_USE_NMCHECK_FALSE = 
KDE_USE_NMCHECK_TRUE = #
KDE_USE_PIE = -pie
KDE_XSL_STYLESHEET = /usr/kde/3.5/share/apps/ksgmltools2/customization/kde-chunk.xsl
LDFLAGS = 
LDFLAGS_AS_NEEDED = 
LDFLAGS_NEW_DTAGS = 
LDFLAGS_NMM = 
LIBCOMPAT = 
LIBCRYPT = -lcrypt
LIBDL = -ldl
LIBGPOD_CFLAGS = 
LIBGPOD_LIBS = 
LIBJPEG = -ljpeg
LIBNJB_CFLAGS = 
LIBNJB_LIBS = 
LIBOBJS = 
LIBPNG = -lpng -lz -lm
LIBPTHREAD = -lpthread
LIBRESOLV = -lresolv
LIBS = 
LIBSM = -lSM -lICE
LIBSOCKET = 
LIBS_XINE = -L/usr/lib -lxine -lz -lnsl -lpthread -lrt
LIBTOOL = $(SHELL) $(top_builddir)/libtool --silent
LIBUCB = 
LIBUTIL = -lutil
LIBVISUAL_CFLAGS = 
LIBVISUAL_LIBS = 
LIBZ = -lz
LIB_ARTS = -lartskde
LIB_KAB = -lkab
LIB_KABC = -lkabc
LIB_KDECORE = -lkdecore
LIB_KDED = 
LIB_KDEPIM = -lkdepim
LIB_KDEPRINT = -lkdeprint
LIB_KDEUI = -lkdeui
LIB_KDNSSD = -lkdnssd
LIB_KFILE = -lkio
LIB_KFM = 
LIB_KHTML = -lkhtml
LIB_KIMPROXY = -lkimproxy
LIB_KIO = -lkio
LIB_KJS = -lkjs
LIB_KNEWSTUFF = -lknewstuff
LIB_KPARTS = -lkparts
LIB_KSPELL = -lkspell
LIB_KSYCOCA = -lkio
LIB_KUNITTEST = -lkunittest
LIB_KUTILS = -lkutils
LIB_POLL = 
LIB_QPE = 
LIB_QT = -lqt-mt  $(LIBZ) $(LIBPNG) -lXext $(LIB_X11) $(LIBSM) -lpthread
LIB_SMB = -lsmb
LIB_SQLITE = 
LIB_TUNEPIMP = 
LIB_X11 = -lX11 $(LIBSOCKET)
LIB_XEXT = -lXext
LIB_XRENDER = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/eversor/amarok-1.4.1/admin/missing --run makeinfo
MAKEKDEWIDGETS = /usr/kde/3.5/bin/makekdewidgets
MCOPIDL = /usr/kde/3.5/bin/mcopidl
MEINPROC = /usr/kde/3.5/bin/meinproc
MOC = /usr/qt/3/bin/moc
MP4V2_INCLUDES = 
MP4V2_LIBS = 
MSGFMT = /usr/bin/gmsgfmt
MYSQL_CONFIG = 
NOOPT_CFLAGS = -O0
NOOPT_CXXFLAGS = -O0
OBJEXT = o
PACKAGE = multimedia
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PKGCONFIGFOUND = yes
PKG_CONFIG = /usr/bin/pkg-config
POSTGRESQL_CONFIG = 
QTDOCDIR = NO
QTE_NORTTI = 
QT_INCLUDES = -I/usr/qt/3/include
QT_LDFLAGS = -L/usr/qt/3/lib
RANLIB = ranlib
RUBY = /usr/bin/ruby
SDL_CONFIG = yes
SET_MAKE = 
SHELL = /bin/sh
SQLITE_CFLAGS = 
SQLITE_LIBS = 
STRIP = strip
TAGLIB_CONFIG = /usr/bin/taglib-config
TOPSUBDIRS =  amarok doc po
UIC = /usr/qt/3/bin/uic -L $(kde_widgetdir) -nounload
UIC_TR = tr2i18n
USER_INCLUDES = 
USER_LDFLAGS = 
USE_EXCEPTIONS = -fexceptions
USE_RTTI = 
USE_THREADS = 
VERSION = 3.5.3
WOVERLOADED_VIRTUAL = 
XGETTEXT = /usr/bin/xgettext
XINE_CONFIG = yes
XMLLINT = /usr/bin/xmllint
XMMS_CONFIG = 
X_EXTRA_LIBS = 
X_INCLUDES = -I.
X_LDFLAGS = -L/usr/lib
X_PRE_LIBS = 
X_RPATH = -R $(x_libraries)
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = g77
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
all_includes = -I/usr/kde/3.5/include -I/usr/qt/3/include -I. 
all_libraries = -L/usr/kde/3.5/lib -L/usr/qt/3/lib -L/usr/lib   
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
amarok_SUBDIR_included_FALSE = #
amarok_SUBDIR_included_TRUE = 
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
doc_SUBDIR_included_FALSE = #
doc_SUBDIR_included_TRUE = 
enable_mysql_FALSE = 
enable_mysql_TRUE = #
enable_postgresql_FALSE = 
enable_postgresql_TRUE = #
exec_prefix = ${prefix}
gl_libs = -lGL
gtk_cflags = 
gtk_libs = 
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
include_ARTS_FALSE = #
include_ARTS_TRUE = 
include_x11_FALSE = #
include_x11_TRUE = 
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/eversor/amarok-1.4.1/admin/install-sh
kde_appsdir = ${datadir}/applnk
kde_bindir = ${exec_prefix}/bin
kde_confdir = ${datadir}/config
kde_datadir = ${datadir}/apps
kde_htmldir = ${datadir}/doc/HTML
kde_icondir = ${datadir}/icons
kde_includes = /usr/kde/3.5/include
kde_kcfgdir = ${datadir}/config.kcfg
kde_libraries = /usr/kde/3.5/lib
kde_libs_htmldir = /usr/kde/3.5/share/doc/HTML
kde_libs_prefix = /usr/kde/3.5
kde_locale = ${datadir}/locale
kde_mimedir = ${datadir}/mimelnk
kde_moduledir = ${libdir}/kde3
kde_qtver = 3
kde_servicesdir = ${datadir}/services
kde_servicetypesdir = ${datadir}/servicetypes
kde_sounddir = ${datadir}/sounds
kde_styledir = ${libdir}/kde3/plugins/styles
kde_templatesdir = ${datadir}/templates
kde_wallpaperdir = ${datadir}/wallpapers
kde_widgetdir = /usr/kde/3.5/lib/kde3/plugins/designer
kdeinitdir = $(kde_moduledir)
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mysql_includes = 
mysql_libs = 
oldincludedir = /usr/include
po_SUBDIR_included_FALSE = #
po_SUBDIR_included_TRUE = 
postgresql_includes = 
postgresql_libs = 
prefix = /usr/kde/3.5
program_transform_name = s,x,x,
qt_includes = /usr/qt/3/include
qt_libraries = /usr/qt/3/lib
sbindir = ${exec_prefix}/sbin
sdl_cflags = -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
sdl_libs = -lSDL -lpthread
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
taglib_includes = -I/usr/include/taglib
taglib_libs = -L/usr/lib -ltag
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
unsermake_enable_pch_FALSE = 
unsermake_enable_pch_TRUE = #
with_helix_FALSE = 
with_helix_TRUE = #
with_ifp_FALSE = 
with_ifp_TRUE = #
with_included_sqlite_FALSE = #
with_included_sqlite_TRUE = 
with_konqsidebar_FALSE = #
with_konqsidebar_TRUE = 
with_libgpod_FALSE = 
with_libgpod_TRUE = #
with_libnjb_FALSE = 
with_libnjb_TRUE = #
with_libvisual_FALSE = 
with_libvisual_TRUE = #
with_mp4v2_FALSE = 
with_mp4v2_TRUE = #
with_nmm_FALSE = 
with_nmm_TRUE = #
with_xine_FALSE = #
with_xine_TRUE = 
with_xmmswrapper_FALSE = 
with_xmmswrapper_TRUE = #
x_includes = .
x_libraries = /usr/lib
xdg_appsdir = ${datadir}/applications/kde
xdg_directorydir = ${datadir}/desktop-directories
xdg_menudir = ${sysconfdir}/xdg/menus
xmms_cflags = 
xmms_libs = 
graphequalizerdir = $(kde_datadir)/amarok/scripts/graphequalizer

graphequalizer_PROGRAMS = graphequalizer

INCLUDES = \
        $(all_includes)



# eqdialog.ui.h removed because of automake turning it into just '.h' for some reason
# and then complaining about its inexistence
#>- graphequalizer_SOURCES = \
#>-         equalizercanvasview.cpp \
#>-         eqdialog.ui \
#>-         stdinreader.h \
#>-         main.cpp
#>+ 5
graphequalizer_SOURCES=\
        equalizercanvasview.cpp \
         \
        stdinreader.h \
        main.cpp eqdialog.cpp


graphequalizer_DATA = README

graphequalizer_LDADD = \
        $(LIB_QT) \
        $(LIB_KDEUI) \
        $(LIB_KDECORE)


graphequalizer_LDFLAGS = $(all_libraries) $(KDE_RPATH)

#>- METASOURCES = AUTO
subdir = amarok/src/scripts/graphequalizer
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
graphequalizer_PROGRAMS = graphequalizer$(EXEEXT)
PROGRAMS = $(graphequalizer_PROGRAMS)

am_graphequalizer_OBJECTS = equalizercanvasview.$(OBJEXT) main.$(OBJEXT)
#>- graphequalizer_OBJECTS = $(am_graphequalizer_OBJECTS)
#>+ 5
graphequalizer_final_OBJECTS = graphequalizer.all_cpp.o 
graphequalizer_nofinal_OBJECTS = equalizercanvasview.$(OBJEXT) main.$(OBJEXT) eqdialog.$(OBJEXT)\
stdinreader.moc.o 
graphequalizer_OBJECTS = $(graphequalizer_nofinal_OBJECTS)
#graphequalizer_OBJECTS = $(graphequalizer_final_OBJECTS)
graphequalizer_DEPENDENCIES =

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/admin/depcomp
am__depfiles_maybe = depfiles
#>- DEP_FILES = ./$(DEPDIR)/equalizercanvasview.Po \
#>- 	./$(DEPDIR)/main.Po
#>+ 4
#DEP_FILES =  $(DEPDIR)/eqdialog.P $(DEPDIR)/stdinreader.moc.P  $(DEPDIR)/graphequalizer.all_cpp.P ./$(DEPDIR)/equalizercanvasview.Po \
#		./$(DEPDIR)/main.Po
DEP_FILES =  $(DEPDIR)/eqdialog.P $(DEPDIR)/stdinreader.moc.P ./$(DEPDIR)/equalizercanvasview.Po \
		./$(DEPDIR)/main.Po
#>- CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 2
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \
#>- 	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
#>- 	$(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 3
LTCXXCOMPILE = $(LIBTOOL) --mode=compile --tag=CXX $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
#>- 	$(AM_LDFLAGS) $(LDFLAGS) -o $@
#>+ 2
CXXLINK = $(LIBTOOL) --mode=link --tag=CXX $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(graphequalizer_SOURCES)
DATA = $(graphequalizer_DATA)

DIST_COMMON = README $(srcdir)/Makefile.in Makefile.am
SOURCES = $(graphequalizer_SOURCES)

#>- all: all-am
#>+ 1
all: docs-am  all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
#>- 	cd $(top_srcdir) && \
#>- 	  $(AUTOMAKE) --gnu  amarok/src/scripts/graphequalizer/Makefile
#>+ 3
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  amarok/src/scripts/graphequalizer/Makefile
	cd $(top_srcdir) && perl admin/am_edit amarok/src/scripts/graphequalizer/Makefile.in
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
graphequalizerPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-graphequalizerPROGRAMS: $(graphequalizer_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(graphequalizerdir)
	@list='$(graphequalizer_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(graphequalizerPROGRAMS_INSTALL) $$p $(DESTDIR)$(graphequalizerdir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(graphequalizerPROGRAMS_INSTALL) $$p $(DESTDIR)$(graphequalizerdir)/$$f || exit 1; \
	  else :; fi; \
	done

uninstall-graphequalizerPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(graphequalizer_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(graphequalizerdir)/$$f"; \
	  rm -f $(DESTDIR)$(graphequalizerdir)/$$f; \
	done

clean-graphequalizerPROGRAMS:
	@list='$(graphequalizer_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
graphequalizer$(EXEEXT): $(graphequalizer_OBJECTS) $(graphequalizer_DEPENDENCIES) 
	@rm -f graphequalizer$(EXEEXT)
	$(CXXLINK) $(graphequalizer_LDFLAGS) $(graphequalizer_OBJECTS) $(graphequalizer_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/equalizercanvasview.Po
include ./$(DEPDIR)/main.Po

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=yes \
#	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
graphequalizerDATA_INSTALL = $(INSTALL_DATA)
install-graphequalizerDATA: $(graphequalizer_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(graphequalizerdir)
	@list='$(graphequalizer_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(graphequalizerDATA_INSTALL) $$d$$p $(DESTDIR)$(graphequalizerdir)/$$f"; \
	  $(graphequalizerDATA_INSTALL) $$d$$p $(DESTDIR)$(graphequalizerdir)/$$f; \
	done

uninstall-graphequalizerDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(graphequalizer_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(graphequalizerdir)/$$f"; \
	  rm -f $(DESTDIR)$(graphequalizerdir)/$$f; \
	done

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
#>- DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
#>+ 1
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)

top_distdir = ../../../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) $(DATA)

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(graphequalizerdir) $(DESTDIR)$(graphequalizerdir)
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#>- clean: clean-am
#>+ 1
clean: kde-rpo-clean  clean-am

#>- clean-am: clean-generic clean-graphequalizerPROGRAMS clean-libtool \
#>- 	mostlyclean-am
#>+ 2
clean-am: clean-metasources clean-ui clean-bcheck clean-final  clean-generic clean-graphequalizerPROGRAMS clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am: install-graphequalizerDATA \
	install-graphequalizerPROGRAMS

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-graphequalizerDATA \
	uninstall-graphequalizerPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-graphequalizerPROGRAMS clean-libtool ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am info info-am install \
	install-am install-data install-data-am install-exec \
	install-exec-am install-graphequalizerDATA \
	install-graphequalizerPROGRAMS install-info install-info-am \
	install-man install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-graphequalizerDATA \
	uninstall-graphequalizerPROGRAMS uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 3
stdinreader.moc.cpp: $(srcdir)/stdinreader.h
	$(MOC) $(srcdir)/stdinreader.h -o stdinreader.moc.cpp

#>+ 2
mocs: stdinreader.moc.cpp

#>+ 3
equalizerdialog.moc: $(srcdir)/equalizerdialog.h
	$(MOC) $(srcdir)/equalizerdialog.h -o equalizerdialog.moc

#>+ 2
mocs: equalizerdialog.moc

#>+ 3
equalizercanvasview.moc: $(srcdir)/equalizercanvasview.h
	$(MOC) $(srcdir)/equalizercanvasview.h -o equalizercanvasview.moc

#>+ 2
mocs: equalizercanvasview.moc

#>+ 3
clean-metasources:
	-rm -f  stdinreader.moc.cpp equalizerdialog.moc equalizercanvasview.moc

#>+ 2
KDE_DIST=equalizerdialog.cpp eqdialog.ui.h Makefile.in equalizercanvasview.h eqdialog.ui equalizerdialog.h 

#>+ 4
clean-ui:
	-rm -f \
	eqdialog.cpp eqdialog.h eqdialog.moc 

#>+ 2
docs-am:

#>+ 6
force-reedit:
		cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  amarok/src/scripts/graphequalizer/Makefile
	cd $(top_srcdir) && perl admin/am_edit amarok/src/scripts/graphequalizer/Makefile.in


#>+ 21
clean-bcheck: 
	rm -f *.bchecktest.cc *.bchecktest.cc.class a.out

bcheck: bcheck-am

bcheck-am:
	@for i in ; do \
	    if test $(srcdir)/$$i -nt $$i.bchecktest.cc; then \
	        echo "int main() {return 0;}" > $$i.bchecktest.cc ; \
	        echo "#include \"$$i\"" >> $$i.bchecktest.cc ; \
	        echo "$$i"; \
	        if ! $(CXXCOMPILE)  --dump-class-hierarchy -c $$i.bchecktest.cc; then \
	            rm -f $$i.bchecktest.cc; exit 1; \
	        fi ; \
	        echo "" >> $$i.bchecktest.cc.class; \
	        perl $(top_srcdir)/admin/bcheck.pl $$i.bchecktest.cc.class || { rm -f $$i.bchecktest.cc; exit 1; }; \
	        rm -f a.out; \
	    fi ; \
	done


#>+ 11
graphequalizer.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/equalizercanvasview.cpp $(srcdir)/main.cpp eqdialog.cpp stdinreader.moc.cpp  eqdialog.moc equalizercanvasview.moc
	@echo 'creating graphequalizer.all_cpp.cpp ...'; \
	rm -f graphequalizer.all_cpp.files graphequalizer.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> graphequalizer.all_cpp.final; \
	for file in equalizercanvasview.cpp main.cpp eqdialog.cpp stdinreader.moc.cpp ; do \
	  echo "#include \"$$file\"" >> graphequalizer.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> graphequalizer.all_cpp.final; \
	done; \
	cat graphequalizer.all_cpp.final graphequalizer.all_cpp.files > graphequalizer.all_cpp.cpp; \
	rm -f graphequalizer.all_cpp.final graphequalizer.all_cpp.files

#>+ 3
clean-final:
	-rm -f graphequalizer.all_cpp.cpp

#>+ 3
final:
	$(MAKE) graphequalizer_OBJECTS="$(graphequalizer_final_OBJECTS)" all-am

#>+ 3
final-install:
	$(MAKE) graphequalizer_OBJECTS="$(graphequalizer_final_OBJECTS)" install-am

#>+ 3
no-final:
	$(MAKE) graphequalizer_OBJECTS="$(graphequalizer_nofinal_OBJECTS)" all-am

#>+ 3
no-final-install:
	$(MAKE) graphequalizer_OBJECTS="$(graphequalizer_nofinal_OBJECTS)" install-am

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 10
nmcheck: 
equalizerdialog.o: equalizerdialog.moc 
$(srcdir)/stdinreader.h: eqdialog.h 
nmcheck-am: nmcheck
$(srcdir)/main.cpp: eqdialog.h 
equalizercanvasview.o: equalizercanvasview.moc 
$(srcdir)/equalizercanvasview.cpp: eqdialog.h 
equalizerdialog.lo: equalizerdialog.moc 
equalizercanvasview.lo: equalizercanvasview.moc 

#>+ 15
eqdialog.cpp: $(srcdir)/eqdialog.ui eqdialog.h eqdialog.moc
	rm -f eqdialog.cpp
	echo '#include <kdialog.h>' > eqdialog.cpp
	echo '#include <klocale.h>' >> eqdialog.cpp
	$(UIC) -tr ${UIC_TR} -i eqdialog.h $(srcdir)/eqdialog.ui > eqdialog.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" eqdialog.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_eqdialog,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> eqdialog.cpp ;\
	rm -f eqdialog.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "eqdialog.moc"' >> eqdialog.cpp; else rm -f eqdialog.cpp ; exit $$ret ; fi

eqdialog.h: $(srcdir)/eqdialog.ui
	rm -rf eqdialog.h;
	$(UIC) $(srcdir)/eqdialog.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> eqdialog.h ;
eqdialog.moc: eqdialog.h
	$(MOC) eqdialog.h -o eqdialog.moc
