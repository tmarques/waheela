/****************************************************************************
** QueueLabel meta object code from reading C++ file 'queueLabel.h'
**
** Created: Fri Mar 23 10:51:22 2007
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.6   edited Mar 8 17:43 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "queueLabel.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *QueueLabel::className() const
{
    return "QueueLabel";
}

QMetaObject *QueueLabel::metaObj = 0;
static QMetaObjectCleanUp cleanUp_QueueLabel( "QueueLabel", &QueueLabel::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString QueueLabel::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QueueLabel", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString QueueLabel::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QueueLabel", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* QueueLabel::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QLabel::staticMetaObject();
    static const QUMethod slot_0 = {"update", 0, 0 };
    static const QUParameter param_slot_1[] = {
	{ "num", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_1 = {"setNum", 1, param_slot_1 };
    static const QUParameter param_slot_2[] = {
	{ 0, &static_QUType_ptr, "QEvent", QUParameter::In }
    };
    static const QUMethod slot_2 = {"enterEvent", 1, param_slot_2 };
    static const QUParameter param_slot_3[] = {
	{ 0, &static_QUType_ptr, "QEvent", QUParameter::In }
    };
    static const QUMethod slot_3 = {"leaveEvent", 1, param_slot_3 };
    static const QUMethod slot_4 = {"aboutToShow", 0, 0 };
    static const QUParameter param_slot_5[] = {
	{ "artist", &static_QUType_QString, 0, QUParameter::In },
	{ "album", &static_QUType_QString, 0, QUParameter::In }
    };
    static const QUMethod slot_5 = {"slotCoverChanged", 2, param_slot_5 };
    static const QMetaData slot_tbl[] = {
	{ "update()", &slot_0, QMetaData::Public },
	{ "setNum(int)", &slot_1, QMetaData::Public },
	{ "enterEvent(QEvent*)", &slot_2, QMetaData::Public },
	{ "leaveEvent(QEvent*)", &slot_3, QMetaData::Public },
	{ "aboutToShow()", &slot_4, QMetaData::Private },
	{ "slotCoverChanged(const QString&,const QString&)", &slot_5, QMetaData::Private }
    };
    static const QUParameter param_signal_0[] = {
	{ 0, &static_QUType_ptr, "PLItemList", QUParameter::In },
	{ 0, &static_QUType_ptr, "PLItemList", QUParameter::In }
    };
    static const QUMethod signal_0 = {"queueChanged", 2, param_signal_0 };
    static const QMetaData signal_tbl[] = {
	{ "queueChanged(const PLItemList&,const PLItemList&)", &signal_0, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"QueueLabel", parentObject,
	slot_tbl, 6,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_QueueLabel.setMetaObject( metaObj );
    return metaObj;
}

void* QueueLabel::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "QueueLabel" ) )
	return this;
    return QLabel::qt_cast( clname );
}

#include <qobjectdefs.h>
#include <qsignalslotimp.h>

// SIGNAL queueChanged
void QueueLabel::queueChanged( const PLItemList& t0, const PLItemList& t1 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 0 );
    if ( !clist )
	return;
    QUObject o[3];
    static_QUType_ptr.set(o+1,&t0);
    static_QUType_ptr.set(o+2,&t1);
    activate_signal( clist, o );
}

bool QueueLabel::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: update(); break;
    case 1: setNum((int)static_QUType_int.get(_o+1)); break;
    case 2: enterEvent((QEvent*)static_QUType_ptr.get(_o+1)); break;
    case 3: leaveEvent((QEvent*)static_QUType_ptr.get(_o+1)); break;
    case 4: aboutToShow(); break;
    case 5: slotCoverChanged((const QString&)static_QUType_QString.get(_o+1),(const QString&)static_QUType_QString.get(_o+2)); break;
    default:
	return QLabel::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool QueueLabel::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: queueChanged((const PLItemList&)*((const PLItemList*)static_QUType_ptr.get(_o+1)),(const PLItemList&)*((const PLItemList*)static_QUType_ptr.get(_o+2))); break;
    default:
	return QLabel::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool QueueLabel::qt_property( int id, int f, QVariant* v)
{
    return QLabel::qt_property( id, f, v);
}

bool QueueLabel::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
