<chapter id="advanced-features">
<title
>Caratteristiche avanzate di amaroK</title>


<sect1 id="keybd-shortcuts">
<title
>Scorciatoie da tastiera</title>

<para
>&amarok; usa scorciatoie da tastiera come la maggior parte delle altre applicazioni. Sotto trovi una lista di queste scorciatoie e le rispettive azioni. Le scorciatoie globali possono essere configurate facendo click con il pulsante destro del mouse nella finestra del lettore e selezionando <guimenuitem
>Configura scorciatoie globali...</guimenuitem
>. Le scorciatoie di &amarok; possono essere configurate facendo click con il pulsante destro del mouse nella finestra del lettore e selezionando <guimenuitem
>Configura scorciatoie...</guimenuitem
>.</para>

<tip
><para
>Puoi programmare i tasti multimediali affinch√© funzionino come scorciatoie per &amarok; facendo divenire la tua tastiera un centro di controllo di &amarok;.</para
></tip>

<para
>Le scorciatoie globali sono:</para>

<informaltable>
<tgroup cols="2">
<thead>

<row>
<entry
>Combinazione tasti</entry>
<entry
>Azione</entry>
</row>
</thead>
<tbody>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>X</keycap
></keycombo
></entry>
<entry
>Play</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>C</keycap
></keycombo
></entry>
<entry
>Pausa</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>V</keycap
></keycombo
></entry>
<entry
>Stop</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>B</keycap
></keycombo
></entry>
<entry
>Prossima traccia</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>Z</keycap
></keycombo
></entry>
<entry
>Traccia precedente</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>tasto + in tast.num.</keycap
></keycombo
></entry>
<entry
>Aumenta volume</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>tasto - in tast.num.</keycap
></keycombo
></entry>
<entry
>Diminuisci volume</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>Shift</keycap
><keycap
>KP_Add</keycap
></keycombo
></entry>
<entry
>Cerca in avanti</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>Shift</keycap
><keycap
>KP_Subtract</keycap
></keycombo
></entry>
<entry
>Cerca indietro</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>A</keycap
></keycombo
></entry>
<entry
>Aggiungi file</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>P</keycap
></keycombo
></entry>
<entry
>Attiva/disattiva playlist</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>O</keycap
></keycombo
></entry>
<entry
>Mostra OSD</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Win</keycap
><keycap
>M</keycap
></keycombo
></entry>
<entry
>Volume muto</entry>
</row>

</tbody>
</tgroup>
</informaltable>

<para
>Le scorciatoie di &amarok; sono:</para>

<informaltable>
<tgroup cols="2">
<thead>

<row>
<entry
>Combinazione tasti</entry>
<entry
>Azione</entry>
</row>
</thead>
<tbody>

<row>
<entry
><keycombo
><keycap
>Ctrl</keycap
><keycap
>C</keycap
></keycombo
></entry>
<entry
>Copia</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Ctrl</keycap
><keycap
>invio in tast.num.</keycap
></keycombo
></entry>
<entry
>Vai all'attuale</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Ctrl</keycap
><keycap
>D</keycap
></keycombo
></entry>
<entry
>Accoda tracce selezionate</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Ctrl</keycap
><keycap
>Q</keycap
></keycombo
></entry>
<entry
>Chiudi</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Ctrl</keycap
><keycap
>Shift</keycap
><keycap
>Z</keycap
></keycombo
></entry>
<entry
>Ripeti</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Ctrl</keycap
><keycap
>S</keycap
></keycombo
></entry>
<entry
>Salva la playlist</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Ctrl</keycap
><keycap
>A</keycap
></keycombo
></entry>
<entry
>Seleziona tutto</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Ctrl</keycap
><keycap
>M</keycap
></keycombo
></entry>
<entry
>Mostra la barra dei menu</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Ctrl</keycap
><keycap
>H</keycap
></keycombo
></entry>
<entry
>Mescola</entry>
</row>

<row>
<entry
><keycombo
><keycap
>Ctrl</keycap
><keycap
>Z</keycap
></keycombo
></entry>
<entry
>Annulla</entry>
</row>


</tbody>
</tgroup>
</informaltable>


<para
>Le scorciatoie per il navigatore della playlist sono:</para>

<informaltable>
<tgroup cols="2">
<thead>

<row>
<entry
>Combinazione tasti</entry>
<entry
>Azione</entry>
</row>
</thead>
<tbody>

<row>
<entry
><keycap
>Barra spazio</keycap
></entry>
<entry
>Carica playlist</entry>
</row>

<row>
<entry
><keycap
>F2</keycap
></entry>
<entry
>Rinomina playlist</entry>
</row>

<row>
<entry
><keycap
>Tasto di cancellazione a sinistra</keycap
></entry>
<entry
>Rimuove playlist</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</sect1>

<sect1 id="the-dcop-interface">
<title
>L'interfaccia DCOP</title>

<para
>Con l'interfaccia DCOP di amaroK, puoi controllare facilmente amaroK con script tuoi.</para>

<para
>The DCOP interface for amaroK has many generic calls that may be found in other KDE applications. This section is divided into six tables and is intended to describe the DCOP calls of the collection, contextbrowser, player, playlist, playlistbrowser and scripts. An example of the <quote
>pause</quote
> dcop call would look like:</para>

<para
><prompt
>&percnt;</prompt
>dcop amarok player pause</para>

<sect2 id="dcop-collection">
<title
>dcop amarok collection</title>

<informaltable>
<tgroup cols="2">
<thead>

<row>
<entry
>Chiamata DCOP</entry>
<entry
>Azione</entry>
</row>
</thead>
<tbody>

<row>
<entry
>int totalAlbums()</entry>
<entry
>Returns the total of albums in the collection.</entry>
</row>

<row>
<entry
>int totalArtists()</entry>
<entry
>Returns the total of artists in the collection.</entry>
</row>

<row>
<entry
>int totalCompilations()</entry>
<entry
>Returns the total of compilations in the collection.</entry>
</row>

<row>
<entry
>int totalGenres()</entry>
<entry
>Returns the total of genres in the collection.</entry>
</row>

<row>
<entry
>int totalTracks()</entry>
<entry
>Returns the total of tracks in the collection.</entry>
</row>

<row>
<entry
>QString query( QString sql)</entry>
<entry
>Queries the database via SQL.</entry>
</row>

<row>
<entry
>QStringList similarArtists( int artists )</entry>
<entry
>Return similar artists of the current tracks, limit to int artists.</entry>
</row>

<row>
<entry
>void migrateFile( QString oldURL, QString newURL )</entry>
<entry
>Move a file in the collection, keeping stats intact.</entry>
</row>

<row>
<entry
>void scanCollection()</entry>
<entry
>Scan the collection.</entry>
</row>

<row>
<entry
>void scanCollectionChanges()</entry>
<entry
>Scan the collection for changes only.</entry>
</row>


</tbody>
</tgroup>
</informaltable>

</sect2>

<sect2 id="dcop-context">
<title
>dcop amarok contextbrowser</title>

<informaltable>
<tgroup cols="2">
<thead>

<row>
<entry
>Chiamata DCOP</entry>
<entry
>Azione</entry>
</row>
</thead>
<tbody>

<row>
<entry
>void showCurrentTrack()</entry>
<entry
>Show the current track in the context browser.</entry>
</row>

<row>
<entry
>void showLyrics()</entry>
<entry
>Show the lyrics tab in the context browser.</entry>
</row>

<row>
<entry
>void showWiki()</entry>
<entry
>Show the wikipedia tab in the context browser.</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</sect2>

<sect2 id="dcop-player">
<title
>dcop amarok player</title>

<informaltable>
<tgroup cols="2">
<thead>

<row>
<entry
>Chiamata DCOP</entry>
<entry
>Azione</entry>
</row>
</thead>
<tbody>

<row>
<entry
>bool dynamicModeStatus()</entry>
<entry
>Return dynamic mode status.</entry>
</row>

<row>
<entry
>bool equalizerEnabled()</entry>
<entry
>Return the equalizer status.</entry>
</row>

<row>
<entry
>bool isPlaying()</entry>
<entry
>Return true if something is playing now.</entry>
</row>

<row>
<entry
>bool randomModeStatus()</entry>
<entry
>Return random mode status.</entry>
</row>

<row>
<entry
>bool repeatPlaylistStatus()</entry>
<entry
>Return repeat playlist status.</entry>
</row>

<row>
<entry
>bool repeatTrackStatus()</entry>
<entry
>Return repeat track status.</entry>
</row>

<row>
<entry
>int getVolume()</entry>
<entry
>Return volume in range 0-100%.</entry>
</row>

<row>
<entry
>int sampleRate()</entry>
<entry
>Return the sample rate of the currently playing track.</entry>
</row>

<row>
<entry
>int score()</entry>
<entry
>Return the score of the currently playing track.</entry>
</row>

<row>
<entry
>int status()</entry>
<entry
>Return playback status: 0 - stopped, 1 - paused, 2 - playing.</entry>
</row>

<row>
<entry
>int trackCurrentTime()</entry>
<entry
>Return current play position in seconds.</entry>
</row>

<row>
<entry
>int trackPlayCounter()</entry>
<entry
>Return play counter for current song.</entry>
</row>

<row>
<entry
>int trackTotalTime()</entry>
<entry
>Return track length in seconds.</entry>
</row>

<row>
<entry
>QString album()</entry>
<entry
>Return the album of the currently playing track.</entry>
</row>

<row>
<entry
>QString artist()</entry>
<entry
>Return the artist of the currently playing track.</entry>
</row>

<row>
<entry
>QString bitrate()</entry>
<entry
>Return the bitrate of the currently playing track (XX kbps).</entry>
</row>

<row>
<entry
>QString comment()</entry>
<entry
>Return the comment of the currently playing track.</entry>
</row>

<row>
<entry
>QString coverImage()</entry>
<entry
>Return the encoded URL of the current track's cover image </entry>
</row>

<row>
<entry
>QString currentTime()</entry>
<entry
>Return the position of the currently playing track ([h:]mm:ss format).</entry>
</row>

<row>
<entry
>QString encodedURL()</entry>
<entry
>Return the encoded URL of the currently playing track.</entry>
</row>

<row>
<entry
>QString engine()</entry>
<entry
>Return the current sound engine.</entry>
</row>

<row>
<entry
>QString genre()</entry>
<entry
>Return the genre of the currently playing track.</entry>
</row>

<row>
<entry
>QString lyrics()</entry>
<entry
>Return the lyrics of the currently playing track.</entry>
</row>

<row>
<entry
>QString lyricsByPath( QString path )</entry>
<entry
>Return the lyrics of a track by path.</entry>
</row>

<row>
<entry
>QString nowPlaying()</entry>
<entry
>The title of now playing media.</entry>
</row>

<row>
<entry
>QString path()</entry>
<entry
>Return the unencoded path of the currently playing track.</entry>
</row>

<row>
<entry
>QString setContextStyle( QString )</entry>
<entry
>Set the CSS style for the context browser.</entry>
</row>

<row>
<entry
>QString title()</entry>
<entry
>Return the title of the currently playing track.</entry>
</row>

<row>
<entry
>QString totalTime()</entry>
<entry
>Return the total length of the currently playing track ([h:]mm:ss format).</entry>
</row>

<row>
<entry
>QString track()</entry>
<entry
>Return the track number.</entry>
</row>

<row>
<entry
>QString type()</entry>
<entry
>Return the file type.</entry>
</row>

<row>
<entry
>QString year()</entry>
<entry
>Return the year of the currently playing track.</entry>
</row>

<row>
<entry
>void configEqualizer()</entry>
<entry
>Toggle equalizer config dialog.</entry>
</row>

<row>
<entry
>void enableDynamicMode(bool enable)</entry>
<entry
>Switch Dynamic Mode on or off.</entry>
</row>

<row>
<entry
>void enableOSD(bool enable)</entry>
<entry
>Switch OSD display on or off.</entry>
</row>

<row>
<entry
>void enableRandomMode(bool enable)</entry>
<entry
>Switch Random Mode on or off.</entry>
</row>

<row>
<entry
>void enableRepeatPlaylist(bool enable)</entry>
<entry
>Switch Repeat Playlist on or off.</entry>
</row>

<row>
<entry
>void enableRepeatTrack(bool enable)</entry>
<entry
>Switch Repeat Track on or off.</entry>
</row>

<row>
<entry
>void mediaDeviceMount()</entry>
<entry
>Sets the command used for mounting media device.</entry>
</row>

<row>
<entry
>void mediaDeviceUmount()</entry>
<entry
>Sets the comment used for umounting media device.</entry>
</row>

<row>
<entry
>void mute()</entry>
<entry
>Toggle mute.</entry>
</row>

<row>
<entry
>void next()</entry>
<entry
>Equivalent to pressing "Next" button.</entry>
</row>

<row>
<entry
>void pause()</entry>
<entry
>Equivalent to pressing "Pause" button.</entry>
</row>

<row>
<entry
>void play()</entry>
<entry
>Equivalent to pressing "Play" button.</entry>
</row>

<row>
<entry
>void playPause()</entry>
<entry
>Toggle play/pause state (good for mm keyboard users) </entry>
</row>

<row>
<entry
>void prev()</entry>
<entry
>Equivalent to pressing "Prev" button.</entry>
</row>

<row>
<entry
>void queueForTransfer( KURL url )</entry>
<entry
>Queue file for transfer to Media Device.</entry>
</row>

<row>
<entry
>void seek(int s)</entry>
<entry
>Seek track to seconds position.</entry>
</row>

<row>
<entry
>void seekRelative(int s)</entry>
<entry
>Seek to a position relative to the current track position.</entry>
</row>

<row>
<entry
>void setEqualizer(int, int, int, int, int, int, int, int, int, int, int)</entry>
<entry
>Set the equalizer bands </entry>
</row>

<row>
<entry
>void setEqualizerEnabled( bool active )</entry>
<entry
>Toggle equalizer.</entry>
</row>

<row>
<entry
>void setEqualizerPreset( QString name )</entry>
<entry
>Set the equalizer preset </entry>
</row>

<row>
<entry
>void setLyricsByPath( QString url, QString lyrics )</entry>
<entry
>Set the lyrics of a track by it's path.</entry>
</row>

<row>
<entry
>void setScore( int score )</entry>
<entry
>Set the score of the currently playing track.</entry>
</row>

<row>
<entry
>void setScoreByPath( QString url, int score )</entry>
<entry
>Set the score of a track by it's path.</entry>
</row>

<row>
<entry
>void setVolume(int volume)</entry>
<entry
>Set volume in range 0-100%.</entry>
</row>

<row>
<entry
>void showBrowser( QString browser )</entry>
<entry
>Shows browsers in the playlist window</entry>
</row>

<row>
<entry
>void showOSD()</entry>
<entry
>Show the OSD display on the screen.</entry>
</row>

<row>
<entry
>void stop()</entry>
<entry
>Equivalent to pressing "Stop" button.</entry>
</row>

<row>
<entry
>void transferDeviceFiles()</entry>
<entry
>Transfer files to media device.</entry>
</row>

<row>
<entry
>void volumeDown()</entry>
<entry
>Decrease volume by a reasonable step.</entry>
</row>

<row>
<entry
>void volumeUp()</entry>
<entry
>Increase volume by a reasonable step.</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</sect2>

<sect2 id="dcop-playlist">
<title
>dcop amarok playlist</title>

<informaltable>
<tgroup cols="2">
<thead>

<row>
<entry
>Chiamata DCOP</entry>
<entry
>Azione</entry>
</row>
</thead>
<tbody>

<row>
<entry
>int getActiveIndex()</entry>
<entry
>Return the index of the currently active track. -1 if none.</entry>
</row>

<row>
<entry
>int getTotalTrackCount()</entry>
<entry
>Return number of tracks in playlist. 0 if none.</entry>
</row>

<row>
<entry
>QString saveCurrentPlaylist()</entry>
<entry
>Saves the current playlist to current.xml and returns its path.</entry>
</row>

<row>
<entry
>void addMedia( KURL )</entry>
<entry
>Add audio media specified by the url.</entry>
</row>

<row>
<entry
>void addMediaList( KURL::List )</entry>
<entry
>Add some audio media specified by the url.</entry>
</row>

<row>
<entry
>void clearPlaylist()</entry>
<entry
>Clears the playlist.</entry>
</row>

<row>
<entry
>void playByIndex(int)</entry>
<entry
>Starts playing the track at the specified index.</entry>
</row>

<row>
<entry
>void playMedia( KURL )</entry>
<entry
>Add audio media specified by the url.</entry>
</row>

<row>
<entry
>void popupMessage( QString)</entry>
<entry
>Shows a temporary popup message.</entry>
</row>

<row>
<entry
>void removeCurrentTrack()</entry>
<entry
>Removes the current-track item from the playlist.</entry>
</row>

<row>
<entry
>void repopulate()</entry>
<entry
>Repopulate the playlist with random tracks.</entry>
</row>

<row>
<entry
>void saveM3u( QString path, bool relativePaths)</entry>
<entry
>Saves the current playlist as m3u.</entry>
</row>

<row>
<entry
>void setStopAfterCurrent( bool )</entry>
<entry
>Enables/disables the "Stop After Current Track" feature.</entry>
</row>

<row>
<entry
>void shortStatusMessage( QString)</entry>
<entry
>Shows a temporary message on the statusbar.</entry>
</row>

<row>
<entry
>void shufflePlaylist()</entry>
<entry
>Shuffles the playlist.</entry>
</row>

<row>
<entry
>void togglePlaylist()</entry>
<entry
>Toggle the Playlist-window.</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</sect2>

<sect2 id="dcop-playlistbrowser">
<title
>dcop amarok playlistbrowser</title>

<informaltable>
<tgroup cols="2">
<thead>

<row>
<entry
>Chiamata DCOP</entry>
<entry
>Azione</entry>
</row>
</thead>
<tbody>

<row>
<entry
>void addPodcast( QString )</entry>
<entry
>Add a podcast entry to the playlist browser.</entry>
</row>

<row>
<entry
>void scanPodcasts()</entry>
<entry
>Scan all podcasts for updates.</entry>
</row>

<row>
<entry
>void addPlaylist( QString )</entry>
<entry
>Add a playlist to the playlist browser.</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</sect2>

<sect2 id="dcop-script">
<title
>dcop amarok script</title>


<informaltable>
<tgroup cols="2">
<thead>

<row>
<entry
>Chiamata DCOP</entry>
<entry
>Azione</entry>
</row>
</thead>
<tbody>

<row>
<entry
>bool runScript( QString name)</entry>
<entry
>Starts the script with the given name. Returns true on success.</entry>
</row>

<row>
<entry
>bool stopScript( QString name)</entry>
<entry
>Stops the script with the given name. Returns true on success.</entry>
</row>

<row>
<entry
>QStringList listRunningScripts()</entry>
<entry
>Returns a list of all currently running scripts.</entry>
</row>

<row>
<entry
>void addCustomMenuItem(QString submenu, QString itemTitle )</entry>
<entry
>Enables and sets custom menu item title.</entry>
</row>

<row>
<entry
>void removeCustomMenuItem(QString submenu, QString itemTitle )</entry>
<entry
>Removes the custom menu item.</entry>
</row>

<row>
<entry
>QString readConfig( QString key)</entry>
<entry
>Returns a AmarokConfig configuration entry value from the given key.</entry>
</row>

</tbody>
</tgroup>
</informaltable>


</sect2>

</sect1>

<sect1 id="cmd-line-options">
<title
>Opzioni linea di comando</title>

<para
>amaroK supporta l'uso delle opzioni standard dei comandi di linea di Qt e kde. amaroK ha inoltre le proprie opzioni specifiche.</para>

<para
>Le opzioni Qt e kde:</para>

<informaltable>
<tgroup cols="2">
<thead>

<row>
<entry
>Opzioni</entry>
<entry
>Azione</entry>
</row>
</thead>
<tbody>

<row>
<entry
>--help</entry>
<entry
>Mostra l'aiuto sulle opzioni.</entry>
</row>

<row>
<entry
>--help-qt</entry>
<entry
>Mostra le opzioni specifiche di Qt.</entry>
</row>

<row>
<entry
>--help-kde</entry>
<entry
>Mostra le opzioni specifiche di KDE.</entry>
</row>

<row>
<entry
>--help-all</entry>
<entry
>Mostra tutte le opzioni.</entry>
</row>

<row>
<entry
>--author</entry>
<entry
>Mostra le informazioni dell'autore.</entry>
</row>

<row>
<entry
>-v, --version</entry>
<entry
>Mostra le informazioni della versione.</entry>
</row>

<row>
<entry
>--license</entry>
<entry
>Mostra le informazioni della licenza.</entry>
</row>

</tbody>
</tgroup>
</informaltable>

<para
>Le opzioni di amaroK:</para>

<note
><para
>Le opzioni di &amarok; sono costruite per essere usate mentre &amarok; √® in funzione.</para
></note>

<informaltable>
<tgroup cols="2">
<thead>

<row>
<entry
>Opzioni</entry>
<entry
>Azione</entry>
</row>
</thead>
<tbody>

<row>
<entry
>-r, --previous</entry>
<entry
>Salta alla traccia precedente nella playlist.</entry>
</row>

<row>
<entry
>-p, --play</entry>
<entry
>Inizia a riprodurre l'attuale playlist.</entry>
</row>

<row>
<entry
>-s, --stop</entry>
<entry
>Ferma la riproduzione.</entry>
</row>

<row>
<entry
>--pause</entry>
<entry
>Mette in pausa la riproduzione.</entry>
</row>

<row>
<entry
>-f, --next</entry>
<entry
>Salta alla prossima traccia nella playlist.</entry>
</row>

<row>
<entry
>-a, --append</entry>
<entry
>Accoda file/URL alla playlist.</entry>
</row>

<row>
<entry
>-e, --enqueue</entry>
<entry
>Vedi append, disponibile per retro compatibilit√†.</entry>
</row>

<row>
<entry
>--queue</entry>
<entry
>Accoda file/URL dopo la traccia in riproduzione.</entry>
</row>

<row>
<entry
>-m, --toggle-playlist-window</entry>
<entry
>Attiva/disattiva la finestra della playlist.</entry>
</row>

<row>
<entry
>--wizard</entry>
<entry
>Lancia l'assistente del primo avvio.</entry>
</row>

<row>
<entry
>--engine "name"</entry>
<entry
>Avvia &amarok; con il motore "name".</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</sect1>


<sect1 id="script-writing">
<title
>Scrivere script</title>

<para
>Scrivere script permette di estendere facilmente &amarok; senza cambiare il codice principale. Gli script sono simili ai plugin ma, invece di una API dedicata, usano l'interfaccia DCOP di &amarok; per comunicare. Ci√≤ rende possibile scrivere script in quasi qualsiasi linguaggio di programmazione come Ruby, Python o PHP. Non solo si possono creare script nel classico linguaggio di programmazione ma anche in linguaggi compilati come C++ o C. In aggiunta, &amarok; pu√≤ notificare agli script eventi speciali e farli reagire di conseguenza. Questo sistema di notifiche verr√† spiegato dopo nella propria sezione.</para>

<sect2 id="script-bindings">
<title
>Binding</title>

<para
>√à possibile scrivere semplici script che non necessitano dell'interazione dell'utente ed √® anche possibile creare script con comode GUI che funzionino come piccole applicazioni singole. Per la programmazione delle GUI si pu√≤ usare uno dei molti binding che KDE offre, per esempio RubyQT, una libreria Qt binding per Ruby. Tuttavia, vale la pena notare che non ogni utente ha tutti i binding disponibili installati. Se si decide di usarne uno, provare ad usarne uno di larga diffusione (p.e. RubyQt o PyQt).</para>

<para
>In modo da fornire un ritorno di informazioni quando uno script non funziona per una mancata dipenenza, controllare che nel proprio script se il modulo che si vuole includere realmente esiste. Se la dipendenza manca, si potrebbe prendere l'errore e mostrare una finestra di informazione usando lo strumento linea di comando "kdialog" in modo che l'utente capisca perch√© lo script fallisce.</para>

<para
>Questo esempio mostra come recuperare una dipendenza mancante in Ruby:</para>

<programlisting
>begin
       require 'Korundum'
rescue LoadError
       error = 'Korundum (KDE bindings for ruby) from kdebindings v3.4 is required for this script.'
       `kdialog --sorry '#{error}'`
       exit
end
</programlisting>

</sect2>

<sect2 id="script-templates">
<title
>Incominciare: i modelli</title>

<para
>&amarok; fornisce modelli di script per numerose linguaggi nella cartella <filename class="directory"
>scripts/templates/</filename
>. Si possono usare come base per propri script ed estenderli con le funzionalit√† di cui si necessita. Si noter√† che lo scripting √® attualmente abbastanza diretto. Se ad esempio si conosce un po' di programmazione in python, realizzare il proprio script non richieder√† molto tempo.</para>

</sect2>

<sect2 id="script-controlling-amarok">
<title
>Controllare &amarok; con DCOP</title>

<para
>Gli script possono controllare amaroK richiamando alcune delle sue funzioni DCOP. La via pi√π semplice per invocare una funzione DCOP √® usare l'utilit√† linea di comando "dcop", che fa parte di ogni distribuzione KDE.</para>

<para
>Questo √® un esempio per aumentare il volume principale:</para>

<programlisting
>dcop amarok player volumeUp</programlisting>

<para
>La maggior parte dei linguaggi di scripting permette di eseguire programmi esterni con una funzione tipo exec(). In questa maniera l'utlit√† "dcop" pu√≤ essere invocata facilmente. Questo √® un semplice esempio in Python:</para>

<programlisting
>import os
 os.system("dcop amarok player volumeDown")
</programlisting>

</sect2>

<sect2 id="script-notifications">
<title
>Notifiche</title>

<para
>&amarok; invia notifiche a tutti gli script attivi scrivendo stringhe sui loro canali stdin. Lo script dovrebbe quindi costantemente controllare stdin e reagisce di conseguenza a ciascuno degli eventi possibili. Gli script possono anche scegliere ignorare tutti gli eventi che per cui non hanno funzioni.</para>

<para
>Le seguenti notifiche vengono spedite a &amarok;:</para>

<programlisting
><cmdsynopsis
><command
>configure</command
></cmdsynopsis>
Tells the script to show its configuration dialog. The script must handle the
storing and loading of configuration options by itself. When a script is
started, amaroK sets its working directory to the folder where all data
should be stored.
</programlisting>

<programlisting
><cmdsynopsis
><command
>engineStateChange:</command
><arg
>empty|idle|paused|playing</arg
></cmdsynopsis>
Segnala una variazione nello stato del motore.
</programlisting>

<programlisting
><cmdsynopsis
><command
>trackChange</command
></cmdsynopsis>
Signals the start of a new track. The script may then use DCOP functions to
query further information about the track, e.g. metadata and the length.
</programlisting>

<programlisting
><cmdsynopsis
><command
>volumeChange</command
><arg
>newVolume</arg
></cmdsynopsis>
Signals a change of the master volume level. The volume is an integer with a
range of 0-100.
</programlisting>

<programlisting
><cmdsynopsis
><command
>customMenuClicked:</command
><arg
>submenu itemTitle paths</arg
></cmdsynopsis>
Returns the paths to selected files in the playlist when the custom playlist
context menu item is clicked. The submenu and itemTitle are also returned for
identification purposes in case a script is listening for multiple notifications.
To insert an item into the context menu use the DCOP call
'dcop amarok script addCustomMenuItem( submenu itemTitle )'. To remove an
item from the context menu use the DCOP call
'dcop amarok script removeCustomMenuItem( submenu itemTitle )'.
</programlisting>

</sect2>

<sect2 id="script-termination">
<title
>Stop degli script</title>

<para
>Per che &amarok; si chiuda o quando l'utente ferma uno script con il Gestore degli script, &amarok; invia il segnale SIGTERM allo script. Il segnale pu√≤ essere preso per fare pulizia nel lavoro, come salvare dati o configurare di impostazioni.</para>

</sect2>

<sect2 id="script-packaging">
<title
>Pacchetti</title>

<para
>Il Gestore degli script di &amarok; √® capace di installare pacchetti di script scricati dall'utente da un web server. Normalmente si tratta di pacchetti tarball (.tar), opzionalmente compressi con bzip2 (.bz2). Si raccomanda caldamente di usare un nome di file tipo myscript.amarokscript.tar.bz2 in modo che l'utente possa facilmente identificare il pacchetto come uno script per amaroK.</para>

<note
><para
>&amarok; 1.3 accetter√† solamente pacchetti di script con l'estensione amarokscript, in modo da usarlo pi√π facilmente dal bell'inizio.</para
></note>

<para
>Il contenuto dei pacchetti tarball deve venire organizzato come segue:</para>

<programlisting
>myscript/
   README
   myscript.py (executable)
   somemodule.py
   foo.data
   ...
</programlisting>

</sect2>

<sect2 id="script-permissions">
<title
>Permessi del file</title>

<para
>Lo script principale deve avere i permessi di scrivibile (+x) impostati, mentre moduli addizionali che vengono caricati dallo script possono non esserlo. Per preservare i permessi del file nel tarball bisogna usare tar con l'opzione -p:</para>

<programlisting
>tar -cf myscript.amarokscript.tar -p myscript</programlisting>

<note
><para
>&amarok; non sar√† in grado di installare lo script se i permessi non sono correttamente impostati.</para
></note>

</sect2>

<sect2 id="script-distributing">
<title
>Distribuzione</title>

<para
>When the package is finished, you can upload it to <ulink url="http://www.kde-apps.org"
>www.kde-apps.org</ulink
>, and add the link to the &amarok; <ulink url="http://amarok.kde.org/amarokwiki/index.php/Scripts"
>Wiki Scripts Page</ulink
>. For the kde-apps entry you should use the <ulink url="http://kde-apps.org/index.php?xcontentmode=56"
>&amarok; Scripts</ulink
> category.</para>

</sect2>

</sect1>


</chapter>

