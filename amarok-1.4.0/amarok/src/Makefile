# Makefile.in generated by automake 1.7.9 from Makefile.am.
# KDE tags expanded automatically by am_edit - $Revision: 483858 $ 
# amarok/src/Makefile.  Generated from Makefile.in by config.pl.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../..
VPATH = .
pkgdatadir = $(datadir)/amarok-1.4.0
pkglibdir = $(libdir)/amarok-1.4.0
pkgincludedir = $(includedir)/amarok-1.4.0
top_builddir = ../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c -p
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/eversor/amarok-1.4.0/admin/missing --run aclocal-1.7
ALSALIB_CFLAGS = 
ALSALIB_LIBS = 
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/eversor/amarok-1.4.0/admin/missing --run tar
AR = ar
ARTSCCONFIG = /usr/kde/3.5/bin/artsc-config
AUTOCONF = $(SHELL) $(top_srcdir)/admin/cvs.sh configure || touch configure
AUTODIRS = 
AUTOHEADER = ${SHELL} /home/eversor/amarok-1.4.0/admin/missing --run autoheader
AUTOMAKE = ${SHELL} /home/eversor/amarok-1.4.0/admin/missing --run automake-1.7
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -std=iso9899:1990 -W -Wall -Wchar-subscripts -Wshadow -Wpointer-arith -Wmissing-prototypes -Wwrite-strings -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -O2   -Wformat-security -Wmissing-format-attribute
CFLAGS_NMM = 
CFLAGS_XINE = -I/usr/include
CONF_FILES =  $(top_srcdir)/./admin/configure.in.min $(top_srcdir)/configure.in.in $(top_srcdir)/./amarok/configure.in.bot $(top_srcdir)/./amarok/configure.in.in $(top_srcdir)/configure.in.bot
CPP = gcc -E
CPPFLAGS =  -DQT_THREAD_SUPPORT  -D_REENTRANT
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wno-long-long -Wundef -ansi -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -Wcast-align -Wconversion -Wchar-subscripts -Wall -W -Wpointer-arith -O2 -Wformat-security -Wmissing-format-attribute -Wno-non-virtual-dtor -fno-exceptions -fno-check-new -fno-common -DQT_CLEAN_NAMESPACE -DQT_NO_ASCII_CAST -DQT_NO_STL -DQT_NO_COMPAT -DQT_NO_TRANSLATION
CYGPATH_W = echo
DCOPIDL = /usr/kde/3.5/bin/dcopidl
DCOPIDL2CPP = /usr/kde/3.5/bin/dcopidl2cpp
DCOPIDLNG = /usr/kde/3.5/bin/dcopidlng
DCOP_DEPENDENCIES = $(DCOPIDL) $(DCOPIDLNG)
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DOXYGEN = 
DOXYGEN_PROJECT_NAME = The API Reference
DOXYGEN_PROJECT_NUMBER = Version 3.5.2
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
ENABLE_PERMISSIVE_FLAG = -fpermissive
EXEEXT = 
EXSCALIBAR_CFLAGS = 
EXSCALIBAR_LIBS = 
F77 = g77
FFLAGS = -g -O2
FRAMEWORK_COREAUDIO = 
GMSGFMT = /usr/bin/gmsgfmt
GTK_CONFIG = yes
HAVE_GCC_VISIBILITY = 0
IFP_INCLUDES = 
IFP_LIBS = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL} $(INSTALL_STRIP_FLAG)
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
KCFG_DEPENDENCIES = $(KCONFIG_COMPILER)
KCONFIG_COMPILER = /usr/kde/3.5/bin/kconfig_compiler
KDECONFIG = /usr/kde/3.5/bin/kde-config
KDE_CHECK_PLUGIN = $(KDE_PLUGIN) -rpath $(libdir)
KDE_EXTRA_RPATH = 
KDE_HAS_DOXYGEN = no
KDE_HAVE_DOT = NO
KDE_INCLUDES = -I/usr/kde/3.5/include
KDE_LDFLAGS = -L/usr/kde/3.5/lib
KDE_MT_LDFLAGS = 
KDE_MT_LIBS = -lpthread
KDE_NO_UNDEFINED = -Wl,--no-undefined -Wl,--allow-shlib-undefined
KDE_PLUGIN = -avoid-version -module -no-undefined $(KDE_NO_UNDEFINED) $(KDE_RPATH) $(KDE_MT_LDFLAGS)
KDE_RPATH = -R $(libdir) -R $(kde_libraries) -R $(qt_libraries) -R $(x_libraries)
KDE_USE_CLOSURE_FALSE = 
KDE_USE_CLOSURE_TRUE = #
KDE_USE_FINAL_FALSE = 
KDE_USE_FINAL_TRUE = #
KDE_USE_FPIE = -fPIE
KDE_USE_NMCHECK_FALSE = 
KDE_USE_NMCHECK_TRUE = #
KDE_USE_PIE = -pie
KDE_XSL_STYLESHEET = /usr/kde/3.5/share/apps/ksgmltools2/customization/kde-chunk.xsl
LDFLAGS = 
LDFLAGS_AS_NEEDED = 
LDFLAGS_NEW_DTAGS = 
LDFLAGS_NMM = 
LIBCOMPAT = 
LIBCRYPT = -lcrypt
LIBDL = -ldl
LIBGPOD_CFLAGS = 
LIBGPOD_LIBS = 
LIBJPEG = -ljpeg
LIBOBJS = 
LIBPNG = -lpng -lz -lm
LIBPTHREAD = -lpthread
LIBRESOLV = -lresolv
LIBS = 
LIBSM = -lSM -lICE
LIBSOCKET = 
LIBS_XINE = -L/usr/lib -lxine -lz -lnsl -lpthread -lrt
LIBTOOL = $(SHELL) $(top_builddir)/libtool --silent
LIBUCB = 
LIBUTIL = -lutil
LIBVISUAL_CFLAGS = 
LIBVISUAL_LIBS = 
LIBZ = -lz
LIB_ARTS = -lartskde
LIB_KAB = -lkab
LIB_KABC = -lkabc
LIB_KDECORE = -lkdecore
LIB_KDED = 
LIB_KDEPIM = -lkdepim
LIB_KDEPRINT = -lkdeprint
LIB_KDEUI = -lkdeui
LIB_KDNSSD = -lkdnssd
LIB_KFILE = -lkio
LIB_KFM = 
LIB_KHTML = -lkhtml
LIB_KIMPROXY = -lkimproxy
LIB_KIO = -lkio
LIB_KJS = -lkjs
LIB_KNEWSTUFF = -lknewstuff
LIB_KPARTS = -lkparts
LIB_KSPELL = -lkspell
LIB_KSYCOCA = -lkio
LIB_KUNITTEST = -lkunittest
LIB_KUTILS = -lkutils
LIB_POLL = 
LIB_QPE = 
LIB_QT = -lqt-mt  $(LIBZ) $(LIBPNG) -lXext $(LIB_X11) $(LIBSM) -lpthread
LIB_SMB = -lsmb
LIB_SQLITE = 
LIB_TUNEPIMP = 
LIB_X11 = -lX11 $(LIBSOCKET)
LIB_XEXT = -lXext
LIB_XRENDER = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/eversor/amarok-1.4.0/admin/missing --run makeinfo
MAKEKDEWIDGETS = /usr/kde/3.5/bin/makekdewidgets
MCOPIDL = /usr/kde/3.5/bin/mcopidl
MEINPROC = /usr/kde/3.5/bin/meinproc
MOC = /usr/qt/3/bin/moc
MP4V2_INCLUDES = 
MP4V2_LIBS = 
MSGFMT = /usr/bin/gmsgfmt
MYSQL_CONFIG = 
NOOPT_CFLAGS = -O0
NOOPT_CXXFLAGS = -O0
OBJEXT = o
PACKAGE = amarok-1.4.0
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PKGCONFIGFOUND = yes
PKG_CONFIG = /usr/bin/pkg-config
POSTGRESQL_CONFIG = 
QTDOCDIR = NO
QTE_NORTTI = 
QT_INCLUDES = -I/usr/qt/3/include
QT_LDFLAGS = -L/usr/qt/3/lib
RANLIB = ranlib
RUBY = /usr/bin/ruby
SDL_CONFIG = yes
SET_MAKE = 
SHELL = /bin/sh
SQLITE_CFLAGS = 
SQLITE_LIBS = 
STRIP = strip
TAGLIB_CONFIG = /usr/bin/taglib-config
TOPSUBDIRS =  amarok doc po
UIC = /usr/qt/3/bin/uic -L $(kde_widgetdir) -nounload
UIC_TR = tr2i18n
USER_INCLUDES = 
USER_LDFLAGS = 
USE_EXCEPTIONS = -fexceptions
USE_RTTI = 
USE_THREADS = 
VERSION = 3.5.2
WOVERLOADED_VIRTUAL = 
XGETTEXT = /usr/bin/xgettext
XINE_CONFIG = yes
XMLLINT = /usr/bin/xmllint
XMMS_CONFIG = 
X_EXTRA_LIBS = 
X_INCLUDES = -I.
X_LDFLAGS = -L/usr/lib
X_PRE_LIBS = 
X_RPATH = -R $(x_libraries)
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = g77
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
all_includes = -I/usr/kde/3.5/include -I/usr/qt/3/include -I. 
all_libraries = -L/usr/kde/3.5/lib -L/usr/qt/3/lib -L/usr/lib   
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
amarok_SUBDIR_included_FALSE = #
amarok_SUBDIR_included_TRUE = 
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
doc_SUBDIR_included_FALSE = #
doc_SUBDIR_included_TRUE = 
enable_mysql_FALSE = 
enable_mysql_TRUE = #
enable_postgresql_FALSE = 
enable_postgresql_TRUE = #
exec_prefix = ${prefix}
gl_libs = -lGL
gtk_cflags = 
gtk_libs = 
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
include_ARTS_FALSE = #
include_ARTS_TRUE = 
include_x11_FALSE = #
include_x11_TRUE = 
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/eversor/amarok-1.4.0/admin/install-sh
kde_appsdir = ${datadir}/applnk
kde_bindir = ${exec_prefix}/bin
kde_confdir = ${datadir}/config
kde_datadir = ${datadir}/apps
kde_htmldir = ${datadir}/doc/HTML
kde_icondir = ${datadir}/icons
kde_includes = /usr/kde/3.5/include
kde_kcfgdir = ${datadir}/config.kcfg
kde_libraries = /usr/kde/3.5/lib
kde_libs_htmldir = /usr/kde/3.5/share/doc/HTML
kde_libs_prefix = /usr/kde/3.5
kde_locale = ${datadir}/locale
kde_mimedir = ${datadir}/mimelnk
kde_moduledir = ${libdir}/kde3
kde_qtver = 3
kde_servicesdir = ${datadir}/services
kde_servicetypesdir = ${datadir}/servicetypes
kde_sounddir = ${datadir}/sounds
kde_styledir = ${libdir}/kde3/plugins/styles
kde_templatesdir = ${datadir}/templates
kde_wallpaperdir = ${datadir}/wallpapers
kde_widgetdir = /usr/kde/3.5/lib/kde3/plugins/designer
kdeinitdir = $(kde_moduledir)
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mysql_includes = 
mysql_libs = 
oldincludedir = /usr/include
po_SUBDIR_included_FALSE = #
po_SUBDIR_included_TRUE = 
postgresql_includes = 
postgresql_libs = 
prefix = /usr/kde/3.5
program_transform_name = s,x,x,
qt_includes = /usr/qt/3/include
qt_libraries = /usr/qt/3/lib
sbindir = ${exec_prefix}/sbin
sdl_cflags = -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
sdl_libs = -lSDL -lpthread
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
taglib_includes = -I/usr/include/taglib
taglib_libs = -L/usr/lib -ltag
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
unsermake_enable_pch_FALSE = 
unsermake_enable_pch_TRUE = #
with_exscalibar_FALSE = 
with_exscalibar_TRUE = #
with_helix_FALSE = 
with_helix_TRUE = #
with_ifp_FALSE = 
with_ifp_TRUE = #
with_included_sqlite_FALSE = #
with_included_sqlite_TRUE = 
with_konqsidebar_FALSE = #
with_konqsidebar_TRUE = 
with_libgpod_FALSE = 
with_libgpod_TRUE = #
with_libvisual_FALSE = 
with_libvisual_TRUE = #
with_mp4v2_FALSE = 
with_mp4v2_TRUE = #
with_nmm_FALSE = 
with_nmm_TRUE = #
with_xine_FALSE = #
with_xine_TRUE = 
with_xmmswrapper_FALSE = 
with_xmmswrapper_TRUE = #
x_includes = .
x_libraries = /usr/lib
xdg_appsdir = ${datadir}/applications/kde
xdg_directorydir = ${datadir}/desktop-directories
xdg_menudir = ${sysconfdir}/xdg/menus
xmms_cflags = 
xmms_libs = 
SQLITE_SUBDIR = sqlite
LIB_SQLITE_LOCAL = $(top_builddir)/amarok/src/sqlite/libsqlite.la
sqlite_includes = -I$(top_srcdir)/amarok/src/sqlite

KONQSIDEBAR_SUBDIR = konquisidebar

lib_LTLIBRARIES = libamarok.la

SUBDIRS = \
    amarokcore \
    $(SQLITE_SUBDIR) \
    analyzers \
    data \
    plugin \
    engine \
    images \
    loader \
    scripts \
    themes \
    vis \
    metadata \
    $(KONQSIDEBAR_SUBDIR) \
    statusbar \
    . \
    mediadevice \
    collectionscanner


INCLUDES = \
    -I$(top_builddir)/amarok/src/amarokcore \
    -I$(top_srcdir)/amarok/src/amarokcore \
    -I$(top_srcdir)/amarok/src/analyzers \
    -I$(top_srcdir)/amarok/src/engine \
    -I$(top_srcdir)/amarok/src/plugin \
    -I$(top_srcdir)/amarok/src/statusbar \
    -I$(top_srcdir)/amarok/src/mediadevice \
    -I$(top_srcdir)/amarok/src \
    -I$(kde_includes)/arts \
    $(taglib_includes) \
    $(sqlite_includes) \
    $(mysql_includes) \
    $(postgresql_includes) \
    $(EXSCALIBAR_CFLAGS) \
    $(all_includes)


#>- libamarok_la_SOURCES = \
#>-     Options1.ui \
#>-     Options1.ui.h \
#>-     Options2.ui \
#>-     Options4.ui \
#>-     Options5.ui \
#>-     Options7.ui \
#>-     Options8.ui \
#>-     actionclasses.cpp \
#>-     app.cpp \
#>-     atomicstring.cpp \
#>-     atomicurl.cpp \
#>-     browserbar.cpp \
#>-     clicklineedit.cpp \
#>-     collectionbrowser.cpp \
#>-     collectiondb.cpp \
#>-     columnlist.cpp \
#>-     configdialog.cpp \
#>-     contextbrowser.cpp \
#>-     coverfetcher.cpp \
#>-     covermanager.cpp \
#>-     pixmapviewer.cpp \
#>-     cuefile.cpp \
#>-     dbsetup.ui  \
#>-     dbsetup.ui.h \
#>-     deviceconfiguredialog.cpp \
#>-     devicemanager.cpp \
#>-     directorylist.cpp \
#>-     effectwidget.cpp \
#>-     enginecontroller.cpp \
#>-     engineobserver.cpp \
#>-     equalizergraph.cpp \
#>-     equalizerpresetmanager.cpp \
#>-     equalizersetup.cpp \
#>-     fht.cpp \
#>-     filebrowser.cpp \
#>-     firstrunwizard.ui \
#>-     hintlineedit.cpp \
#>-     htmlview.cpp \
#>-     iconloader.cpp \
#>-     k3bexporter.cpp \
#>-     kbookmarkhandler.cpp \
#>-     ktrm.cpp \
#>-     mediabrowser.cpp \
#>-     medium.cpp \
#>-     mediumpluginmanager.cpp \
#>-     metabundle.cpp \
#>-     moodbar.cpp \
#>-     mydiroperator.cpp \
#>-     multitabbar.cpp \
#>-     newdynamic.ui \
#>-     osd.cpp \
#>-     organizecollectiondialog.ui \
#>-     dynamicmode.cpp \
#>-     playerwindow.cpp \
#>-     playlist.cpp \
#>-     playlistbrowser.cpp \
#>-     playlistbrowseritem.cpp \
#>-     playlistitem.cpp \
#>-     playlistloader.cpp \
#>-     playlistselection.cpp \
#>-     playlistwindow.cpp \
#>-     pluginmanager.cpp \
#>-     podcastsettings.cpp \
#>-     podcastsettingsbase.ui \
#>-     prettypopupmenu.cpp \
#>-     queuemanager.cpp \
#>-     refreshimages.cpp \
#>-     scancontroller.cpp \
#>-     scriptmanager.cpp \
#>-     scriptmanagerbase.ui \
#>-     scrobbler.cpp \
#>-     sliderwidget.cpp \
#>-     smartplaylisteditor.cpp \
#>-     socketserver.cpp \
#>-     statistics.cpp \
#>-     systray.cpp \
#>-     tagdialog.cpp \
#>-     tagdialogbase.ui \
#>-     tagguesser.cpp \
#>-     tagguesserconfigdialog.ui \
#>-     threadweaver.cpp \
#>-     tooltip.cpp \
#>-     tracktooltip.cpp \
#>-     trackpickerdialog.cpp \
#>-     trackpickerdialogbase.ui \
#>-     transferdialog.cpp \
#>-     xmlloader.cpp \
#>-     xspfplaylist.cpp
#>+ 89
libamarok_la_SOURCES=\
     \
    Options1.ui.h \
     \
     \
     \
     \
     \
    actionclasses.cpp \
    app.cpp \
    atomicstring.cpp \
    atomicurl.cpp \
    browserbar.cpp \
    clicklineedit.cpp \
    collectionbrowser.cpp \
    collectiondb.cpp \
    columnlist.cpp \
    configdialog.cpp \
    contextbrowser.cpp \
    coverfetcher.cpp \
    covermanager.cpp \
    pixmapviewer.cpp \
    cuefile.cpp \
      \
    dbsetup.ui.h \
    deviceconfiguredialog.cpp \
    devicemanager.cpp \
    directorylist.cpp \
    effectwidget.cpp \
    enginecontroller.cpp \
    engineobserver.cpp \
    equalizergraph.cpp \
    equalizerpresetmanager.cpp \
    equalizersetup.cpp \
    fht.cpp \
    filebrowser.cpp \
     \
    hintlineedit.cpp \
    htmlview.cpp \
    iconloader.cpp \
    k3bexporter.cpp \
    kbookmarkhandler.cpp \
    ktrm.cpp \
    mediabrowser.cpp \
    medium.cpp \
    mediumpluginmanager.cpp \
    metabundle.cpp \
    moodbar.cpp \
    mydiroperator.cpp \
    multitabbar.cpp \
     \
    osd.cpp \
     \
    dynamicmode.cpp \
    playerwindow.cpp \
    playlist.cpp \
    playlistbrowser.cpp \
    playlistbrowseritem.cpp \
    playlistitem.cpp \
    playlistloader.cpp \
    playlistselection.cpp \
    playlistwindow.cpp \
    pluginmanager.cpp \
    podcastsettings.cpp \
     \
    prettypopupmenu.cpp \
    queuemanager.cpp \
    refreshimages.cpp \
    scancontroller.cpp \
    scriptmanager.cpp \
     \
    scrobbler.cpp \
    sliderwidget.cpp \
    smartplaylisteditor.cpp \
    socketserver.cpp \
    statistics.cpp \
    systray.cpp \
    tagdialog.cpp \
     \
    tagguesser.cpp \
     \
    threadweaver.cpp \
    tooltip.cpp \
    tracktooltip.cpp \
    trackpickerdialog.cpp \
     \
    transferdialog.cpp \
    xmlloader.cpp \
    xspfplaylist.cpp Options1.cpp Options2.cpp Options4.cpp Options5.cpp Options7.cpp Options8.cpp dbsetup.cpp firstrunwizard.cpp newdynamic.cpp organizecollectiondialog.cpp podcastsettingsbase.cpp scriptmanagerbase.cpp tagdialogbase.cpp tagguesserconfigdialog.cpp trackpickerdialogbase.cpp


libamarok_la_LIBADD = \
    $(top_builddir)/amarok/src/amarokcore/libamarokcore.la \
    $(top_builddir)/amarok/src/analyzers/libanalyzers.la \
    $(top_builddir)/amarok/src/engine/libengine.la \
    $(top_builddir)/amarok/src/plugin/libplugin.la \
    $(top_builddir)/amarok/src/statusbar/libstatusbar.la \
    $(top_builddir)/amarok/src/metadata/libmetadata.la \
    $(LIB_KUTILS) $(LIB_KFILE) $(LIB_KDEUI) $(LIB_KDECORE) $(LIB_KHTML) $(LIB_KNEWSTUFF) \
    $(taglib_libs) $(gl_libs) $(LIB_SQLITE) $(LIB_SQLITE_LOCAL) $(EXSCALIBAR_LIBS) \
    $(LIB_TUNEPIMP) \
    $(mysql_libs) \
    $(postgresql_libs)


libamarok_la_LDFLAGS = \
    $(all_libraries) \
    $(KDE_RPATH)


#>- METASOURCES = \
#>-     AUTO


KDE_ICON = \
    AUTO


bin_PROGRAMS = amarokapp

amarokapp_SOURCES = \
    main.cpp


amarokapp_LDADD = \
    $(top_builddir)/amarok/src/amarokcore/libamarokcore.la \
    libamarok.la \
    $(top_builddir)/amarok/src/analyzers/libanalyzers.la \
    $(top_builddir)/amarok/src/engine/libengine.la \
    $(top_builddir)/amarok/src/plugin/libplugin.la \
    $(top_builddir)/amarok/src/statusbar/libstatusbar.la \
    $(top_builddir)/amarok/src/metadata/libmetadata.la \
    $(LIB_KUTILS) $(LIB_KFILE) $(LIB_KDEUI) $(LIB_KDECORE) $(LIB_KHTML) $(LIB_KNEWSTUFF) \
    $(taglib_libs) $(gl_libs) $(LIB_SQLITE) $(LIB_SQLITE_LOCAL) $(EXSCALIBAR_LIBS) \
    $(LIB_TUNEPIMP) \
    $(mysql_libs) \
    $(postgresql_libs)


amarokapp_LDFLAGS = \
    $(all_libraries) \
    $(KDE_RPATH)


rcdir = \
    $(kde_datadir)/amarok


rc_DATA = \
    amarokui.rc \
    amarokui_xmms.rc


configdir = \
    $(kde_confdir)


config_DATA = \
    amarokrc


xdg_apps_DATA = \
    amarok.desktop


kde_servicetypes_DATA = \
    amarok_plugin.desktop


servicemenudir = \
    $(kde_datadir)/konqueror/servicemenus


servicemenu_DATA = \
    amarok_append.desktop


profiledatadir = \
    $(kde_datadir)/profiles


profiledata_DATA = \
    amarok.profile.xml

subdir = amarok/src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LTLIBRARIES = $(lib_LTLIBRARIES)

libamarok_la_DEPENDENCIES = \
	$(top_builddir)/amarok/src/amarokcore/libamarokcore.la \
	$(top_builddir)/amarok/src/analyzers/libanalyzers.la \
	$(top_builddir)/amarok/src/engine/libengine.la \
	$(top_builddir)/amarok/src/plugin/libplugin.la \
	$(top_builddir)/amarok/src/statusbar/libstatusbar.la \
	$(top_builddir)/amarok/src/metadata/libmetadata.la \
	$(top_builddir)/amarok/src/sqlite/libsqlite.la
#libamarok_la_DEPENDENCIES = \
#	$(top_builddir)/amarok/src/amarokcore/libamarokcore.la \
#	$(top_builddir)/amarok/src/analyzers/libanalyzers.la \
#	$(top_builddir)/amarok/src/engine/libengine.la \
#	$(top_builddir)/amarok/src/plugin/libplugin.la \
#	$(top_builddir)/amarok/src/statusbar/libstatusbar.la \
#	$(top_builddir)/amarok/src/metadata/libmetadata.la
am_libamarok_la_OBJECTS = actionclasses.lo app.lo atomicstring.lo \
	atomicurl.lo browserbar.lo clicklineedit.lo \
	collectionbrowser.lo collectiondb.lo columnlist.lo \
	configdialog.lo contextbrowser.lo coverfetcher.lo \
	covermanager.lo pixmapviewer.lo cuefile.lo \
	deviceconfiguredialog.lo devicemanager.lo directorylist.lo \
	effectwidget.lo enginecontroller.lo engineobserver.lo \
	equalizergraph.lo equalizerpresetmanager.lo equalizersetup.lo \
	fht.lo filebrowser.lo hintlineedit.lo htmlview.lo iconloader.lo \
	k3bexporter.lo kbookmarkhandler.lo ktrm.lo mediabrowser.lo \
	medium.lo mediumpluginmanager.lo metabundle.lo moodbar.lo \
	mydiroperator.lo multitabbar.lo osd.lo dynamicmode.lo \
	playerwindow.lo playlist.lo playlistbrowser.lo \
	playlistbrowseritem.lo playlistitem.lo playlistloader.lo \
	playlistselection.lo playlistwindow.lo pluginmanager.lo \
	podcastsettings.lo prettypopupmenu.lo queuemanager.lo \
	refreshimages.lo scancontroller.lo scriptmanager.lo \
	scrobbler.lo sliderwidget.lo smartplaylisteditor.lo \
	socketserver.lo statistics.lo systray.lo tagdialog.lo \
	tagguesser.lo threadweaver.lo tooltip.lo tracktooltip.lo \
	trackpickerdialog.lo transferdialog.lo xmlloader.lo \
	xspfplaylist.lo
#>- libamarok_la_OBJECTS = $(am_libamarok_la_OBJECTS)
#>+ 25
libamarok_la_final_OBJECTS = libamarok_la.all_cpp.lo 
libamarok_la_nofinal_OBJECTS = actionclasses.lo app.lo atomicstring.lo \
	atomicurl.lo browserbar.lo clicklineedit.lo \
	collectionbrowser.lo collectiondb.lo columnlist.lo \
	configdialog.lo contextbrowser.lo coverfetcher.lo \
	covermanager.lo pixmapviewer.lo cuefile.lo \
	deviceconfiguredialog.lo devicemanager.lo directorylist.lo \
	effectwidget.lo enginecontroller.lo engineobserver.lo \
	equalizergraph.lo equalizerpresetmanager.lo equalizersetup.lo \
	fht.lo filebrowser.lo hintlineedit.lo htmlview.lo iconloader.lo \
	k3bexporter.lo kbookmarkhandler.lo ktrm.lo mediabrowser.lo \
	medium.lo mediumpluginmanager.lo metabundle.lo moodbar.lo \
	mydiroperator.lo multitabbar.lo osd.lo dynamicmode.lo \
	playerwindow.lo playlist.lo playlistbrowser.lo \
	playlistbrowseritem.lo playlistitem.lo playlistloader.lo \
	playlistselection.lo playlistwindow.lo pluginmanager.lo \
	podcastsettings.lo prettypopupmenu.lo queuemanager.lo \
	refreshimages.lo scancontroller.lo scriptmanager.lo \
	scrobbler.lo sliderwidget.lo smartplaylisteditor.lo \
	socketserver.lo statistics.lo systray.lo tagdialog.lo \
	tagguesser.lo threadweaver.lo tooltip.lo tracktooltip.lo \
	trackpickerdialog.lo transferdialog.lo xmlloader.lo \
	xspfplaylist.lo Options1.lo Options2.lo Options4.lo Options5.lo Options7.lo Options8.lo dbsetup.lo firstrunwizard.lo newdynamic.lo organizecollectiondialog.lo podcastsettingsbase.lo scriptmanagerbase.lo tagdialogbase.lo tagguesserconfigdialog.lo trackpickerdialogbase.lo
libamarok_la_OBJECTS = $(libamarok_la_nofinal_OBJECTS)
#libamarok_la_OBJECTS = $(libamarok_la_final_OBJECTS)
bin_PROGRAMS = amarokapp$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_amarokapp_OBJECTS = main.$(OBJEXT)
#>- amarokapp_OBJECTS = $(am_amarokapp_OBJECTS)
#>+ 1
amarokapp_OBJECTS = main.$(OBJEXT)
amarokapp_DEPENDENCIES = \
	$(top_builddir)/amarok/src/amarokcore/libamarokcore.la \
	libamarok.la \
	$(top_builddir)/amarok/src/analyzers/libanalyzers.la \
	$(top_builddir)/amarok/src/engine/libengine.la \
	$(top_builddir)/amarok/src/plugin/libplugin.la \
	$(top_builddir)/amarok/src/statusbar/libstatusbar.la \
	$(top_builddir)/amarok/src/metadata/libmetadata.la \
	$(top_builddir)/amarok/src/sqlite/libsqlite.la
#amarokapp_DEPENDENCIES = \
#	$(top_builddir)/amarok/src/amarokcore/libamarokcore.la \
#	libamarok.la \
#	$(top_builddir)/amarok/src/analyzers/libanalyzers.la \
#	$(top_builddir)/amarok/src/engine/libengine.la \
#	$(top_builddir)/amarok/src/plugin/libplugin.la \
#	$(top_builddir)/amarok/src/statusbar/libstatusbar.la \
#	$(top_builddir)/amarok/src/metadata/libmetadata.la

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/admin/depcomp
am__depfiles_maybe = depfiles
#>- DEP_FILES = ./$(DEPDIR)/actionclasses.Plo \
#>- 	./$(DEPDIR)/app.Plo ./$(DEPDIR)/atomicstring.Plo \
#>- 	./$(DEPDIR)/atomicurl.Plo \
#>- 	./$(DEPDIR)/browserbar.Plo \
#>- 	./$(DEPDIR)/clicklineedit.Plo \
#>- 	./$(DEPDIR)/collectionbrowser.Plo \
#>- 	./$(DEPDIR)/collectiondb.Plo \
#>- 	./$(DEPDIR)/columnlist.Plo \
#>- 	./$(DEPDIR)/configdialog.Plo \
#>- 	./$(DEPDIR)/contextbrowser.Plo \
#>- 	./$(DEPDIR)/coverfetcher.Plo \
#>- 	./$(DEPDIR)/covermanager.Plo \
#>- 	./$(DEPDIR)/cuefile.Plo \
#>- 	./$(DEPDIR)/deviceconfiguredialog.Plo \
#>- 	./$(DEPDIR)/devicemanager.Plo \
#>- 	./$(DEPDIR)/directorylist.Plo \
#>- 	./$(DEPDIR)/dynamicmode.Plo \
#>- 	./$(DEPDIR)/effectwidget.Plo \
#>- 	./$(DEPDIR)/enginecontroller.Plo \
#>- 	./$(DEPDIR)/engineobserver.Plo \
#>- 	./$(DEPDIR)/equalizergraph.Plo \
#>- 	./$(DEPDIR)/equalizerpresetmanager.Plo \
#>- 	./$(DEPDIR)/equalizersetup.Plo ./$(DEPDIR)/fht.Plo \
#>- 	./$(DEPDIR)/filebrowser.Plo \
#>- 	./$(DEPDIR)/hintlineedit.Plo \
#>- 	./$(DEPDIR)/htmlview.Plo ./$(DEPDIR)/iconloader.Plo \
#>- 	./$(DEPDIR)/k3bexporter.Plo \
#>- 	./$(DEPDIR)/kbookmarkhandler.Plo \
#>- 	./$(DEPDIR)/ktrm.Plo ./$(DEPDIR)/main.Po \
#>- 	./$(DEPDIR)/mediabrowser.Plo ./$(DEPDIR)/medium.Plo \
#>- 	./$(DEPDIR)/mediumpluginmanager.Plo \
#>- 	./$(DEPDIR)/metabundle.Plo ./$(DEPDIR)/moodbar.Plo \
#>- 	./$(DEPDIR)/multitabbar.Plo \
#>- 	./$(DEPDIR)/mydiroperator.Plo ./$(DEPDIR)/osd.Plo \
#>- 	./$(DEPDIR)/pixmapviewer.Plo \
#>- 	./$(DEPDIR)/playerwindow.Plo \
#>- 	./$(DEPDIR)/playlist.Plo \
#>- 	./$(DEPDIR)/playlistbrowser.Plo \
#>- 	./$(DEPDIR)/playlistbrowseritem.Plo \
#>- 	./$(DEPDIR)/playlistitem.Plo \
#>- 	./$(DEPDIR)/playlistloader.Plo \
#>- 	./$(DEPDIR)/playlistselection.Plo \
#>- 	./$(DEPDIR)/playlistwindow.Plo \
#>- 	./$(DEPDIR)/pluginmanager.Plo \
#>- 	./$(DEPDIR)/podcastsettings.Plo \
#>- 	./$(DEPDIR)/prettypopupmenu.Plo \
#>- 	./$(DEPDIR)/queuemanager.Plo \
#>- 	./$(DEPDIR)/refreshimages.Plo \
#>- 	./$(DEPDIR)/scancontroller.Plo \
#>- 	./$(DEPDIR)/scriptmanager.Plo \
#>- 	./$(DEPDIR)/scrobbler.Plo \
#>- 	./$(DEPDIR)/sliderwidget.Plo \
#>- 	./$(DEPDIR)/smartplaylisteditor.Plo \
#>- 	./$(DEPDIR)/socketserver.Plo \
#>- 	./$(DEPDIR)/statistics.Plo ./$(DEPDIR)/systray.Plo \
#>- 	./$(DEPDIR)/tagdialog.Plo \
#>- 	./$(DEPDIR)/tagguesser.Plo \
#>- 	./$(DEPDIR)/threadweaver.Plo \
#>- 	./$(DEPDIR)/tooltip.Plo \
#>- 	./$(DEPDIR)/trackpickerdialog.Plo \
#>- 	./$(DEPDIR)/tracktooltip.Plo \
#>- 	./$(DEPDIR)/transferdialog.Plo \
#>- 	./$(DEPDIR)/xmlloader.Plo \
#>- 	./$(DEPDIR)/xspfplaylist.Plo
#>+ 128
#DEP_FILES =  $(DEPDIR)/Options1.P $(DEPDIR)/Options2.P $(DEPDIR)/Options4.P $(DEPDIR)/Options5.P $(DEPDIR)/Options7.P $(DEPDIR)/Options8.P $(DEPDIR)/dbsetup.P $(DEPDIR)/firstrunwizard.P $(DEPDIR)/newdynamic.P $(DEPDIR)/organizecollectiondialog.P $(DEPDIR)/podcastsettingsbase.P $(DEPDIR)/scriptmanagerbase.P $(DEPDIR)/tagdialogbase.P $(DEPDIR)/tagguesserconfigdialog.P $(DEPDIR)/trackpickerdialogbase.P  $(DEPDIR)/libamarok_la.all_cpp.P ./$(DEPDIR)/actionclasses.Plo \
#		./$(DEPDIR)/app.Plo ./$(DEPDIR)/atomicstring.Plo \
#		./$(DEPDIR)/atomicurl.Plo \
#		./$(DEPDIR)/browserbar.Plo \
#		./$(DEPDIR)/clicklineedit.Plo \
#		./$(DEPDIR)/collectionbrowser.Plo \
#		./$(DEPDIR)/collectiondb.Plo \
#		./$(DEPDIR)/columnlist.Plo \
#		./$(DEPDIR)/configdialog.Plo \
#		./$(DEPDIR)/contextbrowser.Plo \
#		./$(DEPDIR)/coverfetcher.Plo \
#		./$(DEPDIR)/covermanager.Plo \
#		./$(DEPDIR)/cuefile.Plo \
#		./$(DEPDIR)/deviceconfiguredialog.Plo \
#		./$(DEPDIR)/devicemanager.Plo \
#		./$(DEPDIR)/directorylist.Plo \
#		./$(DEPDIR)/dynamicmode.Plo \
#		./$(DEPDIR)/effectwidget.Plo \
#		./$(DEPDIR)/enginecontroller.Plo \
#		./$(DEPDIR)/engineobserver.Plo \
#		./$(DEPDIR)/equalizergraph.Plo \
#		./$(DEPDIR)/equalizerpresetmanager.Plo \
#		./$(DEPDIR)/equalizersetup.Plo ./$(DEPDIR)/fht.Plo \
#		./$(DEPDIR)/filebrowser.Plo \
#		./$(DEPDIR)/hintlineedit.Plo \
#		./$(DEPDIR)/htmlview.Plo ./$(DEPDIR)/iconloader.Plo \
#		./$(DEPDIR)/k3bexporter.Plo \
#		./$(DEPDIR)/kbookmarkhandler.Plo \
#		./$(DEPDIR)/ktrm.Plo ./$(DEPDIR)/main.Po \
#		./$(DEPDIR)/mediabrowser.Plo ./$(DEPDIR)/medium.Plo \
#		./$(DEPDIR)/mediumpluginmanager.Plo \
#		./$(DEPDIR)/metabundle.Plo ./$(DEPDIR)/moodbar.Plo \
#		./$(DEPDIR)/multitabbar.Plo \
#		./$(DEPDIR)/mydiroperator.Plo ./$(DEPDIR)/osd.Plo \
#		./$(DEPDIR)/pixmapviewer.Plo \
#		./$(DEPDIR)/playerwindow.Plo \
#		./$(DEPDIR)/playlist.Plo \
#		./$(DEPDIR)/playlistbrowser.Plo \
#		./$(DEPDIR)/playlistbrowseritem.Plo \
#		./$(DEPDIR)/playlistitem.Plo \
#		./$(DEPDIR)/playlistloader.Plo \
#		./$(DEPDIR)/playlistselection.Plo \
#		./$(DEPDIR)/playlistwindow.Plo \
#		./$(DEPDIR)/pluginmanager.Plo \
#		./$(DEPDIR)/podcastsettings.Plo \
#		./$(DEPDIR)/prettypopupmenu.Plo \
#		./$(DEPDIR)/queuemanager.Plo \
#		./$(DEPDIR)/refreshimages.Plo \
#		./$(DEPDIR)/scancontroller.Plo \
#		./$(DEPDIR)/scriptmanager.Plo \
#		./$(DEPDIR)/scrobbler.Plo \
#		./$(DEPDIR)/sliderwidget.Plo \
#		./$(DEPDIR)/smartplaylisteditor.Plo \
#		./$(DEPDIR)/socketserver.Plo \
#		./$(DEPDIR)/statistics.Plo ./$(DEPDIR)/systray.Plo \
#		./$(DEPDIR)/tagdialog.Plo \
#		./$(DEPDIR)/tagguesser.Plo \
#		./$(DEPDIR)/threadweaver.Plo \
#		./$(DEPDIR)/tooltip.Plo \
#		./$(DEPDIR)/trackpickerdialog.Plo \
#		./$(DEPDIR)/tracktooltip.Plo \
#		./$(DEPDIR)/transferdialog.Plo \
#		./$(DEPDIR)/xmlloader.Plo \
#		./$(DEPDIR)/xspfplaylist.Plo
DEP_FILES =  $(DEPDIR)/Options1.P $(DEPDIR)/Options2.P $(DEPDIR)/Options4.P $(DEPDIR)/Options5.P $(DEPDIR)/Options7.P $(DEPDIR)/Options8.P $(DEPDIR)/dbsetup.P $(DEPDIR)/firstrunwizard.P $(DEPDIR)/newdynamic.P $(DEPDIR)/organizecollectiondialog.P $(DEPDIR)/podcastsettingsbase.P $(DEPDIR)/scriptmanagerbase.P $(DEPDIR)/tagdialogbase.P $(DEPDIR)/tagguesserconfigdialog.P $(DEPDIR)/trackpickerdialogbase.P ./$(DEPDIR)/actionclasses.Plo \
		./$(DEPDIR)/app.Plo ./$(DEPDIR)/atomicstring.Plo \
		./$(DEPDIR)/atomicurl.Plo \
		./$(DEPDIR)/browserbar.Plo \
		./$(DEPDIR)/clicklineedit.Plo \
		./$(DEPDIR)/collectionbrowser.Plo \
		./$(DEPDIR)/collectiondb.Plo \
		./$(DEPDIR)/columnlist.Plo \
		./$(DEPDIR)/configdialog.Plo \
		./$(DEPDIR)/contextbrowser.Plo \
		./$(DEPDIR)/coverfetcher.Plo \
		./$(DEPDIR)/covermanager.Plo \
		./$(DEPDIR)/cuefile.Plo \
		./$(DEPDIR)/deviceconfiguredialog.Plo \
		./$(DEPDIR)/devicemanager.Plo \
		./$(DEPDIR)/directorylist.Plo \
		./$(DEPDIR)/dynamicmode.Plo \
		./$(DEPDIR)/effectwidget.Plo \
		./$(DEPDIR)/enginecontroller.Plo \
		./$(DEPDIR)/engineobserver.Plo \
		./$(DEPDIR)/equalizergraph.Plo \
		./$(DEPDIR)/equalizerpresetmanager.Plo \
		./$(DEPDIR)/equalizersetup.Plo ./$(DEPDIR)/fht.Plo \
		./$(DEPDIR)/filebrowser.Plo \
		./$(DEPDIR)/hintlineedit.Plo \
		./$(DEPDIR)/htmlview.Plo ./$(DEPDIR)/iconloader.Plo \
		./$(DEPDIR)/k3bexporter.Plo \
		./$(DEPDIR)/kbookmarkhandler.Plo \
		./$(DEPDIR)/ktrm.Plo ./$(DEPDIR)/main.Po \
		./$(DEPDIR)/mediabrowser.Plo ./$(DEPDIR)/medium.Plo \
		./$(DEPDIR)/mediumpluginmanager.Plo \
		./$(DEPDIR)/metabundle.Plo ./$(DEPDIR)/moodbar.Plo \
		./$(DEPDIR)/multitabbar.Plo \
		./$(DEPDIR)/mydiroperator.Plo ./$(DEPDIR)/osd.Plo \
		./$(DEPDIR)/pixmapviewer.Plo \
		./$(DEPDIR)/playerwindow.Plo \
		./$(DEPDIR)/playlist.Plo \
		./$(DEPDIR)/playlistbrowser.Plo \
		./$(DEPDIR)/playlistbrowseritem.Plo \
		./$(DEPDIR)/playlistitem.Plo \
		./$(DEPDIR)/playlistloader.Plo \
		./$(DEPDIR)/playlistselection.Plo \
		./$(DEPDIR)/playlistwindow.Plo \
		./$(DEPDIR)/pluginmanager.Plo \
		./$(DEPDIR)/podcastsettings.Plo \
		./$(DEPDIR)/prettypopupmenu.Plo \
		./$(DEPDIR)/queuemanager.Plo \
		./$(DEPDIR)/refreshimages.Plo \
		./$(DEPDIR)/scancontroller.Plo \
		./$(DEPDIR)/scriptmanager.Plo \
		./$(DEPDIR)/scrobbler.Plo \
		./$(DEPDIR)/sliderwidget.Plo \
		./$(DEPDIR)/smartplaylisteditor.Plo \
		./$(DEPDIR)/socketserver.Plo \
		./$(DEPDIR)/statistics.Plo ./$(DEPDIR)/systray.Plo \
		./$(DEPDIR)/tagdialog.Plo \
		./$(DEPDIR)/tagguesser.Plo \
		./$(DEPDIR)/threadweaver.Plo \
		./$(DEPDIR)/tooltip.Plo \
		./$(DEPDIR)/trackpickerdialog.Plo \
		./$(DEPDIR)/tracktooltip.Plo \
		./$(DEPDIR)/transferdialog.Plo \
		./$(DEPDIR)/xmlloader.Plo \
		./$(DEPDIR)/xspfplaylist.Plo
#>- CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 2
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \
#>- 	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
#>- 	$(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 3
LTCXXCOMPILE = $(LIBTOOL) --mode=compile --tag=CXX $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
#>- 	$(AM_LDFLAGS) $(LDFLAGS) -o $@
#>+ 2
CXXLINK = $(LIBTOOL) --mode=link --tag=CXX $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(libamarok_la_SOURCES) $(amarokapp_SOURCES)
DATA = $(config_DATA) $(kde_servicetypes_DATA) $(profiledata_DATA) \
	$(rc_DATA) $(servicemenu_DATA) $(xdg_apps_DATA)


#>- RECURSIVE_TARGETS = info-recursive dvi-recursive pdf-recursive \
#>- 	ps-recursive install-info-recursive uninstall-info-recursive \
#>- 	all-recursive install-data-recursive install-exec-recursive \
#>- 	installdirs-recursive install-recursive uninstall-recursive \
#>- 	check-recursive installcheck-recursive
#>+ 5
RECURSIVE_TARGETS = info-recursive dvi-recursive pdf-recursive \
	ps-recursive install-info-recursive uninstall-info-recursive \
	all-recursive install-data-recursive install-exec-recursive \
	installdirs-recursive install-recursive uninstall-recursive \
	check-recursive installcheck-recursive nmcheck-recursive bcheck-recursive
DIST_COMMON = $(srcdir)/Makefile.in Makefile.am
DIST_SUBDIRS = amarokcore sqlite analyzers data plugin engine images \
	loader scripts themes vis metadata konquisidebar statusbar . \
	mediadevice collectionscanner
SOURCES = $(libamarok_la_SOURCES) $(amarokapp_SOURCES)

#>- all: all-recursive
#>+ 1
all: docs-am  all-recursive

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
#>- 	cd $(top_srcdir) && \
#>- 	  $(AUTOMAKE) --gnu  amarok/src/Makefile
#>+ 3
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  amarok/src/Makefile
	cd $(top_srcdir) && perl admin/am_edit amarok/src/Makefile.in
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
libLTLIBRARIES_INSTALL = $(INSTALL)
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdir)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f="`echo $$p | sed -e 's|^.*/||'`"; \
	    echo " $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) $$p $(DESTDIR)$(libdir)/$$f"; \
	    $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) $$p $(DESTDIR)$(libdir)/$$f; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	    p="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(LIBTOOL) --mode=uninstall rm -f $(DESTDIR)$(libdir)/$$p"; \
	  $(LIBTOOL) --mode=uninstall rm -f $(DESTDIR)$(libdir)/$$p; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" = "$$p" && dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libamarok.la: $(libamarok_la_OBJECTS) $(libamarok_la_DEPENDENCIES) 
	$(CXXLINK) -rpath $(libdir) $(libamarok_la_LDFLAGS) $(libamarok_la_OBJECTS) $(libamarok_la_LIBADD) $(LIBS)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
amarokapp$(EXEEXT): $(amarokapp_OBJECTS) $(amarokapp_DEPENDENCIES) 
	@rm -f amarokapp$(EXEEXT)
	$(CXXLINK) $(amarokapp_LDFLAGS) $(amarokapp_OBJECTS) $(amarokapp_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/actionclasses.Plo
include ./$(DEPDIR)/app.Plo
include ./$(DEPDIR)/atomicstring.Plo
include ./$(DEPDIR)/atomicurl.Plo
include ./$(DEPDIR)/browserbar.Plo
include ./$(DEPDIR)/clicklineedit.Plo
include ./$(DEPDIR)/collectionbrowser.Plo
include ./$(DEPDIR)/collectiondb.Plo
include ./$(DEPDIR)/columnlist.Plo
include ./$(DEPDIR)/configdialog.Plo
include ./$(DEPDIR)/contextbrowser.Plo
include ./$(DEPDIR)/coverfetcher.Plo
include ./$(DEPDIR)/covermanager.Plo
include ./$(DEPDIR)/cuefile.Plo
include ./$(DEPDIR)/deviceconfiguredialog.Plo
include ./$(DEPDIR)/devicemanager.Plo
include ./$(DEPDIR)/directorylist.Plo
include ./$(DEPDIR)/dynamicmode.Plo
include ./$(DEPDIR)/effectwidget.Plo
include ./$(DEPDIR)/enginecontroller.Plo
include ./$(DEPDIR)/engineobserver.Plo
include ./$(DEPDIR)/equalizergraph.Plo
include ./$(DEPDIR)/equalizerpresetmanager.Plo
include ./$(DEPDIR)/equalizersetup.Plo
include ./$(DEPDIR)/fht.Plo
include ./$(DEPDIR)/filebrowser.Plo
include ./$(DEPDIR)/hintlineedit.Plo
include ./$(DEPDIR)/htmlview.Plo
include ./$(DEPDIR)/iconloader.Plo
include ./$(DEPDIR)/k3bexporter.Plo
include ./$(DEPDIR)/kbookmarkhandler.Plo
include ./$(DEPDIR)/ktrm.Plo
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/mediabrowser.Plo
include ./$(DEPDIR)/medium.Plo
include ./$(DEPDIR)/mediumpluginmanager.Plo
include ./$(DEPDIR)/metabundle.Plo
include ./$(DEPDIR)/moodbar.Plo
include ./$(DEPDIR)/multitabbar.Plo
include ./$(DEPDIR)/mydiroperator.Plo
include ./$(DEPDIR)/osd.Plo
include ./$(DEPDIR)/pixmapviewer.Plo
include ./$(DEPDIR)/playerwindow.Plo
include ./$(DEPDIR)/playlist.Plo
include ./$(DEPDIR)/playlistbrowser.Plo
include ./$(DEPDIR)/playlistbrowseritem.Plo
include ./$(DEPDIR)/playlistitem.Plo
include ./$(DEPDIR)/playlistloader.Plo
include ./$(DEPDIR)/playlistselection.Plo
include ./$(DEPDIR)/playlistwindow.Plo
include ./$(DEPDIR)/pluginmanager.Plo
include ./$(DEPDIR)/podcastsettings.Plo
include ./$(DEPDIR)/prettypopupmenu.Plo
include ./$(DEPDIR)/queuemanager.Plo
include ./$(DEPDIR)/refreshimages.Plo
include ./$(DEPDIR)/scancontroller.Plo
include ./$(DEPDIR)/scriptmanager.Plo
include ./$(DEPDIR)/scrobbler.Plo
include ./$(DEPDIR)/sliderwidget.Plo
include ./$(DEPDIR)/smartplaylisteditor.Plo
include ./$(DEPDIR)/socketserver.Plo
include ./$(DEPDIR)/statistics.Plo
include ./$(DEPDIR)/systray.Plo
include ./$(DEPDIR)/tagdialog.Plo
include ./$(DEPDIR)/tagguesser.Plo
include ./$(DEPDIR)/threadweaver.Plo
include ./$(DEPDIR)/tooltip.Plo
include ./$(DEPDIR)/trackpickerdialog.Plo
include ./$(DEPDIR)/tracktooltip.Plo
include ./$(DEPDIR)/transferdialog.Plo
include ./$(DEPDIR)/xmlloader.Plo
include ./$(DEPDIR)/xspfplaylist.Plo

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=yes \
#	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
configDATA_INSTALL = $(INSTALL_DATA)
install-configDATA: $(config_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(configdir)
	@list='$(config_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(configDATA_INSTALL) $$d$$p $(DESTDIR)$(configdir)/$$f"; \
	  $(configDATA_INSTALL) $$d$$p $(DESTDIR)$(configdir)/$$f; \
	done

uninstall-configDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(config_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(configdir)/$$f"; \
	  rm -f $(DESTDIR)$(configdir)/$$f; \
	done
kde_servicetypesDATA_INSTALL = $(INSTALL_DATA)
install-kde_servicetypesDATA: $(kde_servicetypes_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(kde_servicetypesdir)
	@list='$(kde_servicetypes_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(kde_servicetypesDATA_INSTALL) $$d$$p $(DESTDIR)$(kde_servicetypesdir)/$$f"; \
	  $(kde_servicetypesDATA_INSTALL) $$d$$p $(DESTDIR)$(kde_servicetypesdir)/$$f; \
	done

uninstall-kde_servicetypesDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(kde_servicetypes_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(kde_servicetypesdir)/$$f"; \
	  rm -f $(DESTDIR)$(kde_servicetypesdir)/$$f; \
	done
profiledataDATA_INSTALL = $(INSTALL_DATA)
install-profiledataDATA: $(profiledata_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(profiledatadir)
	@list='$(profiledata_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(profiledataDATA_INSTALL) $$d$$p $(DESTDIR)$(profiledatadir)/$$f"; \
	  $(profiledataDATA_INSTALL) $$d$$p $(DESTDIR)$(profiledatadir)/$$f; \
	done

uninstall-profiledataDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(profiledata_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(profiledatadir)/$$f"; \
	  rm -f $(DESTDIR)$(profiledatadir)/$$f; \
	done
rcDATA_INSTALL = $(INSTALL_DATA)
install-rcDATA: $(rc_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(rcdir)
	@list='$(rc_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(rcDATA_INSTALL) $$d$$p $(DESTDIR)$(rcdir)/$$f"; \
	  $(rcDATA_INSTALL) $$d$$p $(DESTDIR)$(rcdir)/$$f; \
	done

uninstall-rcDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(rc_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(rcdir)/$$f"; \
	  rm -f $(DESTDIR)$(rcdir)/$$f; \
	done
servicemenuDATA_INSTALL = $(INSTALL_DATA)
install-servicemenuDATA: $(servicemenu_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(servicemenudir)
	@list='$(servicemenu_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(servicemenuDATA_INSTALL) $$d$$p $(DESTDIR)$(servicemenudir)/$$f"; \
	  $(servicemenuDATA_INSTALL) $$d$$p $(DESTDIR)$(servicemenudir)/$$f; \
	done

uninstall-servicemenuDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(servicemenu_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(servicemenudir)/$$f"; \
	  rm -f $(DESTDIR)$(servicemenudir)/$$f; \
	done
xdg_appsDATA_INSTALL = $(INSTALL_DATA)
install-xdg_appsDATA: $(xdg_apps_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(xdg_appsdir)
	@list='$(xdg_apps_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(xdg_appsDATA_INSTALL) $$d$$p $(DESTDIR)$(xdg_appsdir)/$$f"; \
	  $(xdg_appsDATA_INSTALL) $$d$$p $(DESTDIR)$(xdg_appsdir)/$$f; \
	done

uninstall-xdg_appsDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(xdg_apps_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(xdg_appsdir)/$$f"; \
	  rm -f $(DESTDIR)$(xdg_appsdir)/$$f; \
	done

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if (etags --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	else \
	  include_option=--include; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -f $$subdir/TAGS && \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
#>- DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
#>+ 1
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)

top_distdir = ../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d $(distdir)/$$subdir \
	    || mkdir $(distdir)/$$subdir \
	    || exit 1; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$(top_distdir)" \
	        distdir=../$(distdir)/$$subdir \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(DATA)
install-binPROGRAMS: install-libLTLIBRARIES

installdirs: installdirs-recursive
installdirs-am:
	$(mkinstalldirs) $(DESTDIR)$(libdir) $(DESTDIR)$(bindir) $(DESTDIR)$(configdir) $(DESTDIR)$(kde_servicetypesdir) $(DESTDIR)$(profiledatadir) $(DESTDIR)$(rcdir) $(DESTDIR)$(servicemenudir) $(DESTDIR)$(xdg_appsdir)

install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#>- clean: clean-recursive
#>+ 1
clean: kde-rpo-clean  clean-recursive

#>- clean-am: clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
#>- 	clean-libtool mostlyclean-am
#>+ 2
clean-am: clean-metasources clean-ui clean-bcheck clean-final  clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-recursive

dvi-am:

info: info-recursive

info-am:

#>- install-data-am: install-configDATA install-kde_servicetypesDATA \
#>- 	install-profiledataDATA install-rcDATA install-servicemenuDATA \
#>- 	install-xdg_appsDATA
#>+ 3
install-data-am: install-kde-icons  install-configDATA install-kde_servicetypesDATA \
	install-profiledataDATA install-rcDATA install-servicemenuDATA \
	install-xdg_appsDATA

install-exec-am: install-binPROGRAMS install-libLTLIBRARIES
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-exec-hook

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

#>- uninstall-am: uninstall-binPROGRAMS uninstall-configDATA \
#>- 	uninstall-info-am uninstall-kde_servicetypesDATA \
#>- 	uninstall-libLTLIBRARIES uninstall-profiledataDATA \
#>- 	uninstall-rcDATA uninstall-servicemenuDATA \
#>- 	uninstall-xdg_appsDATA
#>+ 5
uninstall-am: uninstall-kde-icons  uninstall-binPROGRAMS uninstall-configDATA \
	uninstall-info-am uninstall-kde_servicetypesDATA \
	uninstall-libLTLIBRARIES uninstall-profiledataDATA \
	uninstall-rcDATA uninstall-servicemenuDATA \
	uninstall-xdg_appsDATA

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool clean-recursive ctags ctags-recursive distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-recursive distclean-tags distdir dvi dvi-am \
	dvi-recursive info info-am info-recursive install install-am \
	install-binPROGRAMS install-configDATA install-data \
	install-data-am install-data-recursive install-exec \
	install-exec-am install-exec-recursive install-info \
	install-info-am install-info-recursive \
	install-kde_servicetypesDATA install-libLTLIBRARIES install-man \
	install-profiledataDATA install-rcDATA install-recursive \
	install-servicemenuDATA install-strip install-xdg_appsDATA \
	installcheck installcheck-am installdirs installdirs-am \
	installdirs-recursive maintainer-clean maintainer-clean-generic \
	maintainer-clean-recursive mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool mostlyclean-recursive \
	pdf pdf-am pdf-recursive ps ps-am ps-recursive tags \
	tags-recursive uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-configDATA uninstall-info-am uninstall-info-recursive \
	uninstall-kde_servicetypesDATA uninstall-libLTLIBRARIES \
	uninstall-profiledataDATA uninstall-rcDATA uninstall-recursive \
	uninstall-servicemenuDATA uninstall-xdg_appsDATA


messages: rc.cpp
	$(EXTRACTRC) `find . -name "*.rc" -o -name "*.ui" -o -name "*.kcfg"` > rc.cpp
	LIST=`find . -name \*.h -o -name \*.hh -o -name \*.H -o -name \*.hxx -o -name \*.hpp -o -name \*.cpp -o -name \*.cc -o -name \*.cxx -o -name \*.ecpp -o -name \*.C`; \
	if test -n "$$LIST"; then \
		$(XGETTEXT) $$LIST -o $(podir)/amarok.pot; \
	fi

install-exec-hook:
	@echo ""
	@echo "=========================="
	@echo "=  amaroK - INSTALLED  ================================"
	@echo "=========================="
	@echo "="
	@echo "=  Type amarok to start!"
	@echo "="
	@echo "=  If you have problems, please consult the README;"
	@echo "=  if the problems continue join us on #amarok."
	@echo "="
	@echo "======================================================="
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 3
playlistbrowser.moc: $(srcdir)/playlistbrowser.h
	$(MOC) $(srcdir)/playlistbrowser.h -o playlistbrowser.moc

#>+ 2
mocs: playlistbrowser.moc

#>+ 3
browserbar.moc: $(srcdir)/browserbar.h
	$(MOC) $(srcdir)/browserbar.h -o browserbar.moc

#>+ 2
mocs: browserbar.moc

#>+ 3
statistics.moc: $(srcdir)/statistics.h
	$(MOC) $(srcdir)/statistics.h -o statistics.moc

#>+ 2
mocs: statistics.moc

#>+ 3
ktrm.moc: $(srcdir)/ktrm.h
	$(MOC) $(srcdir)/ktrm.h -o ktrm.moc

#>+ 2
mocs: ktrm.moc

#>+ 3
directorylist.moc: $(srcdir)/directorylist.h
	$(MOC) $(srcdir)/directorylist.h -o directorylist.moc

#>+ 2
mocs: directorylist.moc

#>+ 3
hintlineedit.moc: $(srcdir)/hintlineedit.h
	$(MOC) $(srcdir)/hintlineedit.h -o hintlineedit.moc

#>+ 2
mocs: hintlineedit.moc

#>+ 3
moodbar.moc: $(srcdir)/moodbar.h
	$(MOC) $(srcdir)/moodbar.h -o moodbar.moc

#>+ 2
mocs: moodbar.moc

#>+ 3
mediabrowser.moc: $(srcdir)/mediabrowser.h
	$(MOC) $(srcdir)/mediabrowser.h -o mediabrowser.moc

#>+ 2
mocs: mediabrowser.moc

#>+ 3
mediumpluginmanager.moc: $(srcdir)/mediumpluginmanager.h
	$(MOC) $(srcdir)/mediumpluginmanager.h -o mediumpluginmanager.moc

#>+ 2
mocs: mediumpluginmanager.moc

#>+ 3
tagdialog.moc: $(srcdir)/tagdialog.h
	$(MOC) $(srcdir)/tagdialog.h -o tagdialog.moc

#>+ 2
mocs: tagdialog.moc

#>+ 3
enginecontroller.moc: $(srcdir)/enginecontroller.h
	$(MOC) $(srcdir)/enginecontroller.h -o enginecontroller.moc

#>+ 2
mocs: enginecontroller.moc

#>+ 3
contextbrowser.moc: $(srcdir)/contextbrowser.h
	$(MOC) $(srcdir)/contextbrowser.h -o contextbrowser.moc

#>+ 2
mocs: contextbrowser.moc

#>+ 3
xmlloader.moc: $(srcdir)/xmlloader.h
	$(MOC) $(srcdir)/xmlloader.h -o xmlloader.moc

#>+ 2
mocs: xmlloader.moc

#>+ 3
collectionbrowser.moc: $(srcdir)/collectionbrowser.h
	$(MOC) $(srcdir)/collectionbrowser.h -o collectionbrowser.moc

#>+ 2
mocs: collectionbrowser.moc

#>+ 3
devicemanager.moc: $(srcdir)/devicemanager.h
	$(MOC) $(srcdir)/devicemanager.h -o devicemanager.moc

#>+ 2
mocs: devicemanager.moc

#>+ 3
app.moc: $(srcdir)/app.h
	$(MOC) $(srcdir)/app.h -o app.moc

#>+ 2
mocs: app.moc

#>+ 3
refreshimages.moc: $(srcdir)/refreshimages.h
	$(MOC) $(srcdir)/refreshimages.h -o refreshimages.moc

#>+ 2
mocs: refreshimages.moc

#>+ 3
playlistbrowseritem.moc: $(srcdir)/playlistbrowseritem.h
	$(MOC) $(srcdir)/playlistbrowseritem.h -o playlistbrowseritem.moc

#>+ 2
mocs: playlistbrowseritem.moc

#>+ 3
smartplaylisteditor.moc: $(srcdir)/smartplaylisteditor.h
	$(MOC) $(srcdir)/smartplaylisteditor.h -o smartplaylisteditor.moc

#>+ 2
mocs: smartplaylisteditor.moc

#>+ 3
htmlview.moc: $(srcdir)/htmlview.h
	$(MOC) $(srcdir)/htmlview.h -o htmlview.moc

#>+ 2
mocs: htmlview.moc

#>+ 3
mydiroperator.moc: $(srcdir)/mydiroperator.h
	$(MOC) $(srcdir)/mydiroperator.h -o mydiroperator.moc

#>+ 2
mocs: mydiroperator.moc

#>+ 3
podcastsettings.moc: $(srcdir)/podcastsettings.h
	$(MOC) $(srcdir)/podcastsettings.h -o podcastsettings.moc

#>+ 2
mocs: podcastsettings.moc

#>+ 3
actionclasses.moc: $(srcdir)/actionclasses.h
	$(MOC) $(srcdir)/actionclasses.h -o actionclasses.moc

#>+ 2
mocs: actionclasses.moc

#>+ 3
columnlist.moc: $(srcdir)/columnlist.h
	$(MOC) $(srcdir)/columnlist.h -o columnlist.moc

#>+ 2
mocs: columnlist.moc

#>+ 3
filebrowser.moc: $(srcdir)/filebrowser.h
	$(MOC) $(srcdir)/filebrowser.h -o filebrowser.moc

#>+ 2
mocs: filebrowser.moc

#>+ 3
scrobbler.moc: $(srcdir)/scrobbler.h
	$(MOC) $(srcdir)/scrobbler.h -o scrobbler.moc

#>+ 2
mocs: scrobbler.moc

#>+ 3
prettypopupmenu.moc: $(srcdir)/prettypopupmenu.h
	$(MOC) $(srcdir)/prettypopupmenu.h -o prettypopupmenu.moc

#>+ 2
mocs: prettypopupmenu.moc

#>+ 3
osd.moc: $(srcdir)/osd.h
	$(MOC) $(srcdir)/osd.h -o osd.moc

#>+ 2
mocs: osd.moc

#>+ 3
scriptmanager.moc: $(srcdir)/scriptmanager.h
	$(MOC) $(srcdir)/scriptmanager.h -o scriptmanager.moc

#>+ 2
mocs: scriptmanager.moc

#>+ 3
configdialog.moc: $(srcdir)/configdialog.h
	$(MOC) $(srcdir)/configdialog.h -o configdialog.moc

#>+ 2
mocs: configdialog.moc

#>+ 3
transferdialog.moc: $(srcdir)/transferdialog.h
	$(MOC) $(srcdir)/transferdialog.h -o transferdialog.moc

#>+ 2
mocs: transferdialog.moc

#>+ 3
equalizersetup.moc: $(srcdir)/equalizersetup.h
	$(MOC) $(srcdir)/equalizersetup.h -o equalizersetup.moc

#>+ 2
mocs: equalizersetup.moc

#>+ 3
playlistwindow.moc: $(srcdir)/playlistwindow.h
	$(MOC) $(srcdir)/playlistwindow.h -o playlistwindow.moc

#>+ 2
mocs: playlistwindow.moc

#>+ 3
tooltip.moc: $(srcdir)/tooltip.h
	$(MOC) $(srcdir)/tooltip.h -o tooltip.moc

#>+ 2
mocs: tooltip.moc

#>+ 3
tracktooltip.moc: $(srcdir)/tracktooltip.h
	$(MOC) $(srcdir)/tracktooltip.h -o tracktooltip.moc

#>+ 2
mocs: tracktooltip.moc

#>+ 3
clicklineedit.moc: $(srcdir)/clicklineedit.h
	$(MOC) $(srcdir)/clicklineedit.h -o clicklineedit.moc

#>+ 2
mocs: clicklineedit.moc

#>+ 3
socketserver.moc: $(srcdir)/socketserver.h
	$(MOC) $(srcdir)/socketserver.h -o socketserver.moc

#>+ 2
mocs: socketserver.moc

#>+ 3
playlistselection.moc: $(srcdir)/playlistselection.h
	$(MOC) $(srcdir)/playlistselection.h -o playlistselection.moc

#>+ 2
mocs: playlistselection.moc

#>+ 3
playlistloader.moc: $(srcdir)/playlistloader.h
	$(MOC) $(srcdir)/playlistloader.h -o playlistloader.moc

#>+ 2
mocs: playlistloader.moc

#>+ 3
scancontroller.moc: $(srcdir)/scancontroller.h
	$(MOC) $(srcdir)/scancontroller.h -o scancontroller.moc

#>+ 2
mocs: scancontroller.moc

#>+ 3
equalizerpresetmanager.moc: $(srcdir)/equalizerpresetmanager.h
	$(MOC) $(srcdir)/equalizerpresetmanager.h -o equalizerpresetmanager.moc

#>+ 2
mocs: equalizerpresetmanager.moc

#>+ 3
deviceconfiguredialog.moc: $(srcdir)/deviceconfiguredialog.h
	$(MOC) $(srcdir)/deviceconfiguredialog.h -o deviceconfiguredialog.moc

#>+ 2
mocs: deviceconfiguredialog.moc

#>+ 3
collectiondb.moc: $(srcdir)/collectiondb.h
	$(MOC) $(srcdir)/collectiondb.h -o collectiondb.moc

#>+ 2
mocs: collectiondb.moc

#>+ 3
xmlloader_p.moc: $(srcdir)/xmlloader_p.h
	$(MOC) $(srcdir)/xmlloader_p.h -o xmlloader_p.moc

#>+ 2
mocs: xmlloader_p.moc

#>+ 3
queuemanager.moc: $(srcdir)/queuemanager.h
	$(MOC) $(srcdir)/queuemanager.h -o queuemanager.moc

#>+ 2
mocs: queuemanager.moc

#>+ 3
multitabbar.moc: $(srcdir)/multitabbar.h
	$(MOC) $(srcdir)/multitabbar.h -o multitabbar.moc

#>+ 2
mocs: multitabbar.moc

#>+ 3
playlist.moc: $(srcdir)/playlist.h
	$(MOC) $(srcdir)/playlist.h -o playlist.moc

#>+ 2
mocs: playlist.moc

#>+ 3
covermanager.moc: $(srcdir)/covermanager.h
	$(MOC) $(srcdir)/covermanager.h -o covermanager.moc

#>+ 2
mocs: covermanager.moc

#>+ 3
multitabbar_p.moc: $(srcdir)/multitabbar_p.h
	$(MOC) $(srcdir)/multitabbar_p.h -o multitabbar_p.moc

#>+ 2
mocs: multitabbar_p.moc

#>+ 3
threadweaver.moc: $(srcdir)/threadweaver.h
	$(MOC) $(srcdir)/threadweaver.h -o threadweaver.moc

#>+ 2
mocs: threadweaver.moc

#>+ 3
trackpickerdialog.moc: $(srcdir)/trackpickerdialog.h
	$(MOC) $(srcdir)/trackpickerdialog.h -o trackpickerdialog.moc

#>+ 2
mocs: trackpickerdialog.moc

#>+ 3
playerwindow.moc: $(srcdir)/playerwindow.h
	$(MOC) $(srcdir)/playerwindow.h -o playerwindow.moc

#>+ 2
mocs: playerwindow.moc

#>+ 3
coverfetcher.moc: $(srcdir)/coverfetcher.h
	$(MOC) $(srcdir)/coverfetcher.h -o coverfetcher.moc

#>+ 2
mocs: coverfetcher.moc

#>+ 3
pixmapviewer.moc: $(srcdir)/pixmapviewer.h
	$(MOC) $(srcdir)/pixmapviewer.h -o pixmapviewer.moc

#>+ 2
mocs: pixmapviewer.moc

#>+ 3
effectwidget.moc: $(srcdir)/effectwidget.h
	$(MOC) $(srcdir)/effectwidget.h -o effectwidget.moc

#>+ 2
mocs: effectwidget.moc

#>+ 3
sliderwidget.moc: $(srcdir)/sliderwidget.h
	$(MOC) $(srcdir)/sliderwidget.h -o sliderwidget.moc

#>+ 2
mocs: sliderwidget.moc

#>+ 3
cuefile.moc: $(srcdir)/cuefile.h
	$(MOC) $(srcdir)/cuefile.h -o cuefile.moc

#>+ 2
mocs: cuefile.moc

#>+ 3
clean-metasources:
	-rm -f  playlistbrowser.moc browserbar.moc statistics.moc ktrm.moc directorylist.moc hintlineedit.moc moodbar.moc mediabrowser.moc mediumpluginmanager.moc tagdialog.moc enginecontroller.moc contextbrowser.moc xmlloader.moc collectionbrowser.moc devicemanager.moc app.moc refreshimages.moc playlistbrowseritem.moc smartplaylisteditor.moc htmlview.moc mydiroperator.moc podcastsettings.moc actionclasses.moc columnlist.moc filebrowser.moc scrobbler.moc prettypopupmenu.moc osd.moc scriptmanager.moc configdialog.moc transferdialog.moc equalizersetup.moc playlistwindow.moc tooltip.moc tracktooltip.moc clicklineedit.moc socketserver.moc playlistselection.moc playlistloader.moc scancontroller.moc equalizerpresetmanager.moc deviceconfiguredialog.moc collectiondb.moc xmlloader_p.moc queuemanager.moc multitabbar.moc playlist.moc covermanager.moc multitabbar_p.moc threadweaver.moc trackpickerdialog.moc playerwindow.moc coverfetcher.moc pixmapviewer.moc effectwidget.moc sliderwidget.moc cuefile.moc

#>+ 2
KDE_DIST=firstrunwizard.ui amarokui_xmms.rc playlistbrowser.h refreshimages.h equalizersetup.h Options5.ui.h trackpickerdialogbase.ui Options2.ui amarok.desktop pixmapviewer.h podcastsettings.h transferdialog.h mydiroperator.h ktrm.h Options4.ui statistics.h SConscript scriptmanager.h playlistwindow.h amarok.h playlistloader.h playlistbrowseritem.h medium.h engineobserver.h Options7.ui hintlineedit.h tagguesserconfigdialog.ui socketserver.h playerwindow.h atomicstring.h hi22-app-amarok.png xmlloader.h Options8.ui queuemanager.h tracktooltip.h threadweaver.h tagguesser.h collectionbrowser.h hi128-app-amarok.png browserbar.h moodbar.h newdynamic.ui playlistitem.h collectiondb.h contextbrowser.h amarok_append.desktop playlistselection.h deviceconfiguredialog.h directorylist.h osd.h debug.h hi64-app-amarok.png scrobbler.h Makefile.in qstringx.h tagdialog.h organizecollectiondialog.ui.h amarokrc organizecollectiondialog.ui xmlloader_p.h pluginmanager.h systray.h enginecontroller.h amarok.profile.xml firstrunwizard.ui.h cuefile.h bcpp.cfg tagdialogbase.ui.h amarok_export.h mydirlister.h smartplaylisteditor.h hi32-app-amarok.png tagdialogbase.ui sliderwidget.h tooltip.h atomicurl.h actionclasses.h Options2.ui.h hi48-app-amarok.png fht.h dynamicmode.h columnlist.h filebrowser.h podcastbundle.h clicklineedit.h equalizergraph.h xspfplaylist.h multitabbar_p.h effectwidget.h colorgenerator.h k3bexporter.h scriptmanagerbase.ui playlist.h devicemanager.h multitabbar.h metabundle.h amarok_plugin.desktop amarokui.rc prettypopupmenu.h htmlview.h configdialog.h browserToolBar.h dbsetup.ui hi16-app-amarok.png podcastsettingsbase.ui app.h tagguesserconfigdialog.ui.h Options1.ui covermanager.h scancontroller.h kbookmarkhandler.h mediumpluginmanager.h mediabrowser.h trackpickerdialog.h tdebug.h equalizerpresetmanager.h Options5.ui coverfetcher.h 

#>+ 18
clean-ui:
	-rm -f \
	Options1.cpp Options1.h Options1.moc \
	Options2.cpp Options2.h Options2.moc \
	Options4.cpp Options4.h Options4.moc \
	Options5.cpp Options5.h Options5.moc \
	Options7.cpp Options7.h Options7.moc \
	Options8.cpp Options8.h Options8.moc \
	dbsetup.cpp dbsetup.h dbsetup.moc \
	firstrunwizard.cpp firstrunwizard.h firstrunwizard.moc \
	newdynamic.cpp newdynamic.h newdynamic.moc \
	organizecollectiondialog.cpp organizecollectiondialog.h organizecollectiondialog.moc \
	podcastsettingsbase.cpp podcastsettingsbase.h podcastsettingsbase.moc \
	scriptmanagerbase.cpp scriptmanagerbase.h scriptmanagerbase.moc \
	tagdialogbase.cpp tagdialogbase.h tagdialogbase.moc \
	tagguesserconfigdialog.cpp tagguesserconfigdialog.h tagguesserconfigdialog.moc \
	trackpickerdialogbase.cpp trackpickerdialogbase.h trackpickerdialogbase.moc 

#>+ 2
docs-am:

#>+ 22
install-kde-icons:
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps
	$(INSTALL_DATA) $(srcdir)/hi16-app-amarok.png $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps/amarok.png
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/128x128/apps
	$(INSTALL_DATA) $(srcdir)/hi128-app-amarok.png $(DESTDIR)$(kde_icondir)/hicolor/128x128/apps/amarok.png
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/64x64/apps
	$(INSTALL_DATA) $(srcdir)/hi64-app-amarok.png $(DESTDIR)$(kde_icondir)/hicolor/64x64/apps/amarok.png
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/22x22/apps
	$(INSTALL_DATA) $(srcdir)/hi22-app-amarok.png $(DESTDIR)$(kde_icondir)/hicolor/22x22/apps/amarok.png
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps
	$(INSTALL_DATA) $(srcdir)/hi32-app-amarok.png $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps/amarok.png
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/48x48/apps
	$(INSTALL_DATA) $(srcdir)/hi48-app-amarok.png $(DESTDIR)$(kde_icondir)/hicolor/48x48/apps/amarok.png

uninstall-kde-icons:
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps/amarok.png
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/128x128/apps/amarok.png
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/64x64/apps/amarok.png
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/22x22/apps/amarok.png
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps/amarok.png
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/48x48/apps/amarok.png

#>+ 6
force-reedit:
		cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  amarok/src/Makefile
	cd $(top_srcdir) && perl admin/am_edit amarok/src/Makefile.in


#>+ 21
clean-bcheck: 
	rm -f *.bchecktest.cc *.bchecktest.cc.class a.out

bcheck: bcheck-recursive

bcheck-am:
	@for i in ; do \
	    if test $(srcdir)/$$i -nt $$i.bchecktest.cc; then \
	        echo "int main() {return 0;}" > $$i.bchecktest.cc ; \
	        echo "#include \"$$i\"" >> $$i.bchecktest.cc ; \
	        echo "$$i"; \
	        if ! $(CXXCOMPILE)  --dump-class-hierarchy -c $$i.bchecktest.cc; then \
	            rm -f $$i.bchecktest.cc; exit 1; \
	        fi ; \
	        echo "" >> $$i.bchecktest.cc.class; \
	        perl $(top_srcdir)/admin/bcheck.pl $$i.bchecktest.cc.class || { rm -f $$i.bchecktest.cc; exit 1; }; \
	        rm -f a.out; \
	    fi ; \
	done


#>+ 11
libamarok_la.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/actionclasses.cpp $(srcdir)/app.cpp $(srcdir)/atomicstring.cpp $(srcdir)/atomicurl.cpp $(srcdir)/browserbar.cpp $(srcdir)/clicklineedit.cpp $(srcdir)/collectionbrowser.cpp $(srcdir)/collectiondb.cpp $(srcdir)/columnlist.cpp $(srcdir)/configdialog.cpp $(srcdir)/contextbrowser.cpp $(srcdir)/coverfetcher.cpp $(srcdir)/covermanager.cpp $(srcdir)/pixmapviewer.cpp $(srcdir)/cuefile.cpp $(srcdir)/deviceconfiguredialog.cpp $(srcdir)/devicemanager.cpp $(srcdir)/directorylist.cpp $(srcdir)/effectwidget.cpp $(srcdir)/enginecontroller.cpp $(srcdir)/engineobserver.cpp $(srcdir)/equalizergraph.cpp $(srcdir)/equalizerpresetmanager.cpp $(srcdir)/equalizersetup.cpp $(srcdir)/fht.cpp $(srcdir)/filebrowser.cpp $(srcdir)/hintlineedit.cpp $(srcdir)/htmlview.cpp $(srcdir)/iconloader.cpp $(srcdir)/k3bexporter.cpp $(srcdir)/kbookmarkhandler.cpp $(srcdir)/ktrm.cpp $(srcdir)/mediabrowser.cpp $(srcdir)/medium.cpp $(srcdir)/mediumpluginmanager.cpp $(srcdir)/metabundle.cpp $(srcdir)/moodbar.cpp $(srcdir)/mydiroperator.cpp $(srcdir)/multitabbar.cpp $(srcdir)/osd.cpp $(srcdir)/dynamicmode.cpp $(srcdir)/playerwindow.cpp $(srcdir)/playlist.cpp $(srcdir)/playlistbrowser.cpp $(srcdir)/playlistbrowseritem.cpp $(srcdir)/playlistitem.cpp $(srcdir)/playlistloader.cpp $(srcdir)/playlistselection.cpp $(srcdir)/playlistwindow.cpp $(srcdir)/pluginmanager.cpp $(srcdir)/podcastsettings.cpp $(srcdir)/prettypopupmenu.cpp $(srcdir)/queuemanager.cpp $(srcdir)/refreshimages.cpp $(srcdir)/scancontroller.cpp $(srcdir)/scriptmanager.cpp $(srcdir)/scrobbler.cpp $(srcdir)/sliderwidget.cpp $(srcdir)/smartplaylisteditor.cpp $(srcdir)/socketserver.cpp $(srcdir)/statistics.cpp $(srcdir)/systray.cpp $(srcdir)/tagdialog.cpp $(srcdir)/tagguesser.cpp $(srcdir)/threadweaver.cpp $(srcdir)/tooltip.cpp $(srcdir)/tracktooltip.cpp $(srcdir)/trackpickerdialog.cpp $(srcdir)/transferdialog.cpp $(srcdir)/xmlloader.cpp $(srcdir)/xspfplaylist.cpp Options1.cpp Options2.cpp Options4.cpp Options5.cpp Options7.cpp Options8.cpp dbsetup.cpp firstrunwizard.cpp newdynamic.cpp organizecollectiondialog.cpp podcastsettingsbase.cpp scriptmanagerbase.cpp tagdialogbase.cpp tagguesserconfigdialog.cpp trackpickerdialogbase.cpp  browserbar.moc playlistbrowser.moc statistics.moc firstrunwizard.moc hintlineedit.moc mediabrowser.moc moodbar.moc trackpickerdialogbase.moc tagguesserconfigdialog.moc Options2.moc refreshimages.moc app.moc devicemanager.moc Options4.moc prettypopupmenu.moc Options5.moc Options7.moc transferdialog.moc socketserver.moc playlistselection.moc scancontroller.moc collectiondb.moc deviceconfiguredialog.moc equalizerpresetmanager.moc xmlloader_p.moc tagdialogbase.moc multitabbar.moc multitabbar_p.moc threadweaver.moc scriptmanagerbase.moc cuefile.moc Options8.moc ktrm.moc directorylist.moc mediumpluginmanager.moc newdynamic.moc tagdialog.moc enginecontroller.moc dbsetup.moc contextbrowser.moc xmlloader.moc collectionbrowser.moc podcastsettingsbase.moc playlistbrowseritem.moc organizecollectiondialog.moc smartplaylisteditor.moc htmlview.moc mydiroperator.moc podcastsettings.moc actionclasses.moc columnlist.moc filebrowser.moc Options1.moc scrobbler.moc osd.moc scriptmanager.moc configdialog.moc equalizersetup.moc playlistwindow.moc tooltip.moc tracktooltip.moc clicklineedit.moc playlistloader.moc queuemanager.moc playlist.moc covermanager.moc trackpickerdialog.moc playerwindow.moc pixmapviewer.moc coverfetcher.moc effectwidget.moc sliderwidget.moc
	@echo 'creating libamarok_la.all_cpp.cpp ...'; \
	rm -f libamarok_la.all_cpp.files libamarok_la.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> libamarok_la.all_cpp.final; \
	for file in actionclasses.cpp app.cpp atomicstring.cpp atomicurl.cpp browserbar.cpp clicklineedit.cpp collectionbrowser.cpp collectiondb.cpp columnlist.cpp configdialog.cpp contextbrowser.cpp coverfetcher.cpp covermanager.cpp pixmapviewer.cpp cuefile.cpp deviceconfiguredialog.cpp devicemanager.cpp directorylist.cpp effectwidget.cpp enginecontroller.cpp engineobserver.cpp equalizergraph.cpp equalizerpresetmanager.cpp equalizersetup.cpp fht.cpp filebrowser.cpp hintlineedit.cpp htmlview.cpp iconloader.cpp k3bexporter.cpp kbookmarkhandler.cpp ktrm.cpp mediabrowser.cpp medium.cpp mediumpluginmanager.cpp metabundle.cpp moodbar.cpp mydiroperator.cpp multitabbar.cpp osd.cpp dynamicmode.cpp playerwindow.cpp playlist.cpp playlistbrowser.cpp playlistbrowseritem.cpp playlistitem.cpp playlistloader.cpp playlistselection.cpp playlistwindow.cpp pluginmanager.cpp podcastsettings.cpp prettypopupmenu.cpp queuemanager.cpp refreshimages.cpp scancontroller.cpp scriptmanager.cpp scrobbler.cpp sliderwidget.cpp smartplaylisteditor.cpp socketserver.cpp statistics.cpp systray.cpp tagdialog.cpp tagguesser.cpp threadweaver.cpp tooltip.cpp tracktooltip.cpp trackpickerdialog.cpp transferdialog.cpp xmlloader.cpp xspfplaylist.cpp Options1.cpp Options2.cpp Options4.cpp Options5.cpp Options7.cpp Options8.cpp dbsetup.cpp firstrunwizard.cpp newdynamic.cpp organizecollectiondialog.cpp podcastsettingsbase.cpp scriptmanagerbase.cpp tagdialogbase.cpp tagguesserconfigdialog.cpp trackpickerdialogbase.cpp ; do \
	  echo "#include \"$$file\"" >> libamarok_la.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> libamarok_la.all_cpp.final; \
	done; \
	cat libamarok_la.all_cpp.final libamarok_la.all_cpp.files > libamarok_la.all_cpp.cpp; \
	rm -f libamarok_la.all_cpp.final libamarok_la.all_cpp.files

#>+ 3
clean-final:
	-rm -f libamarok_la.all_cpp.cpp

#>+ 3
final:
	$(MAKE) libamarok_la_OBJECTS="$(libamarok_la_final_OBJECTS)" all-am

#>+ 3
final-install:
	$(MAKE) libamarok_la_OBJECTS="$(libamarok_la_final_OBJECTS)" install-am

#>+ 3
no-final:
	$(MAKE) libamarok_la_OBJECTS="$(libamarok_la_nofinal_OBJECTS)" all-am

#>+ 3
no-final-install:
	$(MAKE) libamarok_la_OBJECTS="$(libamarok_la_nofinal_OBJECTS)" install-am

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 186
directorylist.lo: directorylist.moc 
threadweaver.lo: threadweaver.moc 
playlist.o: playlist.moc 
ktrm.o: ktrm.moc 
$(srcdir)/metabundle.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/covermanager.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
mydiroperator.o: mydiroperator.moc 
refreshimages.lo: refreshimages.moc 
$(srcdir)/multitabbar.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
equalizerpresetmanager.lo: equalizerpresetmanager.moc 
app.lo: app.moc 
xmlloader.lo: xmlloader.moc xmlloader_p.moc 
mediabrowser.o: mediabrowser.moc 
$(srcdir)/dbsetup.ui.h: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
playlistwindow.lo: playlistwindow.moc 
$(srcdir)/transferdialog.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
effectwidget.o: effectwidget.moc 
$(srcdir)/prettypopupmenu.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
enginecontroller.o: enginecontroller.moc 
refreshimages.o: refreshimages.moc 
scrobbler.o: scrobbler.moc 
podcastsettings.lo: podcastsettings.moc 
collectionbrowser.o: collectionbrowser.moc 
nmcheck-am: nmcheck
$(srcdir)/osd.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
scriptmanager.lo: scriptmanager.moc 
columnlist.o: columnlist.moc 
playlistbrowser.lo: playlistbrowser.moc 
$(srcdir)/effectwidget.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
moodbar.o: moodbar.moc 
tooltip.lo: tooltip.moc 
$(srcdir)/systray.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/mydiroperator.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/configdialog.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
hintlineedit.o: hintlineedit.moc 
tooltip.o: tooltip.moc 
osd.o: osd.moc 
columnlist.lo: columnlist.moc 
collectiondb.lo: collectiondb.moc 
$(srcdir)/trackpickerdialog.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/xspfplaylist.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
htmlview.lo: htmlview.moc 
coverfetcher.lo: coverfetcher.moc 
statistics.lo: statistics.moc 
$(srcdir)/smartplaylisteditor.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
hintlineedit.lo: hintlineedit.moc 
$(srcdir)/playerwindow.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/fht.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/playlistitem.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/kbookmarkhandler.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/coverfetcher.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
transferdialog.lo: transferdialog.moc 
directorylist.o: directorylist.moc 
smartplaylisteditor.lo: smartplaylisteditor.moc 
coverfetcher.o: coverfetcher.moc 
playlistselection.o: playlistselection.moc 
browserbar.lo: browserbar.moc 
trackpickerdialog.o: trackpickerdialog.moc 
ktrm.lo: ktrm.moc 
tracktooltip.o: tracktooltip.moc 
$(srcdir)/tracktooltip.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/engineobserver.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
queuemanager.lo: queuemanager.moc 
$(srcdir)/mediabrowser.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
covermanager.o: covermanager.moc 
$(srcdir)/contextbrowser.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/tagdialog.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/atomicstring.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
devicemanager.lo: devicemanager.moc 
$(srcdir)/playlistwindow.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/medium.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
scancontroller.lo: scancontroller.moc 
scancontroller.o: scancontroller.moc 
configdialog.o: configdialog.moc 
$(srcdir)/statistics.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
playlistbrowseritem.lo: playlistbrowseritem.moc 
equalizerpresetmanager.o: equalizerpresetmanager.moc 
tracktooltip.lo: tracktooltip.moc 
scriptmanager.o: scriptmanager.moc 
playerwindow.lo: playerwindow.moc 
threadweaver.o: threadweaver.moc 
clicklineedit.lo: clicklineedit.moc 
$(srcdir)/playlistbrowser.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
trackpickerdialog.lo: trackpickerdialog.moc 
$(srcdir)/playlist.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
socketserver.o: socketserver.moc 
$(srcdir)/xmlloader.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/k3bexporter.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
multitabbar.o: multitabbar.moc multitabbar_p.moc 
$(srcdir)/dynamicmode.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
queuemanager.o: queuemanager.moc 
playerwindow.o: playerwindow.moc 
tagdialog.o: tagdialog.moc 
$(srcdir)/hintlineedit.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/tooltip.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/queuemanager.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
contextbrowser.o: contextbrowser.moc 
collectionbrowser.lo: collectionbrowser.moc 
mydiroperator.lo: mydiroperator.moc 
cuefile.o: cuefile.moc 
podcastsettings.o: podcastsettings.moc 
$(srcdir)/tagguesser.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/pluginmanager.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
playlistloader.lo: playlistloader.moc 
$(srcdir)/threadweaver.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
playlistloader.o: playlistloader.moc 
$(srcdir)/iconloader.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/pixmapviewer.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
collectiondb.o: collectiondb.moc 
mediabrowser.lo: mediabrowser.moc 
$(srcdir)/scrobbler.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
playlistbrowser.o: playlistbrowser.moc 
$(srcdir)/enginecontroller.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/filebrowser.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
app.o: app.moc 
sliderwidget.lo: sliderwidget.moc 
$(srcdir)/equalizergraph.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/moodbar.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
smartplaylisteditor.o: smartplaylisteditor.moc 
equalizersetup.lo: equalizersetup.moc 
$(srcdir)/playlistselection.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
statistics.o: statistics.moc 
equalizersetup.o: equalizersetup.moc 
enginecontroller.lo: enginecontroller.moc 
deviceconfiguredialog.lo: deviceconfiguredialog.moc 
$(srcdir)/directorylist.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
moodbar.lo: moodbar.moc 
$(srcdir)/cuefile.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/playlistloader.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
playlistbrowseritem.o: playlistbrowseritem.moc 
contextbrowser.lo: contextbrowser.moc 
deviceconfiguredialog.o: deviceconfiguredialog.moc 
pixmapviewer.lo: pixmapviewer.moc 
$(srcdir)/equalizerpresetmanager.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
mediumpluginmanager.lo: mediumpluginmanager.moc 
tagdialog.lo: tagdialog.moc 
$(srcdir)/devicemanager.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/atomicurl.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/equalizersetup.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/columnlist.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/Options1.ui.h: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
cuefile.lo: cuefile.moc 
browserbar.o: browserbar.moc 
$(srcdir)/refreshimages.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/playlistbrowseritem.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/collectionbrowser.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
prettypopupmenu.lo: prettypopupmenu.moc 
mediumpluginmanager.o: mediumpluginmanager.moc 
$(srcdir)/browserbar.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
devicemanager.o: devicemanager.moc 
$(srcdir)/scancontroller.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
configdialog.lo: configdialog.moc 
effectwidget.lo: effectwidget.moc 
xmlloader.o: xmlloader.moc xmlloader_p.moc 
htmlview.o: htmlview.moc 
clicklineedit.o: clicklineedit.moc 
playlistwindow.o: playlistwindow.moc 
actionclasses.lo: actionclasses.moc 
$(srcdir)/clicklineedit.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
filebrowser.lo: filebrowser.moc 
$(srcdir)/ktrm.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/collectiondb.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
filebrowser.o: filebrowser.moc 
multitabbar.lo: multitabbar.moc multitabbar_p.moc 
$(srcdir)/app.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
sliderwidget.o: sliderwidget.moc 
playlist.lo: playlist.moc 
$(srcdir)/podcastsettings.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/scriptmanager.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
osd.lo: osd.moc 
$(srcdir)/deviceconfiguredialog.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/mediumpluginmanager.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
scrobbler.lo: scrobbler.moc 
actionclasses.o: actionclasses.moc 
nmcheck: 
playlistselection.lo: playlistselection.moc 
prettypopupmenu.o: prettypopupmenu.moc 
$(srcdir)/htmlview.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/socketserver.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
transferdialog.o: transferdialog.moc 
pixmapviewer.o: pixmapviewer.moc 
covermanager.lo: covermanager.moc 
socketserver.lo: socketserver.moc 
$(srcdir)/sliderwidget.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 
$(srcdir)/actionclasses.cpp: Options1.h Options2.h Options4.h Options5.h Options7.h Options8.h dbsetup.h firstrunwizard.h newdynamic.h organizecollectiondialog.h podcastsettingsbase.h scriptmanagerbase.h tagdialogbase.h tagguesserconfigdialog.h trackpickerdialogbase.h 

#>+ 225
Options8.cpp: $(srcdir)/Options8.ui Options8.h Options8.moc
	rm -f Options8.cpp
	echo '#include <kdialog.h>' > Options8.cpp
	echo '#include <klocale.h>' >> Options8.cpp
	$(UIC) -tr ${UIC_TR} -i Options8.h $(srcdir)/Options8.ui > Options8.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" Options8.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_Options8,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> Options8.cpp ;\
	rm -f Options8.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "Options8.moc"' >> Options8.cpp; else rm -f Options8.cpp ; exit $$ret ; fi

Options8.h: $(srcdir)/Options8.ui
	rm -rf Options8.h;
	$(UIC) $(srcdir)/Options8.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> Options8.h ;
Options8.moc: Options8.h
	$(MOC) Options8.h -o Options8.moc

newdynamic.cpp: $(srcdir)/newdynamic.ui newdynamic.h newdynamic.moc
	rm -f newdynamic.cpp
	echo '#include <kdialog.h>' > newdynamic.cpp
	echo '#include <klocale.h>' >> newdynamic.cpp
	$(UIC) -tr ${UIC_TR} -i newdynamic.h $(srcdir)/newdynamic.ui > newdynamic.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" newdynamic.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_newdynamic,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> newdynamic.cpp ;\
	rm -f newdynamic.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "newdynamic.moc"' >> newdynamic.cpp; else rm -f newdynamic.cpp ; exit $$ret ; fi

newdynamic.h: $(srcdir)/newdynamic.ui
	rm -rf newdynamic.h;
	$(UIC) $(srcdir)/newdynamic.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> newdynamic.h ;
newdynamic.moc: newdynamic.h
	$(MOC) newdynamic.h -o newdynamic.moc

Options7.cpp: $(srcdir)/Options7.ui Options7.h Options7.moc
	rm -f Options7.cpp
	echo '#include <kdialog.h>' > Options7.cpp
	echo '#include <klocale.h>' >> Options7.cpp
	$(UIC) -tr ${UIC_TR} -i Options7.h $(srcdir)/Options7.ui > Options7.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" Options7.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_Options7,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> Options7.cpp ;\
	rm -f Options7.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "Options7.moc"' >> Options7.cpp; else rm -f Options7.cpp ; exit $$ret ; fi

Options7.h: $(srcdir)/Options7.ui
	rm -rf Options7.h;
	$(UIC) $(srcdir)/Options7.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> Options7.h ;
Options7.moc: Options7.h
	$(MOC) Options7.h -o Options7.moc

Options4.cpp: $(srcdir)/Options4.ui Options4.h Options4.moc
	rm -f Options4.cpp
	echo '#include <kdialog.h>' > Options4.cpp
	echo '#include <klocale.h>' >> Options4.cpp
	$(UIC) -tr ${UIC_TR} -i Options4.h $(srcdir)/Options4.ui > Options4.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" Options4.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_Options4,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> Options4.cpp ;\
	rm -f Options4.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "Options4.moc"' >> Options4.cpp; else rm -f Options4.cpp ; exit $$ret ; fi

Options4.h: $(srcdir)/Options4.ui
	rm -rf Options4.h;
	$(UIC) $(srcdir)/Options4.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> Options4.h ;
Options4.moc: Options4.h
	$(MOC) Options4.h -o Options4.moc

trackpickerdialogbase.cpp: $(srcdir)/trackpickerdialogbase.ui trackpickerdialogbase.h trackpickerdialogbase.moc
	rm -f trackpickerdialogbase.cpp
	echo '#include <kdialog.h>' > trackpickerdialogbase.cpp
	echo '#include <klocale.h>' >> trackpickerdialogbase.cpp
	$(UIC) -tr ${UIC_TR} -i trackpickerdialogbase.h $(srcdir)/trackpickerdialogbase.ui > trackpickerdialogbase.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" trackpickerdialogbase.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_trackpickerdialogbase,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> trackpickerdialogbase.cpp ;\
	rm -f trackpickerdialogbase.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "trackpickerdialogbase.moc"' >> trackpickerdialogbase.cpp; else rm -f trackpickerdialogbase.cpp ; exit $$ret ; fi

trackpickerdialogbase.h: $(srcdir)/trackpickerdialogbase.ui
	rm -rf trackpickerdialogbase.h;
	$(UIC) $(srcdir)/trackpickerdialogbase.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> trackpickerdialogbase.h ;
trackpickerdialogbase.moc: trackpickerdialogbase.h
	$(MOC) trackpickerdialogbase.h -o trackpickerdialogbase.moc

tagdialogbase.cpp: $(srcdir)/tagdialogbase.ui tagdialogbase.h tagdialogbase.moc
	rm -f tagdialogbase.cpp
	echo '#include <kdialog.h>' > tagdialogbase.cpp
	echo '#include <klocale.h>' >> tagdialogbase.cpp
	$(UIC) -tr ${UIC_TR} -i tagdialogbase.h $(srcdir)/tagdialogbase.ui > tagdialogbase.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" tagdialogbase.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_tagdialogbase,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> tagdialogbase.cpp ;\
	rm -f tagdialogbase.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "tagdialogbase.moc"' >> tagdialogbase.cpp; else rm -f tagdialogbase.cpp ; exit $$ret ; fi

tagdialogbase.h: $(srcdir)/tagdialogbase.ui
	rm -rf tagdialogbase.h;
	$(UIC) $(srcdir)/tagdialogbase.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> tagdialogbase.h ;
tagdialogbase.moc: tagdialogbase.h
	$(MOC) tagdialogbase.h -o tagdialogbase.moc

Options5.cpp: $(srcdir)/Options5.ui Options5.h Options5.moc
	rm -f Options5.cpp
	echo '#include <kdialog.h>' > Options5.cpp
	echo '#include <klocale.h>' >> Options5.cpp
	$(UIC) -tr ${UIC_TR} -i Options5.h $(srcdir)/Options5.ui > Options5.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" Options5.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_Options5,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> Options5.cpp ;\
	rm -f Options5.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "Options5.moc"' >> Options5.cpp; else rm -f Options5.cpp ; exit $$ret ; fi

Options5.h: $(srcdir)/Options5.ui
	rm -rf Options5.h;
	$(UIC) $(srcdir)/Options5.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> Options5.h ;
Options5.moc: Options5.h
	$(MOC) Options5.h -o Options5.moc

Options2.cpp: $(srcdir)/Options2.ui Options2.h Options2.moc
	rm -f Options2.cpp
	echo '#include <kdialog.h>' > Options2.cpp
	echo '#include <klocale.h>' >> Options2.cpp
	$(UIC) -tr ${UIC_TR} -i Options2.h $(srcdir)/Options2.ui > Options2.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" Options2.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_Options2,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> Options2.cpp ;\
	rm -f Options2.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "Options2.moc"' >> Options2.cpp; else rm -f Options2.cpp ; exit $$ret ; fi

Options2.h: $(srcdir)/Options2.ui
	rm -rf Options2.h;
	$(UIC) $(srcdir)/Options2.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> Options2.h ;
Options2.moc: Options2.h
	$(MOC) Options2.h -o Options2.moc

organizecollectiondialog.cpp: $(srcdir)/organizecollectiondialog.ui organizecollectiondialog.h organizecollectiondialog.moc
	rm -f organizecollectiondialog.cpp
	echo '#include <kdialog.h>' > organizecollectiondialog.cpp
	echo '#include <klocale.h>' >> organizecollectiondialog.cpp
	$(UIC) -tr ${UIC_TR} -i organizecollectiondialog.h $(srcdir)/organizecollectiondialog.ui > organizecollectiondialog.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" organizecollectiondialog.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_organizecollectiondialog,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> organizecollectiondialog.cpp ;\
	rm -f organizecollectiondialog.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "organizecollectiondialog.moc"' >> organizecollectiondialog.cpp; else rm -f organizecollectiondialog.cpp ; exit $$ret ; fi

organizecollectiondialog.h: $(srcdir)/organizecollectiondialog.ui
	rm -rf organizecollectiondialog.h;
	$(UIC) $(srcdir)/organizecollectiondialog.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> organizecollectiondialog.h ;
organizecollectiondialog.moc: organizecollectiondialog.h
	$(MOC) organizecollectiondialog.h -o organizecollectiondialog.moc

dbsetup.cpp: $(srcdir)/dbsetup.ui dbsetup.h dbsetup.moc
	rm -f dbsetup.cpp
	echo '#include <kdialog.h>' > dbsetup.cpp
	echo '#include <klocale.h>' >> dbsetup.cpp
	$(UIC) -tr ${UIC_TR} -i dbsetup.h $(srcdir)/dbsetup.ui > dbsetup.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" dbsetup.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_dbsetup,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> dbsetup.cpp ;\
	rm -f dbsetup.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "dbsetup.moc"' >> dbsetup.cpp; else rm -f dbsetup.cpp ; exit $$ret ; fi

dbsetup.h: $(srcdir)/dbsetup.ui
	rm -rf dbsetup.h;
	$(UIC) $(srcdir)/dbsetup.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> dbsetup.h ;
dbsetup.moc: dbsetup.h
	$(MOC) dbsetup.h -o dbsetup.moc

firstrunwizard.cpp: $(srcdir)/firstrunwizard.ui firstrunwizard.h firstrunwizard.moc
	rm -f firstrunwizard.cpp
	echo '#include <kdialog.h>' > firstrunwizard.cpp
	echo '#include <klocale.h>' >> firstrunwizard.cpp
	$(UIC) -tr ${UIC_TR} -i firstrunwizard.h $(srcdir)/firstrunwizard.ui > firstrunwizard.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" firstrunwizard.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_firstrunwizard,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> firstrunwizard.cpp ;\
	rm -f firstrunwizard.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "firstrunwizard.moc"' >> firstrunwizard.cpp; else rm -f firstrunwizard.cpp ; exit $$ret ; fi

firstrunwizard.h: $(srcdir)/firstrunwizard.ui
	rm -rf firstrunwizard.h;
	$(UIC) $(srcdir)/firstrunwizard.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> firstrunwizard.h ;
firstrunwizard.moc: firstrunwizard.h
	$(MOC) firstrunwizard.h -o firstrunwizard.moc

scriptmanagerbase.cpp: $(srcdir)/scriptmanagerbase.ui scriptmanagerbase.h scriptmanagerbase.moc
	rm -f scriptmanagerbase.cpp
	echo '#include <kdialog.h>' > scriptmanagerbase.cpp
	echo '#include <klocale.h>' >> scriptmanagerbase.cpp
	$(UIC) -tr ${UIC_TR} -i scriptmanagerbase.h $(srcdir)/scriptmanagerbase.ui > scriptmanagerbase.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" scriptmanagerbase.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_scriptmanagerbase,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> scriptmanagerbase.cpp ;\
	rm -f scriptmanagerbase.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "scriptmanagerbase.moc"' >> scriptmanagerbase.cpp; else rm -f scriptmanagerbase.cpp ; exit $$ret ; fi

scriptmanagerbase.h: $(srcdir)/scriptmanagerbase.ui
	rm -rf scriptmanagerbase.h;
	$(UIC) $(srcdir)/scriptmanagerbase.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> scriptmanagerbase.h ;
scriptmanagerbase.moc: scriptmanagerbase.h
	$(MOC) scriptmanagerbase.h -o scriptmanagerbase.moc

podcastsettingsbase.cpp: $(srcdir)/podcastsettingsbase.ui podcastsettingsbase.h podcastsettingsbase.moc
	rm -f podcastsettingsbase.cpp
	echo '#include <kdialog.h>' > podcastsettingsbase.cpp
	echo '#include <klocale.h>' >> podcastsettingsbase.cpp
	$(UIC) -tr ${UIC_TR} -i podcastsettingsbase.h $(srcdir)/podcastsettingsbase.ui > podcastsettingsbase.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" podcastsettingsbase.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_podcastsettingsbase,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> podcastsettingsbase.cpp ;\
	rm -f podcastsettingsbase.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "podcastsettingsbase.moc"' >> podcastsettingsbase.cpp; else rm -f podcastsettingsbase.cpp ; exit $$ret ; fi

podcastsettingsbase.h: $(srcdir)/podcastsettingsbase.ui
	rm -rf podcastsettingsbase.h;
	$(UIC) $(srcdir)/podcastsettingsbase.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> podcastsettingsbase.h ;
podcastsettingsbase.moc: podcastsettingsbase.h
	$(MOC) podcastsettingsbase.h -o podcastsettingsbase.moc

Options1.cpp: $(srcdir)/Options1.ui Options1.h Options1.moc
	rm -f Options1.cpp
	echo '#include <kdialog.h>' > Options1.cpp
	echo '#include <klocale.h>' >> Options1.cpp
	$(UIC) -tr ${UIC_TR} -i Options1.h $(srcdir)/Options1.ui > Options1.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" Options1.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_Options1,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> Options1.cpp ;\
	rm -f Options1.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "Options1.moc"' >> Options1.cpp; else rm -f Options1.cpp ; exit $$ret ; fi

Options1.h: $(srcdir)/Options1.ui
	rm -rf Options1.h;
	$(UIC) $(srcdir)/Options1.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> Options1.h ;
Options1.moc: Options1.h
	$(MOC) Options1.h -o Options1.moc

tagguesserconfigdialog.cpp: $(srcdir)/tagguesserconfigdialog.ui tagguesserconfigdialog.h tagguesserconfigdialog.moc
	rm -f tagguesserconfigdialog.cpp
	echo '#include <kdialog.h>' > tagguesserconfigdialog.cpp
	echo '#include <klocale.h>' >> tagguesserconfigdialog.cpp
	$(UIC) -tr ${UIC_TR} -i tagguesserconfigdialog.h $(srcdir)/tagguesserconfigdialog.ui > tagguesserconfigdialog.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" tagguesserconfigdialog.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_tagguesserconfigdialog,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> tagguesserconfigdialog.cpp ;\
	rm -f tagguesserconfigdialog.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "tagguesserconfigdialog.moc"' >> tagguesserconfigdialog.cpp; else rm -f tagguesserconfigdialog.cpp ; exit $$ret ; fi

tagguesserconfigdialog.h: $(srcdir)/tagguesserconfigdialog.ui
	rm -rf tagguesserconfigdialog.h;
	$(UIC) $(srcdir)/tagguesserconfigdialog.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> tagguesserconfigdialog.h ;
tagguesserconfigdialog.moc: tagguesserconfigdialog.h
	$(MOC) tagguesserconfigdialog.h -o tagguesserconfigdialog.moc
