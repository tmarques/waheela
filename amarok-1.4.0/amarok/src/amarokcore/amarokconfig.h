// This file is generated by kconfig_compiler from amarok.kcfg.
// All changes you do to this file will be lost.
#ifndef AMAROKCONFIG_H
#define AMAROKCONFIG_H

#include <kconfigskeleton.h>
#include <kdebug.h>

#include <qdir.h>
class AmarokConfig : public KConfigSkeleton
{
  public:
    class EnumRepeat
    {
      public:
      enum type { Off, Track, Album, Playlist, COUNT };
    };
    class EnumFavorTracks
    {
      public:
      enum type { Off, HigherScores, HigherRatings, LessRecentlyPlayed, COUNT };
    };
    class EnumRandomMode
    {
      public:
      enum type { Off, Tracks, Albums, COUNT };
    };
    class EnumOsdAlignment
    {
      public:
      enum type { Left, Middle, Center, Right, COUNT };
    };

    static AmarokConfig *self();
    ~AmarokConfig();

    /**
      Set Amarok Version
    */
    static
    void setVersion( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "Version" ) ))
        self()->mVersion = v;
    }

    /**
      Get Amarok Version
    */
    static
    QString version()
    {
      return self()->mVersion;
    }

    /**
      Set Position of player window
    */
    static
    void setPlayerPos( const QPoint & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PlayerPos" ) ))
        self()->mPlayerPos = v;
    }

    /**
      Get Position of player window
    */
    static
    QPoint playerPos()
    {
      return self()->mPlayerPos;
    }

    /**
      Set Whether Player Window is in minimal or normal mode
    */
    static
    void setPlayerWindowMinimalView( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PlayerWindowMinimalView" ) ))
        self()->mPlayerWindowMinimalView = v;
    }

    /**
      Get Whether Player Window is in minimal or normal mode
    */
    static
    bool playerWindowMinimalView()
    {
      return self()->mPlayerWindowMinimalView;
    }

    /**
      Set Position of playlist window
    */
    static
    void setPlaylistWindowPos( const QPoint & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PlaylistWindowPos" ) ))
        self()->mPlaylistWindowPos = v;
    }

    /**
      Get Position of playlist window
    */
    static
    QPoint playlistWindowPos()
    {
      return self()->mPlaylistWindowPos;
    }

    /**
      Set Size of playlist window
    */
    static
    void setPlaylistWindowSize( const QSize & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PlaylistWindowSize" ) ))
        self()->mPlaylistWindowSize = v;
    }

    /**
      Get Size of playlist window
    */
    static
    QSize playlistWindowSize()
    {
      return self()->mPlaylistWindowSize;
    }

    /**
      Set Whether to save playlist on quit
    */
    static
    void setSavePlaylist( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SavePlaylist" ) ))
        self()->mSavePlaylist = v;
    }

    /**
      Get Whether to save playlist on quit
    */
    static
    bool savePlaylist()
    {
      return self()->mSavePlaylist;
    }

    /**
      Set Whether to follow symlinks while adding items to playlist recursively
    */
    static
    void setFollowSymlinks( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "FollowSymlinks" ) ))
        self()->mFollowSymlinks = v;
    }

    /**
      Get Whether to follow symlinks while adding items to playlist recursively
    */
    static
    bool followSymlinks()
    {
      return self()->mFollowSymlinks;
    }

    /**
      Set Whether to display remaining track time
    */
    static
    void setTimeDisplayRemaining( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TimeDisplayRemaining" ) ))
        self()->mTimeDisplayRemaining = v;
    }

    /**
      Get Whether to display remaining track time
    */
    static
    bool timeDisplayRemaining()
    {
      return self()->mTimeDisplayRemaining;
    }

    /**
      Set Whether to show scores for tracks
    */
    static
    void setUseScores( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "UseScores" ) ))
        self()->mUseScores = v;
    }

    /**
      Get Whether to show scores for tracks
    */
    static
    bool useScores()
    {
      return self()->mUseScores;
    }

    /**
      Set Whether to show ratings for tracks
    */
    static
    void setUseRatings( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "UseRatings" ) ))
        self()->mUseRatings = v;
    }

    /**
      Get Whether to show ratings for tracks
    */
    static
    bool useRatings()
    {
      return self()->mUseRatings;
    }

    /**
      Set Which track(s) to play repeatedly
    */
    static
    void setRepeat( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "Repeat" ) ))
        self()->mRepeat = v;
    }

    /**
      Get Which track(s) to play repeatedly
    */
    static
    int repeat()
    {
      return self()->mRepeat;
    }

    /**
      Set Which tracks or albums to favor in Random Mode
    */
    static
    void setFavorTracks( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "FavorTracks" ) ))
        self()->mFavorTracks = v;
    }

    /**
      Get Which tracks or albums to favor in Random Mode
    */
    static
    int favorTracks()
    {
      return self()->mFavorTracks;
    }

    /**
      Set Whether to play tracks or albums in random order
    */
    static
    void setRandomMode( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "RandomMode" ) ))
        self()->mRandomMode = v;
    }

    /**
      Get Whether to play tracks or albums in random order
    */
    static
    int randomMode()
    {
      return self()->mRandomMode;
    }

    /**
      Set The most recently used Dynamic Mode
    */
    static
    void setLastDynamicMode( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "LastDynamicMode" ) ))
        self()->mLastDynamicMode = v;
    }

    /**
      Get The most recently used Dynamic Mode
    */
    static
    QString lastDynamicMode()
    {
      return self()->mLastDynamicMode;
    }

    /**
      Set Whether to show icon in system tray
    */
    static
    void setShowTrayIcon( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ShowTrayIcon" ) ))
        self()->mShowTrayIcon = v;
    }

    /**
      Get Whether to show icon in system tray
    */
    static
    bool showTrayIcon()
    {
      return self()->mShowTrayIcon;
    }

    /**
      Set Whether to animate the systray icon
    */
    static
    void setAnimateTrayIcon( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "AnimateTrayIcon" ) ))
        self()->mAnimateTrayIcon = v;
    }

    /**
      Get Whether to animate the systray icon
    */
    static
    bool animateTrayIcon()
    {
      return self()->mAnimateTrayIcon;
    }

    /**
      Set Whether to show player window
    */
    static
    void setShowPlayerWindow( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ShowPlayerWindow" ) ))
        self()->mShowPlayerWindow = v;
    }

    /**
      Get Whether to show player window
    */
    static
    bool showPlayerWindow()
    {
      return self()->mShowPlayerWindow;
    }

    /**
      Set Whether to show the moodbar in the player window
    */
    static
    void setShowMoodbar( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ShowMoodbar" ) ))
        self()->mShowMoodbar = v;
    }

    /**
      Get Whether to show the moodbar in the player window
    */
    static
    bool showMoodbar()
    {
      return self()->mShowMoodbar;
    }

    /**
      Set Calculate the Mood data whenever a track is played
    */
    static
    void setCalculateMoodOnPlay( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "CalculateMoodOnPlay" ) ))
        self()->mCalculateMoodOnPlay = v;
    }

    /**
      Get Calculate the Mood data whenever a track is played
    */
    static
    bool calculateMoodOnPlay()
    {
      return self()->mCalculateMoodOnPlay;
    }

    /**
      Set Calculate the Mood data whenever a track is in the playlist
    */
    static
    void setCalculateMoodOnQueue( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "CalculateMoodOnQueue" ) ))
        self()->mCalculateMoodOnQueue = v;
    }

    /**
      Get Calculate the Mood data whenever a track is in the playlist
    */
    static
    bool calculateMoodOnQueue()
    {
      return self()->mCalculateMoodOnQueue;
    }

    /**
      Set Store Mood data files with music
    */
    static
    void setMoodsWithMusic( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MoodsWithMusic" ) ))
        self()->mMoodsWithMusic = v;
    }

    /**
      Get Store Mood data files with music
    */
    static
    bool moodsWithMusic()
    {
      return self()->mMoodsWithMusic;
    }

    /**
      Set Maximize color spread of Moodbar
    */
    static
    void setMakeMoodier( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MakeMoodier" ) ))
        self()->mMakeMoodier = v;
    }

    /**
      Get Maximize color spread of Moodbar
    */
    static
    bool makeMoodier()
    {
      return self()->mMakeMoodier;
    }

    /**
      Set Alter Mood data according to theme
    */
    static
    void setAlterMood( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "AlterMood" ) ))
        self()->mAlterMood = v;
    }

    /**
      Get Alter Mood data according to theme
    */
    static
    int alterMood()
    {
      return self()->mAlterMood;
    }

    /**
      Set The old column size for moodbar
    */
    static
    void setMoodbarColumnSize( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MoodbarColumnSize" ) ))
        self()->mMoodbarColumnSize = v;
    }

    /**
      Get The old column size for moodbar
    */
    static
    int moodbarColumnSize()
    {
      return self()->mMoodbarColumnSize;
    }

    /**
      Set Whether to show the toolbar in the playlist window.
    */
    static
    void setShowToolbar( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ShowToolbar" ) ))
        self()->mShowToolbar = v;
    }

    /**
      Get Whether to show the toolbar in the playlist window.
    */
    static
    bool showToolbar()
    {
      return self()->mShowToolbar;
    }

    /**
      Set Size of the cover previews in Contextbrowser and Covermanager
    */
    static
    void setCoverPreviewSize( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "CoverPreviewSize" ) ))
        self()->mCoverPreviewSize = v;
    }

    /**
      Get Size of the cover previews in Contextbrowser and Covermanager
    */
    static
    int coverPreviewSize()
    {
      return self()->mCoverPreviewSize;
    }

    /**
      Set Whether to add directories to playlist recursively
    */
    static
    void setDirectoriesRecursively( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "DirectoriesRecursively" ) ))
        self()->mDirectoriesRecursively = v;
    }

    /**
      Get Whether to add directories to playlist recursively
    */
    static
    bool directoriesRecursively()
    {
      return self()->mDirectoriesRecursively;
    }

    /**
      Set Delay between tracks, in milliseconds
    */
    static
    void setTrackDelayLength( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TrackDelayLength" ) ))
        self()->mTrackDelayLength = v;
    }

    /**
      Get Delay between tracks, in milliseconds
    */
    static
    int trackDelayLength()
    {
      return self()->mTrackDelayLength;
    }

    /**
      Set Whether the playlist window is visible
    */
    static
    void setPlaylistWindowEnabled( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PlaylistWindowEnabled" ) ))
        self()->mPlaylistWindowEnabled = v;
    }

    /**
      Get Whether the playlist window is visible
    */
    static
    bool playlistWindowEnabled()
    {
      return self()->mPlaylistWindowEnabled;
    }

    /**
      Set Number of undo levels in playlist
    */
    static
    void setUndoLevels( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "UndoLevels" ) ))
        self()->mUndoLevels = v;
    }

    /**
      Get Number of undo levels in playlist
    */
    static
    int undoLevels()
    {
      return self()->mUndoLevels;
    }

    /**
      Set Index of current visual analyzer
    */
    static
    void setCurrentAnalyzer( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "CurrentAnalyzer" ) ))
        self()->mCurrentAnalyzer = v;
    }

    /**
      Get Index of current visual analyzer
    */
    static
    int currentAnalyzer()
    {
      return self()->mCurrentAnalyzer;
    }

    /**
      Set Index of analyzer displayed in playlist window
    */
    static
    void setCurrentPlaylistAnalyzer( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "CurrentPlaylistAnalyzer" ) ))
        self()->mCurrentPlaylistAnalyzer = v;
    }

    /**
      Get Index of analyzer displayed in playlist window
    */
    static
    int currentPlaylistAnalyzer()
    {
      return self()->mCurrentPlaylistAnalyzer;
    }

    /**
      Set Playlist window splitter positions
    */
    static
    void setPlaylistWindowSplitter( const QValueList<int> & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PlaylistWindowSplitter" ) ))
        self()->mPlaylistWindowSplitter = v;
    }

    /**
      Get Playlist window splitter positions
    */
    static
    QValueList<int> playlistWindowSplitter()
    {
      return self()->mPlaylistWindowSplitter;
    }

    /**
      Set Whether the playlist should scroll with the active playlist item
    */
    static
    void setPlaylistFollowActive( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PlaylistFollowActive" ) ))
        self()->mPlaylistFollowActive = v;
    }

    /**
      Get Whether the playlist should scroll with the active playlist item
    */
    static
    bool playlistFollowActive()
    {
      return self()->mPlaylistFollowActive;
    }

    /**
      Set Whether a splash-screen should be displayed on startup
    */
    static
    void setShowSplashscreen( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ShowSplashscreen" ) ))
        self()->mShowSplashscreen = v;
    }

    /**
      Get Whether a splash-screen should be displayed on startup
    */
    static
    bool showSplashscreen()
    {
      return self()->mShowSplashscreen;
    }

    /**
      Set Whether ContextBrowser should be activated when starting playback
    */
    static
    void setAutoShowContextBrowser( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "AutoShowContextBrowser" ) ))
        self()->mAutoShowContextBrowser = v;
    }

    /**
      Get Whether ContextBrowser should be activated when starting playback
    */
    static
    bool autoShowContextBrowser()
    {
      return self()->mAutoShowContextBrowser;
    }

    /**
      Set Set CSS stylesheet used to customize ContextBrowser's rendering
    */
    static
    void setContextBrowserStyleSheet( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ContextBrowserStyleSheet" ) ))
        self()->mContextBrowserStyleSheet = v;
    }

    /**
      Get Set CSS stylesheet used to customize ContextBrowser's rendering
    */
    static
    QString contextBrowserStyleSheet()
    {
      return self()->mContextBrowserStyleSheet;
    }

    /**
      Set Whether Menubar is shown
    */
    static
    void setShowMenuBar( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ShowMenuBar" ) ))
        self()->mShowMenuBar = v;
    }

    /**
      Get Whether Menubar is shown
    */
    static
    bool showMenuBar()
    {
      return self()->mShowMenuBar;
    }

    /**
      Set Whether playlists store relative path
    */
    static
    void setRelativePlaylist( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "RelativePlaylist" ) ))
        self()->mRelativePlaylist = v;
    }

    /**
      Get Whether playlists store relative path
    */
    static
    bool relativePlaylist()
    {
      return self()->mRelativePlaylist;
    }

    /**
      Set Whether organize files will overwrite existing files.
    */
    static
    void setOverwriteFiles( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OverwriteFiles" ) ))
        self()->mOverwriteFiles = v;
    }

    /**
      Get Whether organize files will overwrite existing files.
    */
    static
    bool overwriteFiles()
    {
      return self()->mOverwriteFiles;
    }

    /**
      Set Whether organize files will group directories according to their filetype.
    */
    static
    void setGroupByFiletype( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "GroupByFiletype" ) ))
        self()->mGroupByFiletype = v;
    }

    /**
      Get Whether organize files will group directories according to their filetype.
    */
    static
    bool groupByFiletype()
    {
      return self()->mGroupByFiletype;
    }

    /**
      Set Whether organize files will group artist starting in the same character.
    */
    static
    void setGroupArtists( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "GroupArtists" ) ))
        self()->mGroupArtists = v;
    }

    /**
      Get Whether organize files will group artist starting in the same character.
    */
    static
    bool groupArtists()
    {
      return self()->mGroupArtists;
    }

    /**
      Set Whether organize files will ignore The in artist names.
    */
    static
    void setIgnoreThe( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "IgnoreThe" ) ))
        self()->mIgnoreThe = v;
    }

    /**
      Get Whether organize files will ignore The in artist names.
    */
    static
    bool ignoreThe()
    {
      return self()->mIgnoreThe;
    }

    /**
      Set Whether organize files will replace spaces in filenames by an underscore.
    */
    static
    void setReplaceSpace( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ReplaceSpace" ) ))
        self()->mReplaceSpace = v;
    }

    /**
      Get Whether organize files will replace spaces in filenames by an underscore.
    */
    static
    bool replaceSpace()
    {
      return self()->mReplaceSpace;
    }

    /**
      Set Whether organize files will use cover art as folder icons.
    */
    static
    void setCoverIcons( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "CoverIcons" ) ))
        self()->mCoverIcons = v;
    }

    /**
      Get Whether organize files will use cover art as folder icons.
    */
    static
    bool coverIcons()
    {
      return self()->mCoverIcons;
    }

    /**
      Set Index of collection folder destination for Organize files.
    */
    static
    void setOrganizeDirectory( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OrganizeDirectory" ) ))
        self()->mOrganizeDirectory = v;
    }

    /**
      Get Index of collection folder destination for Organize files.
    */
    static
    int organizeDirectory()
    {
      return self()->mOrganizeDirectory;
    }

    /**
      Set Whether organize files will rename files in a manner compatible with vfat filesystems.
    */
    static
    void setVfatCompatible( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "VfatCompatible" ) ))
        self()->mVfatCompatible = v;
    }

    /**
      Get Whether organize files will rename files in a manner compatible with vfat filesystems.
    */
    static
    bool vfatCompatible()
    {
      return self()->mVfatCompatible;
    }

    /**
      Set Whether organize files will rename files such that they only contain 7-bit ASCII characters.
    */
    static
    void setAsciiOnly( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "AsciiOnly" ) ))
        self()->mAsciiOnly = v;
    }

    /**
      Get Whether organize files will rename files such that they only contain 7-bit ASCII characters.
    */
    static
    bool asciiOnly()
    {
      return self()->mAsciiOnly;
    }

    /**
      Set Whether organize files will use a custom file naming scheme.
    */
    static
    void setUseCustomScheme( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "UseCustomScheme" ) ))
        self()->mUseCustomScheme = v;
    }

    /**
      Get Whether organize files will use a custom file naming scheme.
    */
    static
    bool useCustomScheme()
    {
      return self()->mUseCustomScheme;
    }

    /**
      Set Format string for Organize files, if a custom naming scheme is used.
    */
    static
    void setCustomScheme( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "CustomScheme" ) ))
        self()->mCustomScheme = v;
    }

    /**
      Get Format string for Organize files, if a custom naming scheme is used.
    */
    static
    QString customScheme()
    {
      return self()->mCustomScheme;
    }

    /**
      Set Regular expression that is to be replaced.
    */
    static
    void setReplacementRegexp( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ReplacementRegexp" ) ))
        self()->mReplacementRegexp = v;
    }

    /**
      Get Regular expression that is to be replaced.
    */
    static
    QString replacementRegexp()
    {
      return self()->mReplacementRegexp;
    }

    /**
      Set Replacing string.
    */
    static
    void setReplacementString( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ReplacementString" ) ))
        self()->mReplacementString = v;
    }

    /**
      Get Replacing string.
    */
    static
    QString replacementString()
    {
      return self()->mReplacementString;
    }

    /**
      Set Filename of the external web browser to be invoked by amaroK.
    */
    static
    void setExternalBrowser( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ExternalBrowser" ) ))
        self()->mExternalBrowser = v;
    }

    /**
      Get Filename of the external web browser to be invoked by amaroK.
    */
    static
    QString externalBrowser()
    {
      return self()->mExternalBrowser;
    }

    /**
      Set Whether amaroK's custom icon theme or the system icon theme is used.
    */
    static
    void setUseCustomIconTheme( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "UseCustomIconTheme" ) ))
        self()->mUseCustomIconTheme = v;
    }

    /**
      Get Whether amaroK's custom icon theme or the system icon theme is used.
    */
    static
    bool useCustomIconTheme()
    {
      return self()->mUseCustomIconTheme;
    }

    /**
      Set Whether the collection view is in the flat or tree view mode
    */
    static
    void setCollectionBrowserViewMode( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "CollectionBrowserViewMode" ) ))
        self()->mCollectionBrowserViewMode = v;
    }

    /**
      Get Whether the collection view is in the flat or tree view mode
    */
    static
    int collectionBrowserViewMode()
    {
      return self()->mCollectionBrowserViewMode;
    }

    /**
      Set Master volume
    */
    static
    void setMasterVolume( int v )
    {
      if (v < 0)
      {
        kdDebug() << "setMasterVolume: value " << v << " is less than the minimum value of 0" << endl;
        v = 0;
      }

      if (v > 100)
      {
        kdDebug() << "setMasterVolume: value " << v << " is greater than the maximum value of 100" << endl;
        v = 100;
      }

      if (!self()->isImmutable( QString::fromLatin1( "MasterVolume" ) ))
        self()->mMasterVolume = v;
    }

    /**
      Get Master volume
    */
    static
    int masterVolume()
    {
      return self()->mMasterVolume;
    }

    /**
      Set Whether to crossfade between tracks
    */
    static
    void setCrossfade( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "Crossfade" ) ))
        self()->mCrossfade = v;
    }

    /**
      Get Whether to crossfade between tracks
    */
    static
    bool crossfade()
    {
      return self()->mCrossfade;
    }

    /**
      Set Length of crossfade, in milliseconds
    */
    static
    void setCrossfadeLength( int v )
    {
      if (v < 1500)
      {
        kdDebug() << "setCrossfadeLength: value " << v << " is less than the minimum value of 1500" << endl;
        v = 1500;
      }
      if (!self()->isImmutable( QString::fromLatin1( "CrossfadeLength" ) ))
        self()->mCrossfadeLength = v;
    }

    /**
      Get Length of crossfade, in milliseconds
    */
    static
    int crossfadeLength()
    {
      return self()->mCrossfadeLength;
    }

    /**
      Set Only crossfade when manually changing tracks
    */
    static
    void setCrossfadeManualOnly( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "CrossfadeManualOnly" ) ))
        self()->mCrossfadeManualOnly = v;
    }

    /**
      Get Only crossfade when manually changing tracks
    */
    static
    bool crossfadeManualOnly()
    {
      return self()->mCrossfadeManualOnly;
    }

    /**
      Set Sound system to use
    */
    static
    void setSoundSystem( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SoundSystem" ) ))
        self()->mSoundSystem = v;
    }

    /**
      Get Sound system to use
    */
    static
    QString soundSystem()
    {
      return self()->mSoundSystem;
    }

    /**
      Set Enables the equalizer plugin
    */
    static
    void setEqualizerEnabled( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "EqualizerEnabled" ) ))
        self()->mEqualizerEnabled = v;
    }

    /**
      Get Enables the equalizer plugin
    */
    static
    bool equalizerEnabled()
    {
      return self()->mEqualizerEnabled;
    }

    /**
      Set Equalizer pre-amplification value, range -100..100, 0 is normal.
    */
    static
    void setEqualizerPreamp( int v )
    {
      if (v < -100)
      {
        kdDebug() << "setEqualizerPreamp: value " << v << " is less than the minimum value of -100" << endl;
        v = -100;
      }

      if (v > 100)
      {
        kdDebug() << "setEqualizerPreamp: value " << v << " is greater than the maximum value of 100" << endl;
        v = 100;
      }

      if (!self()->isImmutable( QString::fromLatin1( "EqualizerPreamp" ) ))
        self()->mEqualizerPreamp = v;
    }

    /**
      Get Equalizer pre-amplification value, range -100..100, 0 is normal.
    */
    static
    int equalizerPreamp()
    {
      return self()->mEqualizerPreamp;
    }

    /**
      Set Band gains for equalizer, 10 values, range -100..100, 0 is normal.
    */
    static
    void setEqualizerGains( const QValueList<int> & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "EqualizerGains" ) ))
        self()->mEqualizerGains = v;
    }

    /**
      Get Band gains for equalizer, 10 values, range -100..100, 0 is normal.
    */
    static
    QValueList<int> equalizerGains()
    {
      return self()->mEqualizerGains;
    }

    /**
      Set Equalizer preset name.
    */
    static
    void setEqualizerPreset( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "EqualizerPreset" ) ))
        self()->mEqualizerPreset = v;
    }

    /**
      Get Equalizer preset name.
    */
    static
    QString equalizerPreset()
    {
      return self()->mEqualizerPreset;
    }

    /**
      Set Amazon locale for cover retrieval
    */
    static
    void setAmazonLocale( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "AmazonLocale" ) ))
        self()->mAmazonLocale = v;
    }

    /**
      Get Amazon locale for cover retrieval
    */
    static
    QString amazonLocale()
    {
      return self()->mAmazonLocale;
    }

    /**
      Set Wikipedia locale for information retrieval
    */
    static
    void setWikipediaLocale( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "WikipediaLocale" ) ))
        self()->mWikipediaLocale = v;
    }

    /**
      Get Wikipedia locale for information retrieval
    */
    static
    QString wikipediaLocale()
    {
      return self()->mWikipediaLocale;
    }

    /**
      Set Use On-Screen Display
    */
    static
    void setOsdEnabled( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdEnabled" ) ))
        self()->mOsdEnabled = v;
    }

    /**
      Get Use On-Screen Display
    */
    static
    bool osdEnabled()
    {
      return self()->mOsdEnabled;
    }

    /**
      Set Display the same information in the OSD as in the playlist columns.
    */
    static
    void setOsdUsePlaylistColumns( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdUsePlaylistColumns" ) ))
        self()->mOsdUsePlaylistColumns = v;
    }

    /**
      Get Display the same information in the OSD as in the playlist columns.
    */
    static
    bool osdUsePlaylistColumns()
    {
      return self()->mOsdUsePlaylistColumns;
    }

    /**
      Set The OSD text to show
    */
    static
    void setOsdText( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdText" ) ))
        self()->mOsdText = v;
    }

    /**
      Get The OSD text to show
    */
    static
    QString osdText()
    {
      return self()->mOsdText;
    }

    /**
      Set Font for On-Screen Display
    */
    static
    void setOsdFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdFont" ) ))
        self()->mOsdFont = v;
    }

    /**
      Get Font for On-Screen Display
    */
    static
    QFont osdFont()
    {
      return self()->mOsdFont;
    }

    /**
      Set Draw a shadow around the text.
    */
    static
    void setOsdDrawShadow( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdDrawShadow" ) ))
        self()->mOsdDrawShadow = v;
    }

    /**
      Get Draw a shadow around the text.
    */
    static
    bool osdDrawShadow()
    {
      return self()->mOsdDrawShadow;
    }

    /**
      Set Fake-translucency Toggle
    */
    static
    void setOsdUseFakeTranslucency( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdUseFakeTranslucency" ) ))
        self()->mOsdUseFakeTranslucency = v;
    }

    /**
      Get Fake-translucency Toggle
    */
    static
    bool osdUseFakeTranslucency()
    {
      return self()->mOsdUseFakeTranslucency;
    }

    /**
      Set Whether to use custom colors for the OSD
    */
    static
    void setOsdUseCustomColors( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdUseCustomColors" ) ))
        self()->mOsdUseCustomColors = v;
    }

    /**
      Get Whether to use custom colors for the OSD
    */
    static
    bool osdUseCustomColors()
    {
      return self()->mOsdUseCustomColors;
    }

    /**
      Set Font Color for On-Screen Display
    */
    static
    void setOsdTextColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdTextColor" ) ))
        self()->mOsdTextColor = v;
    }

    /**
      Get Font Color for On-Screen Display
    */
    static
    QColor osdTextColor()
    {
      return self()->mOsdTextColor;
    }

    /**
      Set Background Color for On-Screen Display
    */
    static
    void setOsdBackgroundColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdBackgroundColor" ) ))
        self()->mOsdBackgroundColor = v;
    }

    /**
      Get Background Color for On-Screen Display
    */
    static
    QColor osdBackgroundColor()
    {
      return self()->mOsdBackgroundColor;
    }

    /**
      Set How many milliseconds the text should be displayed
    */
    static
    void setOsdDuration( int v )
    {
      if (v < 0)
      {
        kdDebug() << "setOsdDuration: value " << v << " is less than the minimum value of 0" << endl;
        v = 0;
      }
      if (!self()->isImmutable( QString::fromLatin1( "OsdDuration" ) ))
        self()->mOsdDuration = v;
    }

    /**
      Get How many milliseconds the text should be displayed
    */
    static
    int osdDuration()
    {
      return self()->mOsdDuration;
    }

    /**
      Set Y position offset
    */
    static
    void setOsdYOffset( int v )
    {
      if (v < 0)
      {
        kdDebug() << "setOsdYOffset: value " << v << " is less than the minimum value of 0" << endl;
        v = 0;
      }

      if (v > 10000)
      {
        kdDebug() << "setOsdYOffset: value " << v << " is greater than the maximum value of 10000" << endl;
        v = 10000;
      }

      if (!self()->isImmutable( QString::fromLatin1( "OsdYOffset" ) ))
        self()->mOsdYOffset = v;
    }

    /**
      Get Y position offset
    */
    static
    int osdYOffset()
    {
      return self()->mOsdYOffset;
    }

    /**
      Set OSD screen
    */
    static
    void setOsdScreen( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdScreen" ) ))
        self()->mOsdScreen = v;
    }

    /**
      Get OSD screen
    */
    static
    int osdScreen()
    {
      return self()->mOsdScreen;
    }

    /**
      Set Whether the album cover should be shown
    */
    static
    void setOsdCover( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdCover" ) ))
        self()->mOsdCover = v;
    }

    /**
      Get Whether the album cover should be shown
    */
    static
    bool osdCover()
    {
      return self()->mOsdCover;
    }

    /**
      Set Align OSD to
    */
    static
    void setOsdAlignment( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "OsdAlignment" ) ))
        self()->mOsdAlignment = v;
    }

    /**
      Get Align OSD to
    */
    static
    int osdAlignment()
    {
      return self()->mOsdAlignment;
    }

    /**
      Set Whether to use user-defined fonts
    */
    static
    void setUseCustomFonts( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "UseCustomFonts" ) ))
        self()->mUseCustomFonts = v;
    }

    /**
      Get Whether to use user-defined fonts
    */
    static
    bool useCustomFonts()
    {
      return self()->mUseCustomFonts;
    }

    /**
      Set Font in playlist window
    */
    static
    void setPlaylistWindowFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PlaylistWindowFont" ) ))
        self()->mPlaylistWindowFont = v;
    }

    /**
      Get Font in playlist window
    */
    static
    QFont playlistWindowFont()
    {
      return self()->mPlaylistWindowFont;
    }

    /**
      Set Font in player window
    */
    static
    void setPlayerWidgetFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PlayerWidgetFont" ) ))
        self()->mPlayerWidgetFont = v;
    }

    /**
      Get Font in player window
    */
    static
    QFont playerWidgetFont()
    {
      return self()->mPlayerWidgetFont;
    }

    /**
      Set Font in context browser
    */
    static
    void setContextBrowserFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ContextBrowserFont" ) ))
        self()->mContextBrowserFont = v;
    }

    /**
      Get Font in context browser
    */
    static
    QFont contextBrowserFont()
    {
      return self()->mContextBrowserFont;
    }

    /**
      Set Whether to use amaroK standard colors in the playlist window
    */
    static
    void setSchemeAmarok( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SchemeAmarok" ) ))
        self()->mSchemeAmarok = v;
    }

    /**
      Get Whether to use amaroK standard colors in the playlist window
    */
    static
    bool schemeAmarok()
    {
      return self()->mSchemeAmarok;
    }

    /**
      Set Whether to use global KDE colors in the playlist window
    */
    static
    void setSchemeKDE( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SchemeKDE" ) ))
        self()->mSchemeKDE = v;
    }

    /**
      Get Whether to use global KDE colors in the playlist window
    */
    static
    bool schemeKDE()
    {
      return self()->mSchemeKDE;
    }

    /**
      Set Whether to use user-defined colors in the playlist window
    */
    static
    void setSchemeCustom( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SchemeCustom" ) ))
        self()->mSchemeCustom = v;
    }

    /**
      Get Whether to use user-defined colors in the playlist window
    */
    static
    bool schemeCustom()
    {
      return self()->mSchemeCustom;
    }

    /**
      Set Playlist window foreground color
    */
    static
    void setPlaylistWindowFgColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PlaylistWindowFgColor" ) ))
        self()->mPlaylistWindowFgColor = v;
    }

    /**
      Get Playlist window foreground color
    */
    static
    QColor playlistWindowFgColor()
    {
      return self()->mPlaylistWindowFgColor;
    }

    /**
      Set Playlist window background color
    */
    static
    void setPlaylistWindowBgColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PlaylistWindowBgColor" ) ))
        self()->mPlaylistWindowBgColor = v;
    }

    /**
      Get Playlist window background color
    */
    static
    QColor playlistWindowBgColor()
    {
      return self()->mPlaylistWindowBgColor;
    }

    /**
      Set Resume playback of last played track on startup
    */
    static
    void setResumePlayback( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ResumePlayback" ) ))
        self()->mResumePlayback = v;
    }

    /**
      Get Resume playback of last played track on startup
    */
    static
    bool resumePlayback()
    {
      return self()->mResumePlayback;
    }

    /**
      Set Track URL to resume upon startup
    */
    static
    void setResumeTrack( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ResumeTrack" ) ))
        self()->mResumeTrack = v;
    }

    /**
      Get Track URL to resume upon startup
    */
    static
    QString resumeTrack()
    {
      return self()->mResumeTrack;
    }

    /**
      Set Time to resume at, in milliseconds
    */
    static
    void setResumeTime( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ResumeTime" ) ))
        self()->mResumeTime = v;
    }

    /**
      Get Time to resume at, in milliseconds
    */
    static
    int resumeTime()
    {
      return self()->mResumeTime;
    }

    /**
      Set Database Engine
    */
    static
    void setDatabaseEngine( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "DatabaseEngine" ) ))
        self()->mDatabaseEngine = v;
    }

    /**
      Get Database Engine
    */
    static
    QString databaseEngine()
    {
      return self()->mDatabaseEngine;
    }

    /**
      Set Whether Collections folders are scanned recursively
    */
    static
    void setScanRecursively( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ScanRecursively" ) ))
        self()->mScanRecursively = v;
    }

    /**
      Get Whether Collections folders are scanned recursively
    */
    static
    bool scanRecursively()
    {
      return self()->mScanRecursively;
    }

    /**
      Set Whether Collection folders are rescanned on change
    */
    static
    void setMonitorChanges( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MonitorChanges" ) ))
        self()->mMonitorChanges = v;
    }

    /**
      Get Whether Collection folders are rescanned on change
    */
    static
    bool monitorChanges()
    {
      return self()->mMonitorChanges;
    }

    /**
      Set List of folders in the Collection
    */
    static
    void setCollectionFolders( const QStringList & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "CollectionFolders" ) ))
        self()->mCollectionFolders = v;
    }

    /**
      Get List of folders in the Collection
    */
    static
    QStringList collectionFolders()
    {
      return self()->mCollectionFolders;
    }

    /**
      Set Enable/disable advanced tag-based features (warning: alpha status, and changes your files!)
    */
    static
    void setAdvancedTagFeatures( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "AdvancedTagFeatures" ) ))
        self()->mAdvancedTagFeatures = v;
    }

    /**
      Get Enable/disable advanced tag-based features (warning: alpha status, and changes your files!)
    */
    static
    bool advancedTagFeatures()
    {
      return self()->mAdvancedTagFeatures;
    }

    /**
      Set Host
    */
    static
    void setMySqlHost( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MySqlHost" ) ))
        self()->mMySqlHost = v;
    }

    /**
      Get Host
    */
    static
    QString mySqlHost()
    {
      return self()->mMySqlHost;
    }

    /**
      Set Port
    */
    static
    void setMySqlPort( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MySqlPort" ) ))
        self()->mMySqlPort = v;
    }

    /**
      Get Port
    */
    static
    int mySqlPort()
    {
      return self()->mMySqlPort;
    }

    /**
      Set Database name
    */
    static
    void setMySqlDbName( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MySqlDbName" ) ))
        self()->mMySqlDbName = v;
    }

    /**
      Get Database name
    */
    static
    QString mySqlDbName()
    {
      return self()->mMySqlDbName;
    }

    /**
      Set User
    */
    static
    void setMySqlUser( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MySqlUser" ) ))
        self()->mMySqlUser = v;
    }

    /**
      Get User
    */
    static
    QString mySqlUser()
    {
      return self()->mMySqlUser;
    }

    /**
      Set Password
    */
    static
    void setMySqlPassword( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MySqlPassword" ) ))
        self()->mMySqlPassword = v;
    }

    /**
      Get Password
    */
    static
    QString mySqlPassword()
    {
      return self()->mMySqlPassword;
    }

    /**
      Set Password
    */
    static
    void setMySqlPassword2( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MySqlPassword2" ) ))
        self()->mMySqlPassword2 = v;
    }

    /**
      Get Password
    */
    static
    QString mySqlPassword2()
    {
      return self()->mMySqlPassword2;
    }

    /**
      Set Host
    */
    static
    void setPostgresqlHost( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PostgresqlHost" ) ))
        self()->mPostgresqlHost = v;
    }

    /**
      Get Host
    */
    static
    QString postgresqlHost()
    {
      return self()->mPostgresqlHost;
    }

    /**
      Set Port
    */
    static
    void setPostgresqlPort( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PostgresqlPort" ) ))
        self()->mPostgresqlPort = v;
    }

    /**
      Get Port
    */
    static
    int postgresqlPort()
    {
      return self()->mPostgresqlPort;
    }

    /**
      Set Database name
    */
    static
    void setPostgresqlDbName( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PostgresqlDbName" ) ))
        self()->mPostgresqlDbName = v;
    }

    /**
      Get Database name
    */
    static
    QString postgresqlDbName()
    {
      return self()->mPostgresqlDbName;
    }

    /**
      Set User
    */
    static
    void setPostgresqlUser( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PostgresqlUser" ) ))
        self()->mPostgresqlUser = v;
    }

    /**
      Get User
    */
    static
    QString postgresqlUser()
    {
      return self()->mPostgresqlUser;
    }

    /**
      Set Password
    */
    static
    void setPostgresqlPassword( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PostgresqlPassword" ) ))
        self()->mPostgresqlPassword = v;
    }

    /**
      Get Password
    */
    static
    QString postgresqlPassword()
    {
      return self()->mPostgresqlPassword;
    }

    /**
      Set Password
    */
    static
    void setPostgresqlPassword2( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "PostgresqlPassword2" ) ))
        self()->mPostgresqlPassword2 = v;
    }

    /**
      Get Password
    */
    static
    QString postgresqlPassword2()
    {
      return self()->mPostgresqlPassword2;
    }

    /**
      Set SubmitPlayedSongs
    */
    static
    void setSubmitPlayedSongs( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SubmitPlayedSongs" ) ))
        self()->mSubmitPlayedSongs = v;
    }

    /**
      Get SubmitPlayedSongs
    */
    static
    bool submitPlayedSongs()
    {
      return self()->mSubmitPlayedSongs;
    }

    /**
      Set Username
    */
    static
    void setScrobblerUsername( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ScrobblerUsername" ) ))
        self()->mScrobblerUsername = v;
    }

    /**
      Get Username
    */
    static
    QString scrobblerUsername()
    {
      return self()->mScrobblerUsername;
    }

    /**
      Set Password
    */
    static
    void setScrobblerPassword( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ScrobblerPassword" ) ))
        self()->mScrobblerPassword = v;
    }

    /**
      Get Password
    */
    static
    QString scrobblerPassword()
    {
      return self()->mScrobblerPassword;
    }

    /**
      Set RetrieveSimilarArtists
    */
    static
    void setRetrieveSimilarArtists( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "RetrieveSimilarArtists" ) ))
        self()->mRetrieveSimilarArtists = v;
    }

    /**
      Get RetrieveSimilarArtists
    */
    static
    bool retrieveSimilarArtists()
    {
      return self()->mRetrieveSimilarArtists;
    }

    /**
      Set DeviceType
    */
    static
    void setDeviceType( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "DeviceType" ) ))
        self()->mDeviceType = v;
    }

    /**
      Get DeviceType
    */
    static
    QString deviceType()
    {
      return self()->mDeviceType;
    }

    /**
      Set MountPoint
    */
    static
    void setMountPoint( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MountPoint" ) ))
        self()->mMountPoint = v;
    }

    /**
      Get MountPoint
    */
    static
    QString mountPoint()
    {
      return self()->mMountPoint;
    }

    /**
      Set MountCommand
    */
    static
    void setMountCommand( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MountCommand" ) ))
        self()->mMountCommand = v;
    }

    /**
      Get MountCommand
    */
    static
    QString mountCommand()
    {
      return self()->mMountCommand;
    }

    /**
      Set UmountCommand
    */
    static
    void setUmountCommand( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "UmountCommand" ) ))
        self()->mUmountCommand = v;
    }

    /**
      Get UmountCommand
    */
    static
    QString umountCommand()
    {
      return self()->mUmountCommand;
    }

    /**
      Set AutoDeletePodcasts
    */
    static
    void setAutoDeletePodcasts( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "AutoDeletePodcasts" ) ))
        self()->mAutoDeletePodcasts = v;
    }

    /**
      Get AutoDeletePodcasts
    */
    static
    bool autoDeletePodcasts()
    {
      return self()->mAutoDeletePodcasts;
    }

    /**
      Set SyncStats
    */
    static
    void setSyncStats( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SyncStats" ) ))
        self()->mSyncStats = v;
    }

    /**
      Get SyncStats
    */
    static
    bool syncStats()
    {
      return self()->mSyncStats;
    }

    static
    void writeConfig()
    {
      static_cast<KConfigSkeleton*>(self())->writeConfig();
    }
  protected:
    AmarokConfig();
    static AmarokConfig *mSelf;


    // General Options
    QString mVersion;
    QPoint mPlayerPos;
    bool mPlayerWindowMinimalView;
    QPoint mPlaylistWindowPos;
    QSize mPlaylistWindowSize;
    bool mSavePlaylist;
    bool mFollowSymlinks;
    bool mTimeDisplayRemaining;
    bool mUseScores;
    bool mUseRatings;
    int mRepeat;
    int mFavorTracks;
    int mRandomMode;
    QString mLastDynamicMode;
    bool mShowTrayIcon;
    bool mAnimateTrayIcon;
    bool mShowPlayerWindow;
    bool mShowMoodbar;
    bool mCalculateMoodOnPlay;
    bool mCalculateMoodOnQueue;
    bool mMoodsWithMusic;
    bool mMakeMoodier;
    int mAlterMood;
    int mMoodbarColumnSize;
    bool mShowToolbar;
    int mCoverPreviewSize;
    bool mDirectoriesRecursively;
    int mTrackDelayLength;
    bool mPlaylistWindowEnabled;
    int mUndoLevels;
    int mCurrentAnalyzer;
    int mCurrentPlaylistAnalyzer;
    QValueList<int> mPlaylistWindowSplitter;
    bool mPlaylistFollowActive;
    bool mShowSplashscreen;
    bool mAutoShowContextBrowser;
    QString mContextBrowserStyleSheet;
    bool mShowMenuBar;
    bool mRelativePlaylist;
    bool mOverwriteFiles;
    bool mGroupByFiletype;
    bool mGroupArtists;
    bool mIgnoreThe;
    bool mReplaceSpace;
    bool mCoverIcons;
    int mOrganizeDirectory;
    bool mVfatCompatible;
    bool mAsciiOnly;
    bool mUseCustomScheme;
    QString mCustomScheme;
    QString mReplacementRegexp;
    QString mReplacementString;
    QString mExternalBrowser;
    bool mUseCustomIconTheme;
    int mCollectionBrowserViewMode;

    // Playback
    int mMasterVolume;
    bool mCrossfade;
    int mCrossfadeLength;
    bool mCrossfadeManualOnly;
    QString mSoundSystem;
    bool mEqualizerEnabled;
    int mEqualizerPreamp;
    QValueList<int> mEqualizerGains;
    QString mEqualizerPreset;

    // Cover Manager
    QString mAmazonLocale;

    // Wikipedia
    QString mWikipediaLocale;

    // OSD
    bool mOsdEnabled;
    bool mOsdUsePlaylistColumns;
    QString mOsdText;
    QFont mOsdFont;
    bool mOsdDrawShadow;
    bool mOsdUseFakeTranslucency;
    bool mOsdUseCustomColors;
    QColor mOsdTextColor;
    QColor mOsdBackgroundColor;
    int mOsdDuration;
    int mOsdYOffset;
    int mOsdScreen;
    bool mOsdCover;
    int mOsdAlignment;

    // Fonts
    bool mUseCustomFonts;
    QFont mPlaylistWindowFont;
    QFont mPlayerWidgetFont;
    QFont mContextBrowserFont;

    // Colors
    bool mSchemeAmarok;
    bool mSchemeKDE;
    bool mSchemeCustom;
    QColor mPlaylistWindowFgColor;
    QColor mPlaylistWindowBgColor;

    // Session
    bool mResumePlayback;
    QString mResumeTrack;
    int mResumeTime;

    // Collection
    QString mDatabaseEngine;
    bool mScanRecursively;
    bool mMonitorChanges;
    QStringList mCollectionFolders;
    bool mAdvancedTagFeatures;

    // MySql
    QString mMySqlHost;
    int mMySqlPort;
    QString mMySqlDbName;
    QString mMySqlUser;
    QString mMySqlPassword;
    QString mMySqlPassword2;

    // Postgresql
    QString mPostgresqlHost;
    int mPostgresqlPort;
    QString mPostgresqlDbName;
    QString mPostgresqlUser;
    QString mPostgresqlPassword;
    QString mPostgresqlPassword2;

    // Scrobbler
    bool mSubmitPlayedSongs;
    QString mScrobblerUsername;
    QString mScrobblerPassword;
    bool mRetrieveSimilarArtists;

    // MediaDevice
    QString mDeviceType;
    QString mMountPoint;
    QString mMountCommand;
    QString mUmountCommand;
    bool mAutoDeletePodcasts;
    bool mSyncStats;

  private:
};

#endif

